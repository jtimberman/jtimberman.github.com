<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[jtimberman's Code Blog]]></title>
  <link href="http://jtimberman.housepub.org/atom.xml" rel="self"/>
  <link href="http://jtimberman.housepub.org/"/>
  <updated>2014-07-21T09:52:32-06:00</updated>
  <id>http://jtimberman.housepub.org/</id>
  <author>
    <name><![CDATA[Joshua Timberman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Load_current_resource and Chef-shell]]></title>
    <link href="http://jtimberman.housepub.org/blog/2014/07/21/load-current-resource-and-chef-shell/"/>
    <updated>2014-07-21T09:50:56-06:00</updated>
    <id>http://jtimberman.housepub.org/blog/2014/07/21/load-current-resource-and-chef-shell</id>
    <content type="html"><![CDATA[<p>This post will illustrate <code>load_current_resource</code> and a basic use of chef-shell.</p>

<p>The <code>chef-shell</code> is an <code>irb</code>-based <a href="http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">REPL
(read-eval-print-loop)</a>.
Everything I do is Ruby code, just like in Chef recipes or other
cookbook components. I&rsquo;m going to use a <code>package</code> resource example, so
need privileged access (<code>sudo</code>).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% sudo chef-shell</span></code></pre></td></tr></table></div></figure>


<p>The chef-shell program loads its configuration, determines what
session type, and displays a banner. In this case, we&rsquo;re taking all
the defaults, which means no special configuration, and a <code>standalone</code>
session.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>loading configuration: none (standalone session)
</span><span class='line'>Session type: standalone
</span><span class='line'>Loading...done.
</span><span class='line'>
</span><span class='line'>This is the chef-shell.
</span><span class='line'> Chef Version: 11.14.0.rc.2
</span><span class='line'> http://www.opscode.com/chef
</span><span class='line'> http://docs.opscode.com/
</span><span class='line'>
</span><span class='line'>run `help' for help, `exit' or ^D to quit.
</span><span class='line'>
</span><span class='line'>Ohai2u jtimberman@jenkins.int.housepub.org!</span></code></pre></td></tr></table></div></figure>


<p>To evaluate resources as we&rsquo;d write them in a recipe, we need to
switch to recipe mode.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>chef &gt; recipe_mode</span></code></pre></td></tr></table></div></figure>


<p>I can do anything here that I can do in a recipe. I could paste in my
own recipes. Here, I&rsquo;m just going to add a <code>package</code> resource to
manage the <code>vim</code> package. Note that this works like the &ldquo;compile&rdquo;
phase of a <code>chef-client</code> run. The resource will be added to the
<code>Chef::ResourceCollection</code> object. We&rsquo;ll look at this in a little
more detail shortly.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>chef:recipe &gt; package "vim"
</span><span class='line'> =&gt; &lt;package[vim] @name: "vim" @noop: nil @before: nil @params: {} @provider: nil @allowed_actions: [:nothing, :install, :upgrade, :remove, :purge, :reconfig] @action: :install @updated: false @updated_by_last_action: false @supports: {} @ignore_failure: false @retries: 0 @retry_delay: 2 @source_line: "(irb#1):1:in `irb_binding'" @guard_interpreter: :default @elapsed_time: 0 @sensitive: false @candidate_version: nil @options: nil @package_name: "vim" @resource_name: :package @response_file: nil @response_file_variables: {} @source: nil @version: nil @timeout: 900 @cookbook_name: nil @recipe_name: nil&gt;</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;m done adding resources/writing code to test, so I&rsquo;ll initiate a
Chef run with the <code>run_chef</code> method (this is a special method in
<code>chef-shell</code>).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>chef:recipe &gt; run_chef
</span><span class='line'>[2014-07-21T09:04:51-06:00] INFO: Processing package[vim] action install ((irb#1) line 1)
</span><span class='line'>[2014-07-21T09:04:51-06:00] DEBUG: Chef::Version::Comparable does not know how to parse the platform version: jessie/sid
</span><span class='line'>[2014-07-21T09:04:51-06:00] DEBUG: Chef::Version::Comparable does not know how to parse the platform version: jessie/sid
</span><span class='line'>[2014-07-21T09:04:51-06:00] DEBUG: package[vim] checking package status for vim
</span><span class='line'>vim:
</span><span class='line'>  Installed: 2:7.4.335-1
</span><span class='line'>  Candidate: 2:7.4.335-1
</span><span class='line'>  Version table:
</span><span class='line'> *** 2:7.4.335-1 0
</span><span class='line'>        500 http://ftp.us.debian.org/debian/ testing/main amd64 Packages
</span><span class='line'>        100 /var/lib/dpkg/status
</span><span class='line'>[2014-07-21T09:04:51-06:00] DEBUG: package[vim] current version is 2:7.4.335-1
</span><span class='line'>[2014-07-21T09:04:51-06:00] DEBUG: package[vim] candidate version is 2:7.4.335-1
</span><span class='line'>[2014-07-21T09:04:51-06:00] DEBUG: package[vim] is already installed - nothing to do</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s take a look at what&rsquo;s happening. Note that we have INFO and
DEBUG output. By default, <code>chef-shell</code> runs with <code>Chef::Log#level</code>
set to <code>:debug</code>. In a normal Chef Client run with <code>:info</code> output, we
see the first line, but not the others. I&rsquo;ll show each line, and then
explain what Chef did.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[2014-07-21T09:04:51-06:00] INFO: Processing package[vim] action install ((irb#1) line 1)</span></code></pre></td></tr></table></div></figure>


<p>There is a timestamp, the resource, <code>package[vim]</code>, the action
<code>install</code> Chef will take, and the location in the recipe where this
was encountered. I didn&rsquo;t specify one in the resource, that&rsquo;s the
default action for package resources. The <code>irb#1 line 1</code> just means
that it was the first line of the <code>irb</code> in recipe mode.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[2014-07-21T09:04:51-06:00] DEBUG: Chef::Version::Comparable does not know how to parse the platform version: jessie/sid
</span><span class='line'>[2014-07-21T09:04:51-06:00] DEBUG: Chef::Version::Comparable does not know how to parse the platform version: jessie/sid</span></code></pre></td></tr></table></div></figure>


<p>Chef chooses the default provider for each resource based on a
mapping of platforms and their versions. It uses an internal class,
<code>Chef::Version::Comparable</code> to do this. The system I&rsquo;m using is a
Debian &ldquo;testing&rdquo; system, which has the codename <code>jessie</code>, but it
isn&rsquo;t a specific release number. Chef knows that for all <code>debian</code>
platforms to use the <code>apt</code> package provider, and that&rsquo;ll do here.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[2014-07-21T09:04:51-06:00] DEBUG: package[vim] checking package status for vim
</span><span class='line'>vim:
</span><span class='line'>  Installed: 2:7.4.335-1
</span><span class='line'>  Candidate: 2:7.4.335-1
</span><span class='line'>  Version table:
</span><span class='line'> *** 2:7.4.335-1 0
</span><span class='line'>        500 http://ftp.us.debian.org/debian/ testing/main amd64 Packages
</span><span class='line'>        100 /var/lib/dpkg/status
</span><span class='line'>[2014-07-21T09:04:51-06:00] DEBUG: package[vim] current version is 2:7.4.335-1
</span><span class='line'>[2014-07-21T09:04:51-06:00] DEBUG: package[vim] candidate version is 2:7.4.335-1</span></code></pre></td></tr></table></div></figure>


<p>This output is the <code>load_current_resource</code> method implemented in the
(apt package
provider)[<a href="https://github.com/opscode/chef/blob/c507822d7b3fe0b34d02719dea0ab483ec292195/lib/chef/provider/package/apt.rb#L33-L38">https://github.com/opscode/chef/blob/c507822d7b3fe0b34d02719dea0ab483ec292195/lib/chef/provider/package/apt.rb#L33-L38</a>].</p>

<p>The <code>check_package_state</code> method does all the heavy lifting. It runs
<code>apt-cache policy</code> and parses the output looking for the version
number. If we used the <code>:update</code> action, and the installed version
wasn&rsquo;t the same as the candidate version, Chef would install the
candidate version.</p>

<p>Chef resources are convergent. They only get updated if they need to
be. In this case, the <code>vim</code> package is installed already (our
implicitly specified action), so we see the following line:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[2014-07-21T09:04:51-06:00] DEBUG: package[vim] is already installed - nothing to do</span></code></pre></td></tr></table></div></figure>


<p>Nothing to do, Chef finishes its run.</p>

<h2>Modifying Existing Resources</h2>

<p>We can manipulate the state of the resources in the resource
collection. This isn&rsquo;t common in most recipes. It&rsquo;s required for
certain kinds of development patterns like &ldquo;wrapper&rdquo; cookbooks. As an
example, I&rsquo;m going to modify the resource object so I don&rsquo;t have to
log into the system again and run <code>apt-get remove vim</code>, to show the
next section.</p>

<p>First, I&rsquo;m going to create a local variable in the context of the
recipe. This is just like any other variable in Ruby. For its value,
I&rsquo;m going to use the <code>#resources()</code> <a href="http://docs.opscode.com/chef/dsl_recipe.html#resources">method to look up</a> a resource in
the resource collection.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>chef:recipe &gt; local_package_variable = resources("package[vim]")
</span><span class='line'> =&gt; &lt;package[vim] @name: "vim" @noop: nil @before: nil @params: {} @provider: nil @allowed_actions: [:nothing, :install, :upgrade, :remove, :purge, :reconfig] @action: :install @updated: false @updated_by_last_action: false @supports: {} @ignore_failure: false @retries: 0 @retry_delay: 2 @source_line: "(irb#1):1:in `irb_binding'" @guard_interpreter: :default @elapsed_time: 0.029617095 @sensitive: false @candidate_version: nil @options: nil @package_name: "vim" @resource_name: :package @response_file: nil @response_file_variables: {} @source: nil @version: nil @timeout: 900 @cookbook_name: nil @recipe_name: nil&gt;</span></code></pre></td></tr></table></div></figure>


<p>The return value is the package resource object:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>chef:recipe &gt; local_package_variable.class
</span><span class='line'> =&gt; Chef::Resource::Package</span></code></pre></td></tr></table></div></figure>


<p>(<code>#class</code> is a method on the Ruby <code>Object</code> class that returns the
class of the object)</p>

<p>To remove the <code>vim</code> package, I use the <code>#run_action</code> method (available
to all <code>Chef::Resource</code> subclasses), specifying the <code>:remove</code> action
as a symbol:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>chef:recipe &gt; local_package_variable.run_action(:remove)
</span><span class='line'>[2014-07-21T09:11:50-06:00] INFO: Processing package[vim] action remove ((irb#1) line 1)
</span><span class='line'>[2014-07-21T09:11:52-06:00] INFO: package[vim] removed</span></code></pre></td></tr></table></div></figure>


<p>There is no additional debug to display. Chef will run <code>apt-get
remove vim</code> to converge the resource with this action.</p>

<h2>Load Current Resource Redux</h2>

<p>Now that the package has been removed from the system, what happens
if we run Chef again? Well, Chef is convergent, and it takes
idempotent actions on the system to ensure that the managed resources
are in the desired state. That means it will install the <code>vim</code>
package.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>chef:recipe &gt; run_chef
</span><span class='line'>[2014-07-21T09:11:57-06:00] INFO: Processing package[vim] action install ((irb#1) line 1)</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ll see some familiar messages here about the version, then:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[2014-07-21T09:11:57-06:00] DEBUG: package[vim] checking package status for vim
</span><span class='line'>vim:
</span><span class='line'>  Installed: (none)
</span><span class='line'>  Candidate: 2:7.4.335-1
</span><span class='line'>  Version table:
</span><span class='line'>     2:7.4.335-1 0
</span><span class='line'>        500 http://ftp.us.debian.org/debian/ testing/main amd64 Packages
</span><span class='line'>[2014-07-21T09:11:57-06:00] DEBUG: package[vim] current version is nil
</span><span class='line'>[2014-07-21T09:11:57-06:00] DEBUG: package[vim] candidate version is 2:7.4.335-1</span></code></pre></td></tr></table></div></figure>


<p>This is <code>load_current_resource</code> working as expected. As we can see
from the <code>apt-cache policy</code> output, the package is not installed, and
as the action to take is <code>:install</code>, Chef will do what we think:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Reading package lists...
</span><span class='line'>Building dependency tree...
</span><span class='line'>Reading state information...
</span><span class='line'>The following packages were automatically installed and are no longer required:
</span><span class='line'>  g++-4.8 geoclue geoclue-hostip geoclue-localnet geoclue-manual
</span><span class='line'>  geoclue-nominatim gstreamer0.10-plugins-ugly libass4 libblas3gf libcolord1
</span><span class='line'>  libcolorhug1 libgeoclue0 libgnustep-base1.22 libgnutls28 libminiupnpc8
</span><span class='line'>  libpoppler44 libqmi-glib0 libstdc++-4.8-dev python3-ply xulrunner-29
</span><span class='line'>Use 'apt-get autoremove' to remove them.
</span><span class='line'>Suggested packages:
</span><span class='line'>  vim-doc vim-scripts
</span><span class='line'>The following NEW packages will be installed:
</span><span class='line'>  vim
</span><span class='line'>0 upgraded, 1 newly installed, 0 to remove and 28 not upgraded.
</span><span class='line'>Need to get 0 B/905 kB of archives.
</span><span class='line'>After this operation, 2,088 kB of additional disk space will be used.
</span><span class='line'>Selecting previously unselected package vim.
</span><span class='line'>(Reading database ... 220338 files and directories currently installed.)
</span><span class='line'>Preparing to unpack .../vim_2%3a7.4.335-1_amd64.deb ...
</span><span class='line'>Unpacking vim (2:7.4.335-1) ...
</span><span class='line'>Setting up vim (2:7.4.335-1) ...
</span><span class='line'>update-alternatives: using /usr/bin/vim.basic to provide /usr/bin/vim (vim) in auto mode
</span><span class='line'>update-alternatives: using /usr/bin/vim.basic to provide /usr/bin/vimdiff (vimdiff) in auto mode
</span><span class='line'>update-alternatives: using /usr/bin/vim.basic to provide /usr/bin/rvim (rvim) in auto mode
</span><span class='line'>update-alternatives: using /usr/bin/vim.basic to provide /usr/bin/rview (rview) in auto mode
</span><span class='line'>update-alternatives: using /usr/bin/vim.basic to provide /usr/bin/vi (vi) in auto mode
</span><span class='line'>update-alternatives: using /usr/bin/vim.basic to provide /usr/bin/view (view) in auto mode
</span><span class='line'>update-alternatives: using /usr/bin/vim.basic to provide /usr/bin/ex (ex) in auto mode</span></code></pre></td></tr></table></div></figure>


<p>This should be familiar to anyone that uses Debian/Ubuntu, it&rsquo;s
standard <code>apt-get install</code> output. Of course, this is a development
system so I have some cruft, but we&rsquo;ll ignore that ;).</p>

<p>If we run_chef again, we get the output we saw in the original
example in this post:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[2014-07-21T09:50:06-06:00] DEBUG: package[vim] is already installed - nothing to do</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ChefDK and Ruby]]></title>
    <link href="http://jtimberman.housepub.org/blog/2014/04/30/chefdk-and-ruby/"/>
    <updated>2014-04-30T22:32:18-06:00</updated>
    <id>http://jtimberman.housepub.org/blog/2014/04/30/chefdk-and-ruby</id>
    <content type="html"><![CDATA[<p>Recently, Chef <a href="http://www.getchef.com/blog/2014/04/15/chef-development-kit/">released ChefDK</a>, the &ldquo;Chef Development Kit.&rdquo; This is a self-contained package of everything required to run Chef, work with Chef cookbooks, and includes the best of breed community tools, test frameworks, and other utility programs that are commonly used when working with Chef in infrastructure as code. <a href="http://www.getchef.com/blog/2014/04/29/chefdk-0-1-0-released/">ChefDK version 0.1.0 was released last week</a>. A new feature mentioned in the <a href="https://github.com/opscode/chef-dk/blob/master/README.md#using-chefdk-as-your-primary-development-environment">README.md</a> is very important, in my opinion.</p>

<p><strong>Using ChefDK as your primary development environment</strong></p>

<p>What does that mean?</p>

<p>It means that if the only reason you have Ruby installed on your local system is to do Chef development or otherwise work with Chef, <em>you no longer have to maintain a separate Ruby installation</em>. That means you won&rsquo;t need any of these:</p>

<ul>
<li><a href="https://github.com/sstephenson/rbenv">rbenv</a></li>
<li><a href="http://rvm.io">rvm</a></li>
<li><a href="https://github.com/postmodern/chruby">chruby</a> (*note)</li>
<li>&ldquo;system ruby&rdquo; (e.g., OS X&rsquo;s included /usr/bin/ruby, or the <code>ruby</code> package from your Linux distro)</li>
<li><a href="https://github.com/poise/poise-ruby">poise ruby</a>)</li>
</ul>


<p>(*note: You can optionally use chruby with ChefDK if it&rsquo;s part of your workflow and you have other Rubies installed.)</p>

<p>Do not misunderstand me: These are all extremely good solutions for getting and using Ruby on your system. They definitely have their place if you do other Ruby development, such as <a href="http://www.sinatrarb.com/">web applications</a>. This is especially true if you have to work with multiple versions of Ruby. However, if you&rsquo;re like me and mainly use Ruby for Chef, then ChefDK has you covered.</p>

<p>In this post, I will describe how I have set up my system with ChefDK, and use its embedded Ruby by default.</p>

<h2>Getting Started</h2>

<p>Download ChefDK from the <a href="http://www.getchef.com/downloads/chef-dk/">downloads page</a>. At the time of this blog post, the available builds are limited to OS X and Linux (Debian/Ubuntu or RHEL), but Chef is <a href="http://www.getchef.com/blog/2014/05/06/chefdk-for-windows-progress-update/">working on Windows packages</a>.</p>

<p>For example, here&rsquo;s what I did on my Ubuntu 14.04 system:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget https://opscode-omnibus-packages.s3.amazonaws.com/ubuntu/13.10/x86_64/chefdk_0.1.0-1_amd64.deb
</span><span class='line'>sudo dpkg -i /tmp/chefdk_0.1.0-1_amd64.deb</span></code></pre></td></tr></table></div></figure>


<p>OS X users will be happy to know that the download is a .DMG, which includes a standard OS X .pkg (complete with developer signing). Simply install it like many other products on OS X.</p>

<p>For either Linux or OS X, in <a href="https://github.com/opscode/omnibus-ruby/">omnibus</a> fashion, the post-installation creates several symbolic links in <code>/usr/bin</code> for tools that are included in ChefDK:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% ls -l /usr/bin | grep chefdk
</span><span class='line'>lrwxrwxrwx 1 root root 21 Apr 30 22:13 berks -&gt; /opt/chefdk/bin/berks
</span><span class='line'>lrwxrwxrwx 1 root root 20 Apr 30 22:13 chef -&gt; /opt/chefdk/bin/chef
</span><span class='line'>lrwxrwxrwx 1 root root 26 Apr 30 22:13 chef-apply -&gt; /opt/chefdk/bin/chef-apply
</span><span class='line'>lrwxrwxrwx 1 root root 27 Apr 30 22:13 chef-client -&gt; /opt/chefdk/bin/chef-client
</span><span class='line'>lrwxrwxrwx 1 root root 26 Apr 30 22:13 chef-shell -&gt; /opt/chefdk/bin/chef-shell
</span><span class='line'>lrwxrwxrwx 1 root root 25 Apr 30 22:13 chef-solo -&gt; /opt/chefdk/bin/chef-solo
</span><span class='line'>lrwxrwxrwx 1 root root 25 Apr 30 22:13 chef-zero -&gt; /opt/chefdk/bin/chef-zero
</span><span class='line'>lrwxrwxrwx 1 root root 23 Apr 30 22:13 fauxhai -&gt; /opt/chefdk/bin/fauxhai
</span><span class='line'>lrwxrwxrwx 1 root root 26 Apr 30 22:13 foodcritic -&gt; /opt/chefdk/bin/foodcritic
</span><span class='line'>lrwxrwxrwx 1 root root 23 Apr 30 22:13 kitchen -&gt; /opt/chefdk/bin/kitchen
</span><span class='line'>lrwxrwxrwx 1 root root 21 Apr 30 22:13 knife -&gt; /opt/chefdk/bin/knife
</span><span class='line'>lrwxrwxrwx 1 root root 20 Apr 30 22:13 ohai -&gt; /opt/chefdk/bin/ohai
</span><span class='line'>lrwxrwxrwx 1 root root 23 Apr 30 22:13 rubocop -&gt; /opt/chefdk/bin/rubocop
</span><span class='line'>lrwxrwxrwx 1 root root 20 Apr 30 22:13 shef -&gt; /opt/chefdk/bin/shef
</span><span class='line'>lrwxrwxrwx 1 root root 22 Apr 30 22:13 strain -&gt; /opt/chefdk/bin/strain
</span><span class='line'>lrwxrwxrwx 1 root root 24 Apr 30 22:13 strainer -&gt; /opt/chefdk/bin/strainer</span></code></pre></td></tr></table></div></figure>


<p>These should cover the 80% use case of ChefDK: using the various Chef and Chef Community tools so users can follow their favorite workflow, without shaving the yak of managing a Ruby environment.</p>

<p>But, as I noted, and the thesis of this post, is that one could use this Ruby environment included in ChefDK as their own! So where is that?</p>

<h2>ChefDK&rsquo;s Ruby</h2>

<p>Tucked away in every &ldquo;omnibus&rdquo; package is a directory of &ldquo;embedded&rdquo; software &ndash; the things that were required to meet the end goal. In the case of Chef or ChefDK, this is Ruby, openssl, zlib, libpng, and so on. This is a fully contained directory tree, complete with lib, share, and yes indeed, bin.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% ls /opt/chefdk/embedded/bin
</span><span class='line'>(there's a bunch of commands here, trust me)</span></code></pre></td></tr></table></div></figure>


<p>Of particular note are <code>/opt/chefdk/embedded/bin/ruby</code> and <code>/opt/chefdk/embedded/bin/gem</code>.</p>

<p>To use ChefDK&rsquo;s Ruby as default, simply edit the <code>$PATH</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export PATH="/opt/chefdk/embedded/bin:${HOME}/.chefdk/gem/ruby/2.1.0/bin:$PATH"</span></code></pre></td></tr></table></div></figure>


<p>Add that, or its equivalent, to a login shell profile/dotrc file, and rejoice. Here&rsquo;s what I have now:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ which ruby
</span><span class='line'>/opt/chefdk/embedded/bin/ruby
</span><span class='line'>$ which gem
</span><span class='line'>/opt/chefdk/embedded/bin/gem
</span><span class='line'>$ ruby --version
</span><span class='line'>ruby 2.1.1p76 (2014-02-24 revision 45161) [x86_64-linux]
</span><span class='line'>$ gem --version
</span><span class='line'>2.2.1
</span><span class='line'>$ gem env
</span><span class='line'>RubyGems Environment:
</span><span class='line'>  - RUBYGEMS VERSION: 2.2.1
</span><span class='line'>  - RUBY VERSION: 2.1.1 (2014-02-24 patchlevel 76) [x86_64-linux]
</span><span class='line'>  - INSTALLATION DIRECTORY: /opt/chefdk/embedded/lib/ruby/gems/2.1.0
</span><span class='line'>  - RUBY EXECUTABLE: /opt/chefdk/embedded/bin/ruby
</span><span class='line'>  - EXECUTABLE DIRECTORY: /opt/chefdk/embedded/bin
</span><span class='line'>  - SPEC CACHE DIRECTORY: /home/ubuntu/.gem/specs
</span><span class='line'>  - RUBYGEMS PLATFORMS:
</span><span class='line'>    - ruby
</span><span class='line'>    - x86_64-linux
</span><span class='line'>  - GEM PATHS:
</span><span class='line'>     - /opt/chefdk/embedded/lib/ruby/gems/2.1.0
</span><span class='line'>     - /home/ubuntu/.chefdk/gem/ruby/2.1.0
</span><span class='line'>  - GEM CONFIGURATION:
</span><span class='line'>     - :update_sources =&gt; true
</span><span class='line'>     - :verbose =&gt; true
</span><span class='line'>     - :backtrace =&gt; false
</span><span class='line'>     - :bulk_threshold =&gt; 1000
</span><span class='line'>     - "install" =&gt; "--user"
</span><span class='line'>     - "update" =&gt; "--user"
</span><span class='line'>  - REMOTE SOURCES:
</span><span class='line'>     - https://rubygems.org/
</span><span class='line'>  - SHELL PATH:
</span><span class='line'>     - /opt/chefdk/embedded/bin
</span><span class='line'>     - /home/ubuntu/.chefdk/gem/ruby/2.1.0/bin
</span><span class='line'>     - /usr/local/sbin
</span><span class='line'>     - /usr/local/bin
</span><span class='line'>     - /usr/sbin
</span><span class='line'>     - /usr/bin
</span><span class='line'>     - /sbin
</span><span class='line'>     - /bin
</span><span class='line'>     - /usr/games
</span><span class='line'>     - /usr/local/games</span></code></pre></td></tr></table></div></figure>


<p>Note that this is the current stable release of Ruby, version 2.1.1 patchlevel 76, and the {almost} latest version of RubyGems, version 2.2.1. Also note the Gem paths &ndash; the first is the embedded gems path, which is where gems installed by <code>root</code> with the <code>chef gem</code> command will go. The other is in my home directory &ndash; ChefDK is set up so that gems can be installed as a non-root user within the <code>~/.chefdk/gems</code> directory.</p>

<h2>Installing Gems</h2>

<p>Let&rsquo;s see this in action. Install a gem using the <code>gem</code> command.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gem install knife-solve
</span><span class='line'>Fetching: knife-solve-1.0.1.gem (100%)
</span><span class='line'>Successfully installed knife-solve-1.0.1
</span><span class='line'>Parsing documentation for knife-solve-1.0.1
</span><span class='line'>Installing ri documentation for knife-solve-1.0.1
</span><span class='line'>Done installing documentation for knife-solve after 0 seconds
</span><span class='line'>1 gem installed</span></code></pre></td></tr></table></div></figure>


<p>And as I said, this will be installed in the home directory:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gem content knife-solve
</span><span class='line'>/home/ubuntu/.chefdk/gem/ruby/2.1.0/gems/knife-solve-1.0.1/LICENSE
</span><span class='line'>/home/ubuntu/.chefdk/gem/ruby/2.1.0/gems/knife-solve-1.0.1/README.md
</span><span class='line'>/home/ubuntu/.chefdk/gem/ruby/2.1.0/gems/knife-solve-1.0.1/Rakefile
</span><span class='line'>/home/ubuntu/.chefdk/gem/ruby/2.1.0/gems/knife-solve-1.0.1/lib/chef/knife/solve.rb
</span><span class='line'>/home/ubuntu/.chefdk/gem/ruby/2.1.0/gems/knife-solve-1.0.1/lib/knife-solve.rb
</span><span class='line'>/home/ubuntu/.chefdk/gem/ruby/2.1.0/gems/knife-solve-1.0.1/lib/knife-solve/version.rb</span></code></pre></td></tr></table></div></figure>


<h2>Using Bundler</h2>

<p>ChefDK also includes <a href="http://bundler.io/">bundler</a>. As a &ldquo;non-Chef, Ruby use case&rdquo;, I installed octopress for this blog.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% bundle install --path vendor --binstubs
</span><span class='line'>Fetching gem metadata from https://rubygems.org/.......
</span><span class='line'>Fetching additional metadata from https://rubygems.org/..
</span><span class='line'>Installing rake (0.9.6)
</span><span class='line'>Installing RedCloth (4.2.9)
</span><span class='line'>Installing chunky_png (1.2.9)
</span><span class='line'>Installing fast-stemmer (1.0.2)
</span><span class='line'>Installing classifier (1.3.3)
</span><span class='line'>Installing fssm (0.2.10)
</span><span class='line'>Installing sass (3.2.12)
</span><span class='line'>Installing compass (0.12.2)
</span><span class='line'>Installing directory_watcher (1.4.1)
</span><span class='line'>Installing haml (3.1.8)
</span><span class='line'>Installing kramdown (0.14.2)
</span><span class='line'>Installing liquid (2.3.0)
</span><span class='line'>Installing maruku (0.7.0)
</span><span class='line'>Installing posix-spawn (0.3.6)
</span><span class='line'>Installing yajl-ruby (1.1.0)
</span><span class='line'>Installing pygments.rb (0.3.7)
</span><span class='line'>Installing jekyll (0.12.1)
</span><span class='line'>Installing rack (1.5.2)
</span><span class='line'>Installing rack-protection (1.5.0)
</span><span class='line'>Installing rb-fsevent (0.9.3)
</span><span class='line'>Installing rdiscount (2.0.7.3)
</span><span class='line'>Installing rubypants (0.2.0)
</span><span class='line'>Installing sass-globbing (1.0.0)
</span><span class='line'>Installing tilt (1.4.1)
</span><span class='line'>Installing sinatra (1.4.3)
</span><span class='line'>Installing stringex (1.4.0)
</span><span class='line'>Using bundler (1.5.2)
</span><span class='line'>Updating files in vendor/cache
</span><span class='line'>  * classifier-1.3.3.gem
</span><span class='line'>  * fssm-0.2.10.gem
</span><span class='line'>  * sass-3.2.12.gem
</span><span class='line'>  * compass-0.12.2.gem
</span><span class='line'>  * directory_watcher-1.4.1.gem
</span><span class='line'>  * haml-3.1.8.gem
</span><span class='line'>  * kramdown-0.14.2.gem
</span><span class='line'>  * liquid-2.3.0.gem
</span><span class='line'>  * maruku-0.7.0.gem
</span><span class='line'>  * posix-spawn-0.3.6.gem
</span><span class='line'>  * yajl-ruby-1.1.0.gem
</span><span class='line'>  * pygments.rb-0.3.7.gem
</span><span class='line'>  * jekyll-0.12.1.gem
</span><span class='line'>  * rack-1.5.2.gem
</span><span class='line'>  * rack-protection-1.5.0.gem
</span><span class='line'>  * rb-fsevent-0.9.3.gem
</span><span class='line'>  * rdiscount-2.0.7.3.gem
</span><span class='line'>  * rubypants-0.2.0.gem
</span><span class='line'>  * sass-globbing-1.0.0.gem
</span><span class='line'>  * tilt-1.4.1.gem
</span><span class='line'>  * sinatra-1.4.3.gem
</span><span class='line'>  * stringex-1.4.0.gem
</span><span class='line'>Your bundle is complete!
</span><span class='line'>It was installed into ./vendor</span></code></pre></td></tr></table></div></figure>


<p>Then I can use for example the rake task to preview things while writing this post.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ./bin/rake preview
</span><span class='line'>Starting to watch source with Jekyll and Compass. Starting Rack on port 4000
</span><span class='line'>directory source/stylesheets/
</span><span class='line'>   create source/stylesheets/screen.css
</span><span class='line'>[2014-05-07 21:46:35] INFO  WEBrick 1.3.1
</span><span class='line'>[2014-05-07 21:46:35] INFO  ruby 2.1.1 (2014-02-24) [x86_64-linux]
</span><span class='line'>[2014-05-07 21:46:35] INFO  WEBrick::HTTPServer#start: pid=10815 port=4000</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>I&rsquo;ve used Chef before it was even released. As the project has evolved, and as the Ruby community around it has established new best practices installing and maintaining Ruby development environments, I&rsquo;ve followed along. I&rsquo;ve used all the version managers listed above. I&rsquo;ve spent untold hours getting the right set of gems installed just to have to upgrade everything again and debug my workstation. I&rsquo;ve written blog posts, <a href="http://wiki.opscode.com">wiki</a> pages, and helped countless users do this on their own systems.</p>

<p>Now, we have an all-in-one environment that provides a great solution. Give ChefDK a whirl on your workstation &ndash; I think you&rsquo;ll like it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Evolution of Cookbook Development]]></title>
    <link href="http://jtimberman.housepub.org/blog/2014/02/01/evolution-of-cookbook-development/"/>
    <updated>2014-02-01T12:48:49-07:00</updated>
    <id>http://jtimberman.housepub.org/blog/2014/02/01/evolution-of-cookbook-development</id>
    <content type="html"><![CDATA[<p>In this post, I will explore some development patterns that I&rsquo;ve seen
(and done!) with Chef cookbooks, and then explain how we can evolve to
a new level of cookbook development. The examples here come from
Chef&rsquo;s new
<a href="http://www.getchef.com/blog/2014/01/28/chefs-splunk-cookbook-2/">chef-splunk cookbook</a>,
which is a refactored version of an old <code>splunk42</code> cookbook. While
there is a public <code>splunk</code> cookbook on the Chef community site, it
shares some of the issues that I saw with our old one, which are
partially subject matter of this post.</p>

<p>Anyway, on to the evolution!</p>

<h1>Sub-optimal patterns</h1>

<p>These are the general patterns I&rsquo;m going to address.</p>

<ul>
<li>Composing URLs from multiple local variables or attributes</li>
<li>Large conditional logic branches like case statements in recipes</li>
<li>Not using definitions when it is best to do so</li>
<li>Knowledge of how node run lists are composed for search, or
searching for &ldquo;<code>role:some-server</code>&rdquo;</li>
<li>Repeated resources across multiple orthogonal recipes</li>
<li>Plaintext secrets in attributes or data bag items</li>
</ul>


<p>Cookbook development is a wide and varied topic, so there are many
other patterns to consider, but these are the ones most relevant to
the refactored cookbook.</p>

<h2>Composing URLs</h2>

<p>It may seem like a good idea, to compose URL strings as attributes or
local variables in a recipe based on other attributes and local
variables. For example, in our <code>splunk42</code> cookbook we have this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">splunk_root</span> <span class="o">=</span> <span class="s2">&quot;http://download.splunk.com/releases/&quot;</span>
</span><span class='line'><span class="n">splunk_version</span> <span class="o">=</span> <span class="s2">&quot;4.2.1&quot;</span>
</span><span class='line'><span class="n">splunk_build</span> <span class="o">=</span> <span class="s2">&quot;98164&quot;</span>
</span><span class='line'><span class="n">splunk_file</span> <span class="o">=</span> <span class="s2">&quot;splunkforwarder-</span><span class="si">#{</span><span class="n">splunk_version</span><span class="si">}</span><span class="s2">-</span><span class="si">#{</span><span class="n">splunk_build</span><span class="si">}</span><span class="s2">-linux-2.6-amd64.deb&quot;</span>
</span><span class='line'><span class="n">os</span> <span class="o">=</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;os&#39;</span><span class="o">].</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/\d*/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>These get used in the following <code>remote_file</code> resource:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">remote_file</span> <span class="s2">&quot;/opt/</span><span class="si">#{</span><span class="n">splunk_file</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">splunk_root</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">splunk_version</span><span class="si">}</span><span class="s2">/universalforwarder/</span><span class="si">#{</span><span class="n">os</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">splunk_file</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="n">action</span> <span class="ss">:create_if_missing</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We reused the filename variable, and composed the URL to the file to
download. Then to upgrade, we can simply modify the <code>splunk_version</code>
and <code>splunk_build</code>, as Splunk uses a consistent naming theme for their
package URLs (thanks, Splunk!). The filename itself is built from a
case statement (more on that in the next section). We could further
make the version and build attributes, so users can update to newer
versions by simply changing the attribute.</p>

<p>So what is bad about this? Two things.</p>

<ol>
<li>This is in the <code>splunk42::client</code> recipe, and repeated again in the
<code>splunk42::server</code> recipe with only minor differences (the package
name, splunk vs splunkforwarder).</li>
<li>Ruby has excellent libraries for manipulating URIs and paths as
strings, and it is easier to break up a string than compose a new one.</li>
</ol>


<p>How can this be improved? First, we can set attributes for the full URL.
The actual code for that is below, but suffice to say, it will look
like this (note the version is different because the new cookbook installs
a new Splunk version).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">default</span><span class="o">[</span><span class="s1">&#39;splunk&#39;</span><span class="o">][</span><span class="s1">&#39;forwarder&#39;</span><span class="o">][</span><span class="s1">&#39;url&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;http://download.splunk.com/releases/6.0.1/universalforwarder/linux/splunkforwarder-6.0.1-189883-linux-2.6-amd64.deb&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Second, we have
<a href="https://github.com/opscode-cookbooks/chef-splunk/blob/master/libraries/helpers.rb">helper libraries</a>
distributed with the cookbook that break up the URI so we can return
just the package filename.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">splunk_file</span><span class="p">(</span><span class="n">uri</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;pathname&#39;</span>
</span><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;uri&#39;</span>
</span><span class='line'>  <span class="no">Pathname</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">URI</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">uri</span><span class="p">)</span><span class="o">.</span><span class="n">path</span><span class="p">)</span><span class="o">.</span><span class="n">basename</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The previous <code>remote_file</code> resource is rewritten like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">remote_file</span> <span class="s2">&quot;/opt/</span><span class="si">#{</span><span class="n">splunk_file</span><span class="p">(</span><span class="n">node</span><span class="o">[</span><span class="s1">&#39;splunk&#39;</span><span class="o">][</span><span class="s1">&#39;forwarder&#39;</span><span class="o">][</span><span class="s1">&#39;url&#39;</span><span class="o">]</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;splunk&#39;</span><span class="o">][</span><span class="s1">&#39;forwarder&#39;</span><span class="o">][</span><span class="s1">&#39;url&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">action</span> <span class="ss">:create_if_missing</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>As a bonus, the helper methods are available in other places like
other cookbooks and recipes, rather than the local scope of local
variables.</p>

<h2>Conditional Logic Branches</h2>

<p>One of the wonderful things about Chef is that simple Ruby
conditionals can be used in recipes to selectively set values for
resource attributes, define resources that should be used, and other
decisions. One of the horrible things about Chef is that simple Ruby
conditionals can be used in recipes and often end up being far more
complicated than originally intended, especially when handling
multiple platforms and versions.</p>

<p>In the earlier example, we had a <code>splunk_file</code> local variable set in a
recipe. I mentioned it was built from a case statement, which looks
like this, in full:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">splunk_file</span> <span class="o">=</span> <span class="k">case</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;platform_family&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;rhel&quot;</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;kernel&#39;</span><span class="o">][</span><span class="s1">&#39;machine&#39;</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;x86_64&quot;</span>
</span><span class='line'>      <span class="n">splunk_file</span> <span class="o">=</span> <span class="s2">&quot;splunkforwarder-</span><span class="si">#{</span><span class="n">splunk_version</span><span class="si">}</span><span class="s2">-</span><span class="si">#{</span><span class="n">splunk_build</span><span class="si">}</span><span class="s2">-linux-2.6-x86_64.rpm&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">splunk_file</span> <span class="o">=</span> <span class="s2">&quot;splunkforwarder-</span><span class="si">#{</span><span class="n">splunk_version</span><span class="si">}</span><span class="s2">-</span><span class="si">#{</span><span class="n">splunk_build</span><span class="si">}</span><span class="s2">.i386.rpm&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;debian&quot;</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;kernel&#39;</span><span class="o">][</span><span class="s1">&#39;machine&#39;</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;x86_64&quot;</span>
</span><span class='line'>      <span class="n">splunk_file</span> <span class="o">=</span> <span class="s2">&quot;splunkforwarder-</span><span class="si">#{</span><span class="n">splunk_version</span><span class="si">}</span><span class="s2">-</span><span class="si">#{</span><span class="n">splunk_build</span><span class="si">}</span><span class="s2">-linux-2.6-amd64.deb&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">splunk_file</span> <span class="o">=</span> <span class="s2">&quot;splunkforwarder-</span><span class="si">#{</span><span class="n">splunk_version</span><span class="si">}</span><span class="s2">-</span><span class="si">#{</span><span class="n">splunk_build</span><span class="si">}</span><span class="s2">-linux-2.6-intel.deb&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;omnios&quot;</span>
</span><span class='line'>    <span class="n">splunk_file</span> <span class="o">=</span> <span class="s2">&quot;splunkforwarder-</span><span class="si">#{</span><span class="n">splunk_version</span><span class="si">}</span><span class="s2">-</span><span class="si">#{</span><span class="n">splunk_build</span><span class="si">}</span><span class="s2">-solaris-10-intel.pkg.Z&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Splunk itself supports many platforms, and not all of them are covered
by this conditional, so it&rsquo;s easy to imagine how this can get further
out of control and make the recipe even harder to follow. Also
consider that this is just the <code>client</code> portion for the
<code>splunkforwarder</code> package, this same block is repeated in the <code>server</code>
recipe, for the <code>splunk</code> package.</p>

<p>So why is this bad? There are three reasons.</p>

<ol>
<li>We have a large block of conditionals that sit in front of a user
reading a recipe.</li>
<li>This logic isn&rsquo;t reusable elsewhere, so it has to be duplicated in
the other recipe.</li>
<li>This is only the logic for the package filename, but we care about
the entire URL. I&rsquo;ve also covered that composing URLs isn&rsquo;t delightful.</li>
</ol>


<p>What is a better approach? Use the full URL as I mentioned before, and
set it as an attribute. We will still have the gnarly case statement,
but it will be tucked away in the <code>attributes/default.rb</code> file, and
hidden from anyone reading the recipe (which is the thing they
probably care most about reading).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">case</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;platform_family&#39;</span><span class="o">]</span>
</span><span class='line'><span class="k">when</span> <span class="s1">&#39;rhel&#39;</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;kernel&#39;</span><span class="o">][</span><span class="s1">&#39;machine&#39;</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39;x86_64&#39;</span>
</span><span class='line'>    <span class="n">default</span><span class="o">[</span><span class="s1">&#39;splunk&#39;</span><span class="o">][</span><span class="s1">&#39;forwarder&#39;</span><span class="o">][</span><span class="s1">&#39;url&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;http://download.splunk.com/releases/6.0.1/universalforwarder/linux/splunkforwarder-6.0.1-189883-linux-2.6-x86_64.rpm&#39;</span>
</span><span class='line'>    <span class="n">default</span><span class="o">[</span><span class="s1">&#39;splunk&#39;</span><span class="o">][</span><span class="s1">&#39;server&#39;</span><span class="o">][</span><span class="s1">&#39;url&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;http://download.splunk.com/releases/6.0.1/splunk/linux/splunk-6.0.1-189883-linux-2.6-x86_64.rpm&#39;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">default</span><span class="o">[</span><span class="s1">&#39;splunk&#39;</span><span class="o">][</span><span class="s1">&#39;forwarder&#39;</span><span class="o">][</span><span class="s1">&#39;url&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;http://download.splunk.com/releases/6.0.1/universalforwarder/linux/splunkforwarder-6.0.1-189883.i386.rpm&#39;</span>
</span><span class='line'>    <span class="n">default</span><span class="o">[</span><span class="s1">&#39;splunk&#39;</span><span class="o">][</span><span class="s1">&#39;server&#39;</span><span class="o">][</span><span class="s1">&#39;url&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;http://download.splunk.com/releases/6.0.1/splunk/linux/splunk-6.0.1-189883.i386.rpm&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">when</span> <span class="s1">&#39;debian&#39;</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>The the complete case block can be viewed in the
<a href="https://github.com/opscode-cookbooks/chef-splunk/blob/master/attributes/default.rb#L46-L66">repository</a>.
Also, since this is an attribute, consumers of this cookbook can set
the URL to whatever they want, including a local HTTP server.</p>

<p>Another example of gnarly conditional logic looks like this, also from
the <code>splunk42::client</code> recipe.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">case</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;platform_family&#39;</span><span class="o">]</span>
</span><span class='line'><span class="k">when</span> <span class="s2">&quot;rhel&quot;</span>
</span><span class='line'>  <span class="n">rpm_package</span> <span class="s2">&quot;/opt/</span><span class="si">#{</span><span class="n">splunk_file</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">source</span> <span class="s2">&quot;/opt/</span><span class="si">#{</span><span class="n">splunk_file</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">when</span> <span class="s2">&quot;debian&quot;</span>
</span><span class='line'>  <span class="n">dpkg_package</span> <span class="s2">&quot;/opt/</span><span class="si">#{</span><span class="n">splunk_file</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">source</span> <span class="s2">&quot;/opt/</span><span class="si">#{</span><span class="n">splunk_file</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">when</span> <span class="s2">&quot;omnios&quot;</span>
</span><span class='line'>  <span class="c1"># tl;dr, this was more lines than you want to read, and</span>
</span><span class='line'>  <span class="c1"># will be covered in the next section.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Why is this bad? After all, we&rsquo;re selecting the proper package
resource to install from a local file on disk. The main issue is the
conditional creates different resources that can&rsquo;t be looked up in the
resource collection. Our recipe doesn&rsquo;t do this, but perhaps a wrapper
cookbook would. The consumer wrapping the cookbook has to duplicate
this logic in their own. Instead, it is better to select the provider
for a single <code>package</code> resource.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">package</span> <span class="s2">&quot;/opt/</span><span class="si">#{</span><span class="n">splunk_file</span><span class="p">(</span><span class="n">node</span><span class="o">[</span><span class="s1">&#39;splunk&#39;</span><span class="o">][</span><span class="s1">&#39;forwarder&#39;</span><span class="o">][</span><span class="s1">&#39;url&#39;</span><span class="o">]</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;platform_family&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="k">when</span> <span class="s1">&#39;rhel&#39;</span>
</span><span class='line'>    <span class="n">provider</span> <span class="ss">Chef</span><span class="p">:</span><span class="ss">:Provider</span><span class="o">::</span><span class="ss">Package</span><span class="p">:</span><span class="ss">:Rpm</span>
</span><span class='line'>  <span class="k">when</span> <span class="s1">&#39;debian&#39;</span>
</span><span class='line'>    <span class="n">provider</span> <span class="ss">Chef</span><span class="p">:</span><span class="ss">:Provider</span><span class="o">::</span><span class="ss">Package</span><span class="p">:</span><span class="ss">:Dpkg</span>
</span><span class='line'>  <span class="k">when</span> <span class="s1">&#39;omnios&#39;</span>
</span><span class='line'>    <span class="n">provider</span> <span class="ss">Chef</span><span class="p">:</span><span class="ss">:Provider</span><span class="o">::</span><span class="ss">Package</span><span class="p">:</span><span class="ss">:Solaris</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Definitions Aren&rsquo;t Bad</h2>

<p>Definitions are simply defined as recipe &ldquo;macros.&rdquo; They are not
actually Chef Resources themselves, they just look like them, and
contain their own Chef resources. This has some disadvantages, such as
lack of metaparameters (like action), which has lead people to prefer
using the &ldquo;Lightweight Resource/Provider&rdquo; (LWRP) DSL instead. In fact,
some feel that definitions are bad, and that one should feel bad for
using them. I argue that they have their place. One advantage is their
relative simplicity.</p>

<p>In our <code>splunk42</code> cookbook, the client and server recipes duplicate a
lot of logic. As mentioned a lot of this is case statements for the
Splunk package file. They also repeat the same logic for choosing the
provider to install the package. I snipped the content from the <code>when
"omnios"</code> block, but it looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cache_dir</span> <span class="o">=</span> <span class="ss">Chef</span><span class="p">:</span><span class="ss">:Config</span><span class="o">[</span><span class="ss">:file_cache_path</span><span class="o">]</span>
</span><span class='line'><span class="n">splunk_pkg</span> <span class="o">=</span> <span class="n">splunk_file</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/\.Z/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">execute</span> <span class="s2">&quot;uncompress /opt/</span><span class="si">#{</span><span class="n">splunk_file</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">not_if</span> <span class="p">{</span> <span class="o">::</span><span class="no">File</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="n">splunk_cmd</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">cookbook_file</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">cache_dir</span><span class="si">}</span><span class="s2">/splunk-nocheck&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="s2">&quot;splunk-nocheck&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">file</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">cache_dir</span><span class="si">}</span><span class="s2">/splunkforwarder-response&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">content</span> <span class="s2">&quot;BASEDIR=/opt&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">pkgopts</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;-a </span><span class="si">#{</span><span class="n">cache_dir</span><span class="si">}</span><span class="s2">/splunk-nocheck&quot;</span><span class="p">,</span>
</span><span class='line'>           <span class="s2">&quot;-r </span><span class="si">#{</span><span class="n">cache_dir</span><span class="si">}</span><span class="s2">/splunkforwarder-response&quot;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">package</span> <span class="s2">&quot;splunkforwarder&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="s2">&quot;/opt/</span><span class="si">#{</span><span class="n">splunk_pkg</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="n">options</span> <span class="n">pkgopts</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">provider</span> <span class="ss">Chef</span><span class="p">:</span><span class="ss">:Provider</span><span class="o">::</span><span class="ss">Package</span><span class="p">:</span><span class="ss">:Solaris</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>(Note: the logic for setting the provider is required since we&rsquo;re not using the default over-the-network package providers, and installing from a local file on the system.)</p>

<p>This isn&rsquo;t <em>too</em> bad on its own, but needs to be repeated again in the
server recipe if one wanted to run a Splunk server on OmniOS. The
actual differences between the client and server package installation
are the package name, <code>splunkforwarder</code> vs <code>splunk</code>. The earlier URL
attribute example established a <code>forwarder</code> and <code>server</code> attribute.
Using a definition, named <code>splunk_installer</code>, allows us to simplify
the package installation used by the client and server recipes to look
like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">splunk_installer</span> <span class="s1">&#39;splunkforwarder&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">url</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;splunk&#39;</span><span class="o">][</span><span class="s1">&#39;forwarder&#39;</span><span class="o">][</span><span class="s1">&#39;url&#39;</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">splunk_installer</span> <span class="s1">&#39;splunk&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">url</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;splunk&#39;</span><span class="o">][</span><span class="s1">&#39;server&#39;</span><span class="o">][</span><span class="s1">&#39;url&#39;</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>How is this better than an LWRP? Simply that there was less ceremony
in creating it. There is less cognitive load for a cookbook developer
to worry about. Definitions by their very nature of containing
resources are already idempotent and convergent with no additional
effort. They also automatically support why-run mode, whereas in an
LWRP that must be done by the developer. Finally, between resources in
the definition and the rest of the Chef run, notifications may be
sent.</p>

<p>Contrast this to an LWRP, we need <code>resources</code> and <code>providers</code>
directories, and the attributes of the resource need to be defined in
the resource. Then the action methods need to be written in the
provider. If we&rsquo;re using inline resources (which we are) we need to
declare those so any notifications work. Finally, we should ensure
that why-run works properly.</p>

<p>The actual definition is ~40 lines, and can be viewed in the cookbook
<a href="https://github.com/opscode-cookbooks/chef-splunk/blob/master/definitions/splunk_installer.rb">repository</a>.
I don&rsquo;t have a comparable LWRP for this, but suffice to say that it
would be longer and more complicated than the definition.</p>

<h2>Reasonability About Search</h2>

<p>Search is one of the killer features of running a Chef Server.
Dynamically configuring load balancer configuration, or finding the
master database server is simple with a search. Because we often think
about the functionality a service provides based on the role it
serves, we end up doing searches that look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">splunk_servers</span> <span class="o">=</span> <span class="n">search</span><span class="p">(</span><span class="ss">:node</span><span class="p">,</span> <span class="s2">&quot;role:splunk-server&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we do something with <code>splunk_servers</code>, like send it to a
template. What if someone doesn&rsquo;t like the <a href="http://bikeshed.io">role name</a>?
Then we have to do something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">splunk_servers</span> <span class="o">=</span> <span class="n">search</span><span class="p">(</span><span class="ss">:node</span><span class="p">,</span> <span class="s2">&quot;role:</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="s1">&#39;splunk&#39;</span><span class="o">][</span><span class="s1">&#39;server_role&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then consumers of the cookbook can use whatever server role name they
want, and just update the attribute for it. But, the internet has said
that roles are bad, so we shouldn&rsquo;t use them (even though they
aren&rsquo;t ;)). So instead, we need something like one of these queries:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">splunk_servers</span> <span class="o">=</span> <span class="n">search</span><span class="p">(</span><span class="ss">:node</span><span class="p">,</span> <span class="s2">&quot;recipes:splunk42\:\:server&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#or</span>
</span><span class='line'><span class="n">splunk_servers</span> <span class="o">=</span> <span class="n">search</span><span class="p">(</span><span class="ss">:node</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="s1">&#39;splunk&#39;</span><span class="o">][</span><span class="s1">&#39;server_search_query&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The problem with the first is similar to the problem with the first
(<code>role:splunk-server</code>), we need knowledge about the run list in order
to search properly. The problem with the second is that we now have to
worry about constructing a query properly as a string that gets
interpolated correctly.</p>

<p>How can we improve this? I think it is more &ldquo;Chef-like&rdquo; to use an
attribute on the server&rsquo;s node object itself that informs queries the
intention that the node is in fact a Splunk server. In our
<code>chef-splunk</code> cookbook, we use <code>node['splunk']['is_server']</code>. The
query looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">splunk_servers</span> <span class="o">=</span> <span class="n">search</span><span class="p">(</span><span class="ss">:node</span><span class="p">,</span> <span class="s2">&quot;splunk_is_server:true&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This reads clearly, and the <code>is_server</code> attribute can be set in one of
15 places (for good or bad, but that&rsquo;s a different post).</p>

<h2>Repeating Resources, Composable Recipes</h2>

<p>In the past, it was deemed okay to repeat resources across recipes
when those recipes were not included on the same node. For example,
client and server recipes that have similar resource requirements, but
may pass in separate data. Another example is in the
<a href="http://community.opscode.com/cookbooks/haproxy">haproxy</a>) cookbook I
wrote where one recipe statically manages the configuration files, and
the other uses a Chef search to populate the configuration.</p>

<p>As I have mentioned above, a lot of code was duplicated between the
client and server recipes for our <code>splunk42</code> cookbook: user and group,
the case statements, package resources, execute statements (that
haven&rsquo;t been shared here), and the service resource. It is definitely
important to ensure that all the resources needed to converge a recipe
are defined, particularly when using notifications. That is why
sometimes a recipe will have a <code>service</code> resource with no actions like
this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">service</span> <span class="s1">&#39;mything&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>However Chef 11will generate a warning about
<a href="http://tickets.opscode.com/browse/CHEF-3694">cloned resources</a> when
they are repeated in the same Chef run.</p>

<p>Why is this bad? Well, CHEF-3694 explains in more detail that
particular issue, of cloned resources. The other reason is that it
makes recipes harder to reuse when they have a larger scope than
absolutely necessary. How can we make this better? A solution to this
is to write small, composable recipes that contain resources that may
be optional for certain use cases. For example, we can put the service
resource in a recipe and include that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">service</span> <span class="s1">&#39;splunk&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">supports</span> <span class="ss">:status</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">:restart</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">provider</span> <span class="ss">Chef</span><span class="p">:</span><span class="ss">:Provider</span><span class="o">::</span><span class="ss">Service</span><span class="p">:</span><span class="ss">:Init</span>
</span><span class='line'>  <span class="n">action</span> <span class="ss">:start</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then when we need to make sure we have the <code>service</code> resource
available (e.g., for notifications):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">template</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">splunk_dir</span><span class="si">}</span><span class="s2">/etc/system/local/outputs.conf&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="s1">&#39;outputs.conf.erb&#39;</span>
</span><span class='line'>  <span class="n">mode</span> <span class="mo">0644</span>
</span><span class='line'>  <span class="n">variables</span> <span class="ss">:splunk_servers</span> <span class="o">=&gt;</span> <span class="n">splunk_servers</span>
</span><span class='line'>  <span class="n">notifies</span> <span class="ss">:restart</span><span class="p">,</span> <span class="s1">&#39;service[splunk]&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">include_recipe</span> <span class="s1">&#39;chef-splunk::service&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that the service is included <em>after</em> the resource that notifies
it. This is a feature of the notification system, where the notified
resource can appear anywhere in the resource collection, and brings up
another excellent practice, which is to declare service resources
after other resources which affect their configuration. This prevents
a race condition where, if a bad config is deployed, the service would
attempt to start, fail, and cause the Chef run to exit before the
config file could correct the problem.</p>

<p>Making recipes composable in this way means that users can pick and
choose the ones they want. Our <code>chef-splunk</code> cookbook has a
prescriptive default recipe, but the client and server recipes mainly
include the others they need. If someone doesn&rsquo;t share our opinion on
this for their use case, they can pick and choose the ones they want.
Perhaps they have the <code>splunk</code> user and group created on systems
through some other means. They won&rsquo;t need the <code>chef-splunk::user</code>
recipe, and can write their own wrapper to handle that. Overall this
is good, though it does mean there are multiple places where a user
must look to follow a recipe.</p>

<h2>Plaintext Secrets</h2>

<p>Managing secrets is one of the hardest problems to solve in system
administration and configuration management. In Chef, it is very easy
to simply set attributes, or use data bag items for authentication
credentials. Our old <code>splunk42</code> cookbook had this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">splunk_password</span> <span class="o">=</span> <span class="n">node</span><span class="o">[</span><span class="ss">:splunk</span><span class="o">][</span><span class="ss">:auth</span><span class="o">].</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;:&#39;</span><span class="p">)</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Where <code>node[:splunk][:auth]</code> was set in a role with the
<code>username:password</code>. This isn&rsquo;t particularly <em>bad</em> since our Chef
server runs on a private network and is secured with HTTPS and RSA
keys, but a defense in depth security posture has more controls in
place for secrets.</p>

<p>How can this be improved? At Chef, we started using
<a href="https://github.com/Nordstrom/chef-vault">Chef Vault</a> to manage
secrets. I wrote a
<a href="http://www.getchef.com/blog/2013/09/19/managing-secrets-with-chef-vault/">post about chef-vault</a>
a few months ago, so I won&rsquo;t dig too deep into the details here. The
current <code>chef-splunk</code> cookbook loads the authentication information
like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">splunk_auth_info</span> <span class="o">=</span> <span class="n">chef_vault_item</span><span class="p">(</span><span class="ss">:vault</span><span class="p">,</span> <span class="s2">&quot;splunk_</span><span class="si">#{</span><span class="n">node</span><span class="o">.</span><span class="n">chef_environment</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span><span class="o">[</span><span class="s1">&#39;auth&#39;</span><span class="o">]</span>
</span><span class='line'><span class="n">user</span><span class="p">,</span> <span class="n">pw</span> <span class="o">=</span> <span class="n">splunk_auth_info</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;:&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">execute</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">splunk_cmd</span><span class="si">}</span><span class="s2"> edit user </span><span class="si">#{</span><span class="n">user</span><span class="si">}</span><span class="s2"> -password &#39;</span><span class="si">#{</span><span class="n">pw</span><span class="si">}</span><span class="s2">&#39; -role admin -auth admin:changeme&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">not_if</span> <span class="p">{</span> <span class="o">::</span><span class="no">File</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">splunk_dir</span><span class="si">}</span><span class="s2">/etc/.setup_</span><span class="si">#{</span><span class="n">user</span><span class="si">}</span><span class="s2">_password&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">file</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">splunk_dir</span><span class="si">}</span><span class="s2">/etc/.setup_</span><span class="si">#{</span><span class="n">user</span><span class="si">}</span><span class="s2">_password&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">content</span> <span class="s1">&#39;true\n&#39;</span>
</span><span class='line'>  <span class="n">owner</span> <span class="s1">&#39;root&#39;</span>
</span><span class='line'>  <span class="n">group</span> <span class="s1">&#39;root&#39;</span>
</span><span class='line'>  <span class="n">mode</span> <span class="mo">00600</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first line loads the authentication information from the
encrypted-with-chef-vault data bag item. Then we make a couple of
convenient local variables, and change the password from Splunk&rsquo;s
built-in default. Then, we control convergence of the execute by
writing a file that indicates that the password has been set.</p>

<p>The advantage of this over attributes or data bag items is that the
content is encrypted. The advantage over regular encrypted data bags
is that we don&rsquo;t need to distribute the secret key out to every
system, we can update the list of nodes that have access with a knife
command.</p>

<h1>Conclusion</h1>

<p>Neither Chef (the company), nor I are here to tell anyone how to
write cookbooks. One of the benefits of Chef (the product) is its
flexibility, allowing users to write blocks of Ruby code in recipes
that quickly solve an immediate problem. That&rsquo;s how we got to where we
were with <code>splunk42</code>, and we certainly have other cookbooks that can
be refactored similarly. When it comes to sharing cookbooks with the
community, well-factored, easy to follow, understand, and use code is
preferred.</p>

<p>Many of the ideas here came from community members like Miah Johnson,
Noah Kantrowitz, Jamie Winsor, and Mike Fiedler. I owe them thanks for
challenging me over the years on a lot of the older patterns that I
held onto. Together we can build better automation through cookbooks,
and a strong collaborative community. I hope this information is
helpful to those goals.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing Multiple AWS Account Credentials]]></title>
    <link href="http://jtimberman.housepub.org/blog/2013/10/19/managing-multiple-aws-account-credentials/"/>
    <updated>2013-10-19T17:55:00-06:00</updated>
    <id>http://jtimberman.housepub.org/blog/2013/10/19/managing-multiple-aws-account-credentials</id>
    <content type="html"><![CDATA[<p><strong>UPDATE</strong>: All non-default profiles must have their profile name
  start with &ldquo;profile.&rdquo; Below, this is &ldquo;profile nondefault.&rdquo; The ruby
  code is updated to reflect this.</p>

<p>In this post, I will describe my local setup for using the
<a href="http://aws.amazon.com/cli/">AWS CLI</a>, the
<a href="http://aws.amazon.com/sdkforruby/">AWS Ruby SDK</a>, and of course the
<a href="http://rubygems.org/gems/knife-ec2">Knife EC2 plugin</a>.</p>

<p>The general practice I&rsquo;ve used is to set the appropriate shell
environment variables that are used by default by these tools (and the
&ldquo;legacy&rdquo; ec2-api-tools, the java-based CLI). Over time and between
tools, there have been several environment variables set:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>AWS_ACCESS_KEY_ID
</span><span class='line'>AWS_SECRET_ACCESS_KEY
</span><span class='line'>AWS_DEFAULT_REGION
</span><span class='line'>AWS_SSH_KEY
</span><span class='line'>AMAZON_ACCESS_KEY_ID
</span><span class='line'>AMAZON_SECRET_ACCESS_KEY
</span><span class='line'>AWS_ACCESS_KEY
</span><span class='line'>AWS_SECRET_KEY
</span></code></pre></td></tr></table></div></figure>


<p>There is now a config file (ini-flavored) that can be used to set
credentials, <code>~/.aws/config</code>. Each ini section in this file is a
different account&rsquo;s credentials. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>default<span class="o">]</span>
</span><span class='line'><span class="nv">aws_access_key_id</span><span class="o">=</span>MY_DEFAULT_KEY
</span><span class='line'><span class="nv">aws_secret_access_key</span><span class="o">=</span>MY_DEFAULT_SECRET
</span><span class='line'><span class="nv">region</span><span class="o">=</span>us-east-1
</span><span class='line'><span class="o">[</span>profile nondefault<span class="o">]</span>
</span><span class='line'><span class="nv">aws_access_key_id</span><span class="o">=</span>NOT_MY_DEFAULT_KEY
</span><span class='line'><span class="nv">aws_secret_access_key</span><span class="o">=</span>NOT_MY_DEFAULT_SECRET
</span><span class='line'><span class="nv">region</span><span class="o">=</span>us-east-1
</span></code></pre></td></tr></table></div></figure>


<p>I have two accounts listed here. Obviously, the actual keys are not
listed :). I source a shell script that sets the environment variables
with these values. Before, I maintained a separate script for each
account. Now, I install the <code>inifile</code>
<a href="http://rubygems.org/gems/inifile">RubyGem</a> and use a one-liner for
each of the keys.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">export </span><span class="nv">AWS_ACCESS_KEY_ID</span><span class="o">=</span><span class="sb">`</span>ruby -rinifile -e <span class="s2">&quot;puts IniFile.load(File.join(File.expand_path(&#39;~&#39;), &#39;.aws&#39;, &#39;config&#39;))[&#39;default&#39;][&#39;aws_access_key_id&#39;]&quot;</span><span class="sb">`</span>
</span><span class='line'><span class="nb">export </span><span class="nv">AWS_SECRET_ACCESS_KEY</span><span class="o">=</span><span class="sb">`</span>ruby -rinifile -e <span class="s2">&quot;puts IniFile.load(File.join(File.expand_path(&#39;~&#39;), &#39;.aws&#39;, &#39;config&#39;))[&#39;default&#39;][&#39;aws_secret_access_key&#39;]&quot;</span><span class="sb">`</span>
</span><span class='line'><span class="nb">export </span><span class="nv">AWS_DEFAULT_REGION</span><span class="o">=</span><span class="s2">&quot;us-east-1&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">AWS_SSH_KEY</span><span class="o">=</span><span class="s1">&#39;jtimberman&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will load the specified file, <code>~/.aws/config</code> with the
<code>IniFile.load</code> method, retrieving the <code>default</code> section&rsquo;s
<code>aws_access_key_id</code> value. Then repeat the same for the
<code>aws_secret_access_key</code>.</p>

<p>To use the nondefault profile:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">export </span><span class="nv">AWS_ACCESS_KEY_ID</span><span class="o">=</span><span class="sb">`</span>ruby -rinifile -e <span class="s2">&quot;puts IniFile.load(File.join(File.expand_path(&#39;~&#39;), &#39;.aws&#39;, &#39;config&#39;))[&#39;profile nondefault&#39;][&#39;aws_access_key_id&#39;]&quot;</span><span class="sb">`</span>
</span><span class='line'><span class="nb">export </span><span class="nv">AWS_SECRET_ACCESS_KEY</span><span class="o">=</span><span class="sb">`</span>ruby -rinifile -e <span class="s2">&quot;puts IniFile.load(File.join(File.expand_path(&#39;~&#39;), &#39;.aws&#39;, &#39;config&#39;))[&#39;profile nondefault&#39;][&#39;aws_secret_access_key&#39;]&quot;</span><span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that this uses <code>['profile nondefault']</code>.</p>

<p>Since different tools historically have used slightly different
environment variables, I export those too:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">export </span><span class="nv">AMAZON_ACCESS_KEY_ID</span><span class="o">=</span><span class="nv">$AWS_ACCESS_KEY_ID</span>
</span><span class='line'><span class="nb">export </span><span class="nv">AMAZON_SECRET_ACCESS_KEY</span><span class="o">=</span><span class="nv">$AWS_SECRET_ACCESS_KEY</span>
</span><span class='line'><span class="nb">export </span><span class="nv">AWS_ACCESS_KEY</span><span class="o">=</span><span class="nv">$AWS_ACCESS_KEY_ID</span>
</span><span class='line'><span class="nb">export </span><span class="nv">AWS_SECRET_KEY</span><span class="o">=</span><span class="nv">$AWS_SECRET_ACCESS_KEY</span>
</span></code></pre></td></tr></table></div></figure>


<p>I create a separate config script for each account.</p>

<p>The AWS CLI tool will automatically use the <code>~/.aws/config</code>, and can
load different profiles with the <code>--profile</code> option. The <code>aws-sdk</code>
Ruby library will use the environment variables, however. So
authentication in a Ruby script is automatically set up.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;aws-sdk&#39;</span>
</span><span class='line'><span class="n">iam</span> <span class="o">=</span> <span class="ss">AWS</span><span class="p">:</span><span class="ss">:IAM</span><span class="o">.</span><span class="n">new</span>
</span></code></pre></td></tr></table></div></figure>


<p>Without this, it would be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;aws-sdk&#39;</span>
</span><span class='line'><span class="n">iam</span> <span class="o">=</span> <span class="ss">AWS</span><span class="p">:</span><span class="ss">:IAM</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:access_key_id</span> <span class="o">=&gt;</span> <span class="s1">&#39;YOUR_ACCESS_KEY_ID&#39;</span><span class="p">,</span>
</span><span class='line'>                   <span class="ss">:secret_access_key</span> <span class="o">=&gt;</span> <span class="s1">&#39;YOUR_SECRET_ACCESS_KEY&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which is a little ornerous.</p>

<p>To use this with <code>knife-ec2</code>, I have the following in my
<code>.chef/knife.rb</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">knife</span><span class="o">[</span><span class="ss">:aws_access_key_id</span><span class="o">]</span>      <span class="o">=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;AWS_ACCESS_KEY_ID&#39;</span><span class="o">]</span>
</span><span class='line'><span class="n">knife</span><span class="o">[</span><span class="ss">:aws_secret_access_key</span><span class="o">]</span>  <span class="o">=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;AWS_SECRET_ACCESS_KEY&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Naturally, since <code>knife.rb</code> is Ruby, I could use <code>Inifile.load</code> there,
but I only started using that library recently, and I have my knife
configuration setup already.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Preview Chef Client Local Mode]]></title>
    <link href="http://jtimberman.housepub.org/blog/2013/10/10/preview-chef-client-local-mode/"/>
    <updated>2013-10-10T23:39:00-06:00</updated>
    <id>http://jtimberman.housepub.org/blog/2013/10/10/preview-chef-client-local-mode</id>
    <content type="html"><![CDATA[<p>Opscode Developer John Keiser
<a href="https://twitter.com/jkeiser2/status/388460927026085888">mentioned</a>
that a feature for Chef Zero he&rsquo;s been working on, &ldquo;local mode,&rdquo; is
now in Chef&rsquo;s master branch. This means it should be in the next
release (11.8). I took the liberty to check this <em>unreleased</em> feature
out.</p>

<p>Let&rsquo;s just say, it&rsquo;s super awesome and John has done some amazing work
here.</p>

<h2>PREVIEW</h2>

<p>This is a preview of an unreleased feature in Chef. All standard
disclaimers apply :).</p>

<h2>Install</h2>

<p>This is in the master branch of Chef, not released as a gem yet.
You&rsquo;ll need to get the source and build a gem locally. This totally
assumes you&rsquo;ve installed a sane ruby and bundler on your system.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git clone git://github.com/opscode/chef.git
</span><span class='line'><span class="nb">cd </span>chef
</span><span class='line'>bundle install
</span><span class='line'>bundle <span class="nb">exec </span>rake gem
</span><span class='line'>gem install  pkg/chef-11.8.0.alpha.0.gem
</span></code></pre></td></tr></table></div></figure>


<p><strong>Note</strong> Alpha!</p>

<h2>Setup</h2>

<p>Next, point it at a local repository. I&rsquo;ll use a simple example.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git clone git://github.com/opscode/chef-repo.git
</span><span class='line'><span class="nb">cd </span>chef-repo
</span><span class='line'>knife cookbook create zero -o ./cookbooks
</span><span class='line'>vi cookbooks/zero/recipes/default.rb
</span></code></pre></td></tr></table></div></figure>


<p>I created a fairly trivial example recipe to show that this will
support search, and data bag items:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">search</span><span class="p">(</span><span class="ss">:node</span><span class="p">,</span> <span class="s2">&quot;*:*&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="n">data_bag_item</span><span class="p">(</span><span class="s2">&quot;zero&quot;</span><span class="p">,</span> <span class="s2">&quot;fluff&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">file</span> <span class="s2">&quot;/tmp/zerofiles&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">content</span> <span class="n">a</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">to_s</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">file</span> <span class="s2">&quot;/tmp/fluff&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">content</span> <span class="n">b</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This simply searches for all nodes, and uses the content of the first
node (the one we&rsquo;re running on presumably) for a file in /tmp. It also
loads a data bag item (which I created) and uses it for the content of
another file in /tmp.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>mkdir -p data_bags/zero
</span><span class='line'>vi data_bags/zero/fluff.json
</span></code></pre></td></tr></table></div></figure>


<p>The data bag item:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;fluff&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;clouds&quot;</span><span class="p">:</span> <span class="s2">&quot;Are fluffy&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Converge!</h2>

<p>Now, converge the node:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>chef-client -z -o zero
</span></code></pre></td></tr></table></div></figure>


<p>The <code>-z</code>, or <code>--local-mode</code> argument is the magic that sets up Chef
Zero, and loads all the contents of the repository. The <code>-o zero</code>
tells Chef to use a one time run list of the &ldquo;zero&rdquo; recipe.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>2013-10-10T23:53:32-06:00<span class="o">]</span> WARN: No config file found or specified on <span class="nb">command </span>line, not loading.
</span><span class='line'>Starting Chef Client, version 11.8.0.alpha.0
</span><span class='line'><span class="o">[</span>2013-10-10T23:53:36-06:00<span class="o">]</span> WARN: Run List override has been provided.
</span><span class='line'><span class="o">[</span>2013-10-10T23:53:36-06:00<span class="o">]</span> WARN: Original Run List: <span class="o">[</span>recipe<span class="o">[</span>zero<span class="o">]]</span>
</span><span class='line'><span class="o">[</span>2013-10-10T23:53:36-06:00<span class="o">]</span> WARN: Overridden Run List: <span class="o">[</span>recipe<span class="o">[</span>zero<span class="o">]]</span>
</span><span class='line'>resolving cookbooks <span class="k">for </span>run list: <span class="o">[</span><span class="s2">&quot;zero&quot;</span><span class="o">]</span>
</span><span class='line'>Synchronizing Cookbooks:
</span><span class='line'>  - zero
</span><span class='line'>Compiling Cookbooks...
</span><span class='line'>Converging 2 resources
</span><span class='line'>Recipe: zero::default
</span><span class='line'>  * file<span class="o">[</span>/tmp/zerofiles<span class="o">]</span> action create
</span><span class='line'>    - create new file /tmp/zerofiles
</span><span class='line'>    - update content in file /tmp/zerofiles from none to 0a038a
</span><span class='line'>        --- /tmp/zerofiles      2013-10-10 23:53:36.368059768 -0600
</span><span class='line'>        +++ /tmp/.zerofiles20131010-6903-10cvytu        2013-10-10 23:53:36.368059768 -0600
</span><span class='line'>        @@ -1 +1,2 @@
</span><span class='line'>        +node<span class="o">[</span>jenkins.int.housepub.org<span class="o">]</span>
</span><span class='line'>  * file<span class="o">[</span>/tmp/fluff<span class="o">]</span> action create
</span><span class='line'>    - create new file /tmp/fluff
</span><span class='line'>    - update content in file /tmp/fluff from none to d46bab
</span><span class='line'>        --- /tmp/fluff  2013-10-10 23:53:36.372059683 -0600
</span><span class='line'>        +++ /tmp/.fluff20131010-6903-1l3i1h     2013-10-10 23:53:36.372059683 -0600
</span><span class='line'>        @@ -1 +1,2 @@
</span><span class='line'>        +data_bag_item<span class="o">[</span>fluff<span class="o">]</span>
</span><span class='line'>Chef Client finished, 2 resources updated
</span></code></pre></td></tr></table></div></figure>


<p>The diff output from each of the file resources shows that the content
does in fact come from the search (a node object was returned) and a
data bag item (a data bag item object was returned).</p>

<h2>What&rsquo;s Next?</h2>

<p>Since this is a feature of Chef, it will be documented and released,
so look for that in the next version of Chef.</p>

<p>I can see this used for testing purposes, especially for recipes that
make use of combinations of data bags and search, such as Opscode&rsquo;s
<a href="http://community.opscode.com/cookbooks/nagios">nagios cookbook</a>.</p>

<h2>Questions</h2>

<ul>
<li>Does it work with Berkshelf?</li>
</ul>


<p>I don&rsquo;t know. Probably not (yet).</p>

<ul>
<li>Does it work with Test Kitchen?</li>
</ul>


<p>I don&rsquo;t know. Probalby not (yet). Provisioners in test-kitchen
would need to be (re)written.</p>

<ul>
<li>Should I use this in production?</li>
</ul>


<p>This is an unreleased feature in the master branch. What do you think?
:)</p>

<ul>
<li>When will this be released?</li>
</ul>


<p>I don&rsquo;t know the schedule for 11.8.0. Soon?</p>

<ul>
<li>Where do I find out more, or get involved?</li>
</ul>


<p>Join #chef-hacking in irc.freenode.net, the chef-dev mailing list, or
attend the Chef Community Summit (November 12-13, 2013 in Seattle).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Switching MyOpenID to Google OpenID]]></title>
    <link href="http://jtimberman.housepub.org/blog/2013/09/23/switching-myopenid-to-google-openid/"/>
    <updated>2013-09-23T10:38:00-06:00</updated>
    <id>http://jtimberman.housepub.org/blog/2013/09/23/switching-myopenid-to-google-openid</id>
    <content type="html"><![CDATA[<p>You may be aware that MyOpenID is
<a href="http://thenextweb.com/insider/2013/09/04/myopenid-to-shut-down/">shutting down in February 2014</a>.</p>

<p>The next best thing to use IMO, is Google&rsquo;s OpenID, since they have
2-factor authentication. Google doesn&rsquo;t really expose the OpenID URL
in a way that makes it as easy to use as &ldquo;username.myopenid.com.&rdquo;
Fortunately, it&rsquo;s relatively simple to add to a custom domain hosted
by, for example, <a href="http://pages.github.com/">GitHub pages</a>. My
coworker, Stephen Delano, pointed me to this pro-tip.</p>

<p>The requirement is to put a <code>&lt;link&gt;</code> tag in the HTML header of the
site. It should look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;openid2.provider&quot;</span> <span class="na">href=</span><span class="s">&quot;https://www.google.com/accounts/o8/ud?source=profiles&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;openid2.local_id&quot;</span> <span class="na">href=</span><span class="s">&quot;http://www.google.com/profiles/A_UNIQUE_GOOGLE_PROFILE_ID</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Obviously you need a Google Profile, but anyone interested in doing
this probably has a Google+ account for Google Hangouts anyway :).</p>

<p>If you&rsquo;re like me and have your custom domain hosted as an
<a href="http://octopress.org/">Octopress</a> blog, this goes in
<code>source/_includes/custom/head.html</code>. Then deploy the site and in a few
moments you&rsquo;ll be able to start using your site as an OpenID.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing Secrets With Chef Vault]]></title>
    <link href="http://jtimberman.housepub.org/blog/2013/09/10/managing-secrets-with-chef-vault/"/>
    <updated>2013-09-10T09:30:00-06:00</updated>
    <id>http://jtimberman.housepub.org/blog/2013/09/10/managing-secrets-with-chef-vault</id>
    <content type="html"><![CDATA[<p>Two years ago, I wrote a post about
<a href="http://jtimberman.housepub.org/blog/2011/08/06/encrypted-data-bag-for-postfix-sasl-authentication/">using Chef encrypted data bags</a>
for SASL authentication with Postfix. At the time, my ISP didn&rsquo;t allow
non-authenticated SMTP, so I had to find a solution so I could get
cronspam and other vital email from my servers at home. I&rsquo;ve since
switched ISPs to one that doesn&rsquo;t care so much about this, so I&rsquo;m not
using any of that code anymore.</p>

<p>However, that doesn&rsquo;t mean I don&rsquo;t have secrets to manage! I actually
don&rsquo;t for my personal systems due to what I&rsquo;m managing with Chef now,
but we certainly do for Opscode&rsquo;s hosted Enterprise Chef environment.
The usual suspects for any web application are required: database
passwords, SSL certificates, service API tokens, etc.</p>

<p>We&rsquo;re evaluating chef-vault as a possible solution. This blog post
will serve as notes for me so I can remember what I did when my
terminal history is gone, and hopefully information for you to be able
to use in your own environment.</p>

<h1>Chef Vault</h1>

<p>Chef Vault is an
<a href="https://github.com/Nordstrom/chef-vault">open source project</a>
published by <a href="http://nordstrom.com">Nordstrom</a>. It is distributed as a
RubyGem. You&rsquo;ll need it installed on your local workstation so you can
encrypt sensitive secrets, and on any systems that need to decrypt
said secrets. Since the workstation is where we&rsquo;re going to start,
install the gem. I&rsquo;ll talk about using this in a recipe later.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% gem install chef-vault</span></code></pre></td></tr></table></div></figure>


<h1>Use Cases</h1>

<p>Now, for the use cases, I&rsquo;m going to take two fairly simple examples,
and explain how chef-vault works along the way.</p>

<ol>
<li>A username/password combination. The <code>vaultuser</code> will be created on
the system with Chef&rsquo;s built-in <code>user</code> resource.</li>
<li>A file with sensitive content. In this case, I&rsquo;m going to use a
junk RSA private key for <code>vaultuser</code>.</li>
</ol>


<p>Secrets are generally one of these things. Either a value passed into
a command-line program (like <code>useradd</code>) or a file that should live on
disk (like an SSL certificate or RSA key).</p>

<h1>Command-line Structure</h1>

<p>Chef Vault includes knife plugins to allow you to manage the secrets
from your workstation, uploading them to the Chef Server just like
normal data bags. The secrets themselves live in Data Bags on the Chef
Server. The &ldquo;bag&rdquo; is called the &ldquo;vault&rdquo; for chef-vault.</p>

<p>After installation, the <code>encrypt</code> and <code>decrypt</code> sub-commands will be
available for knife.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>knife encrypt create [VAULT] [ITEM] [VALUES] --mode MODE --search SEARCH --admins ADMINS --json FILE
</span><span class='line'>knife encrypt delete [VAULT] [ITEM] --mode MODE
</span><span class='line'>knife encrypt remove [VAULT] [ITEM] [VALUES] --mode MODE --search SEARCH --admins ADMINS
</span><span class='line'>knife rotate secret [VAULT] [ITEM] --mode MODE
</span><span class='line'>knife encrypt update [VAULT] [ITEM] [VALUES] --mode MODE --search SEARCH --admins ADMINS --json FILE
</span><span class='line'>knife decrypt [VAULT] [ITEM] [VALUES] --mode MODE</span></code></pre></td></tr></table></div></figure>


<p>The
<a href="https://github.com/Nordstrom/chef-vault/blob/master/README.md">README</a>
and
<a href="https://github.com/Nordstrom/chef-vault/blob/master/KNIFE_EXAMPLES.md">Examples</a>
document these quite well.</p>

<h2>Mode: Solo vs Client</h2>

<p>I&rsquo;m using Chef with a Chef Server (Enterprise Chef), so I&rsquo;ll specify
<code>--mode client</code> for the knife commands.</p>

<p>It is important to note the <code>MODE</code> in the chef-vault knife plugin
commands affects where the encrypted data bags will be saved. Chef
supports data bags with both Solo and Client/Server use. When using
chef-solo, you&rsquo;ll need to configure <code>data_bag_path</code> in your
<code>knife.rb</code>. That is, even if you&rsquo;re using Solo, since these are knife
plugins, the configuration is for knife, not chef-solo. I&rsquo;m using a
Chef Server though, so I&rsquo;m going to use <code>--mode client</code>.</p>

<h1>Create a User with a Password</h1>

<p>The user I&rsquo;m going to create is the arbitrarily named <code>vaultuser</code>,
with the super secret password, <code>chef-vault</code>. I&rsquo;m going to use this on
a Linux system with SHA512 hashing, so first I generate a password
using mkpasswd:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% mkpasswd -m sha-512
</span><span class='line'>Password: chef-vault
</span><span class='line'>$6$VqEIDjsp$7NtPMhA9cnxvSMTE9l7DMmydJJEymi9b4t1Vhk475vrWlfxMgVb3bDLhpk/RZt0J3X7l5H8WnqFgvq3dIa9Kt/</span></code></pre></td></tr></table></div></figure>


<p><strong>Note</strong>: This is the <code>mkpasswd(1)</code> command from the Ubuntu 10.04
  <a href="http://packages.ubuntu.com/lucid/mkpasswd">mkpasswd package</a>.</p>

<h2>Create the Item</h2>

<p>The command I&rsquo;m going to use is <code>knife encrypt create</code> since this is a
new secret. I&rsquo;ll show two examples. First, I&rsquo;ll pass in the raw JSON
data as &ldquo;values&rdquo;. You would do this if you&rsquo;re not going to store the
unencrypted secret on disk or in a repository. Second, I&rsquo;ll pass a
JSON file. You would do this if you want to store the unencrypted
secret on disk or in a repository.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% knife encrypt create secrets vaultuser \
</span><span class='line'>  '{"vaultuser":"$6$VqEIDjsp$7NtPMhA9cnxvSMTE9l7DMmydJJEymi9b4t1Vhk475vrWlfxMgVb3bDLhpk/RZt0J3X7l5H8WnqFgvq3dIa9Kt/"}' \
</span><span class='line'>  --search 'role:base' \
</span><span class='line'>  --admins jtimberman --mode client</span></code></pre></td></tr></table></div></figure>


<p>The <code>[VALUES]</code> in this command is raw JSON that will be created in the
data bag item by <code>chef-vault</code>. The <code>--search</code> option tells chef-vault
to use the <strong>public</strong> keys of the nodes matching the SOLR query for
encrypting the value. Then during the Chef run, chef-vault uses those
node&rsquo;s <strong>private</strong> keys to decrypt the value. The <code>--admins</code> option tells chef-vault
the list of users on the Chef Server who are also allowed to decrypt
the secret. This is specified as a comma separated string for
multiple admins. Finally, as I mentioned, I&rsquo;m using a Chef Server so I
need to specify <code>--mode client</code>, since &ldquo;solo&rdquo; is the default.</p>

<p>Here&rsquo;s the equivalent, using a JSON file named <code>secrets_vaultuser.json</code>. It has the content:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span><span class="nt">&quot;vaultuser&quot;</span><span class="p">:</span><span class="s2">&quot;$6$VqEIDjsp$7NtPMhA9cnxvSMTE9l7DMmydJJEymi9b4t1Vhk475vrWlfxMgVb3bDLhpk/RZt0J3X7l5H8WnqFgvq3dIa9Kt/&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The command is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>% knife encrypt create secrets vaultuser \
</span><span class='line'>  --json secrets_vaultuser.json
</span><span class='line'>  --search &#39;role:base&#39; \
</span><span class='line'>  --admins jtimberman --mode client
</span></code></pre></td></tr></table></div></figure>


<p>Now, let&rsquo;s see what has been created on the Chef Server. I&rsquo;ll use the
core Chef knife plugin, <code>data bag item show</code> for this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>% knife data bag show secrets
</span><span class='line'>vaultuser
</span><span class='line'>vaultuser_keys
</span></code></pre></td></tr></table></div></figure>


<p>I now have a &ldquo;secrets&rdquo; data bag, with two items. The first,
<code>vaultuser</code> is the one that contains the actual secret. Let&rsquo;s see:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>% knife data bag show secrets vaultuser
</span><span class='line'>id:        vaultuser
</span><span class='line'>vaultuser:
</span><span class='line'>  cipher:         aes-256-cbc
</span><span class='line'>  encrypted_data: j+/fFM7ist6I7K360GNfzSgu6ix63HGyXN2ZAd99R6H4TAJ4pQKuFNpJXYnC
</span><span class='line'>  SXA5n68xn9frxHAJNcLuDXCkEv+F/MnW9vMlTaiuwW/jO++vS5mIxWU170mR
</span><span class='line'>  EgeB7gvPH7lfUdJFURNGQzdiTSSFua9E06kAu9dcrT83PpoQQzk=
</span><span class='line'>  iv:             cu2Ugw+RpTDVRu1QaaAfug==
</span><span class='line'>  version:        1
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, I have encrypted data. I also told chef-vault that my
user can decrypt this. I need to use the knife plugin to do so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>% knife decrypt secrets vaultuser &#39;vaultuser&#39; --mode client
</span><span class='line'>secrets/vaultuser
</span><span class='line'>  vaultuser: $6$VqEIDjsp$7NtPMhA9cnxvSMTE9l7DMmydJJEymi9b4t1Vhk475vrWlfxMgVb3bDLhpk/RZt0J3X7l5H8WnqFgvq3dIa9Kt/
</span></code></pre></td></tr></table></div></figure>


<p>The <code>'vaultuser'</code> in quotes is the key from the hash of JSON data that
I specified earlier. As you can see, the password is that which was
generated from the mkpasswd command earlier.</p>

<p>But what nodes have access to decrypt this password? That&rsquo;s what
chef-vault stored in the <code>vaultuser_keys</code> item. Let&rsquo;s look:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>% knife data bag show secrets vaultuser_keys
</span><span class='line'>admins:              jtimberman
</span><span class='line'>clients:
</span><span class='line'>  os-945926465950316
</span><span class='line'>  os-2790002246935003
</span><span class='line'>id:                  vaultuser_keys
</span><span class='line'>jtimberman:          0Q2bhw/kJl2aIVEwqY6wYhrrfdz9fdsf8tCiIrBih2ZORvV7EEIpzzKQggRX
</span><span class='line'>4P4vnVQjMjfkRwIXndTzctCJONQYF50OSZi5ByXWqbich9iCWvVIbnhcLWSp
</span><span class='line'>z5mQoSTNXyZz/JQZGnubkckh4wGLBFDrLJ6WKl6UNXH1dRwqDNo5sEK7/3Wn
</span><span class='line'>b4ztVSRxzB01wVli0wLvFSZzGsKYJYINBcidnbIgLh/xGYGtBJVlgG2z/7TV
</span><span class='line'>uN0b/qvGj8VlhbS6zPlwh39O3mexDdkLwry/+gbO1nj8qKNkKDKaix5zypwE
</span><span class='line'>XdmdfMKNYGaM6kzG8cwuKZXLAgGAgblVUB1HP8+8kQ==
</span><span class='line'>
</span><span class='line'>os-2790002246935003: kGQLsxsFmBe9uPuWxZpKiNBnqJq55hQZJLgaKdjG2Vvivv98RrFGz1y8Xbwe
</span><span class='line'>uzeSgPgAURCZmxpNxpHrwvvKcvL77sBOL6TTKiNzs8n5B3ZOawy17dsuG24v
</span><span class='line'>41R0cRMnYLgbLcjln9dpVe4Esr4goPxko+1XqBPik1SBapthQq/pLUJ1BIKh
</span><span class='line'>Fxu1QVGj1w4HPUftLaUzeS33jKbtfvgZyZsYZBdVCVEVidOxC90WRf4wtkd6
</span><span class='line'>Ueyj+0gd1QKv84Q387O1R5LtRMS6u+17PJinrcRIkVNZ6P1z6oT2Dasfvrex
</span><span class='line'>rK3s5vD7v6jpkUW12Wj74Lz3Z6x3sKuIDzCtvEUnWw==
</span><span class='line'>
</span><span class='line'>os-945926465950316:  XzTJrJ3TZZZ1u9L9p6DZledf3bo2ToH2yrLGZQKPV6/ANzElHXGcYrEdtP0q
</span><span class='line'>14Nz1NzsqEftzviAebUUnc6ke91ltD8s6hNQQrPJRqkUoDlM7lNEwiUiz/dD
</span><span class='line'>+sFI6CSzQptO3zPrUbAlUI1Zog5h7k/CCtiYtmFRD6wbAWnxmCqvLhO1jwqL
</span><span class='line'>VNJ1vfjlFsG77BDm2HFw7jgleuxRGYEgBfCCuBuW70FAdUTvNHIAwKQVkfU/
</span><span class='line'>Am75UYm7N4N0E+W76ZwojLoYtXXTV/iOGG1cw3C75SVAmCsBOuxUK/otub67
</span><span class='line'>zsNDsKToKa+laxzXGylrmkTricYXIqVpIQO8OL5nnw==
</span></code></pre></td></tr></table></div></figure>


<p>As we can see, I have two nodes that are API clients with access to
decrypt the data bag items. These values are all generated by
chef-vault, and I&rsquo;ll talk about how to update the list and rotate
secrets later in this post.</p>

<h2>Manage a User Password</h2>

<p>Let&rsquo;s manage a user resource with a password set to the value from our
encrypted data bag using Chef Vault.</p>

<p>First, I created a cookbook named <code>vault</code>, and added it to the base
role. It contains the following recipe:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">chef_gem</span> <span class="s2">&quot;chef-vault&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;chef-vault&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">vault</span> <span class="o">=</span> <span class="ss">ChefVault</span><span class="p">:</span><span class="ss">:Item</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s2">&quot;secrets&quot;</span><span class="p">,</span> <span class="s2">&quot;vaultuser&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">user</span> <span class="s2">&quot;vaultuser&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">password</span> <span class="n">vault</span><span class="o">[</span><span class="s1">&#39;vaultuser&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">home</span> <span class="s2">&quot;/home/vaultuser&quot;</span>
</span><span class='line'>  <span class="n">supports</span> <span class="ss">:manage_home</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">shell</span> <span class="s2">&quot;/bin/bash&quot;</span>
</span><span class='line'>  <span class="n">comment</span> <span class="s2">&quot;Chef Vault User&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let me break this down.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">chef_gem</span> <span class="s2">&quot;chef-vault&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;chef-vault&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>chef-vault</code> is distributed as a RubyGem, and I want to use it in my
recipe(s), so here I use the
<a href="http://docs.opscode.com/resource_chef_gem.html"><code>chef_gem</code> resource</a>.
Then, I require it like any other Ruby library.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">vault</span> <span class="o">=</span> <span class="ss">ChefVault</span><span class="p">:</span><span class="ss">:Item</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s2">&quot;secrets&quot;</span><span class="p">,</span> <span class="s2">&quot;vaultuser&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is where the decryption happens. If I do this under a
<code>chef-shell</code>, I can see:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>chef:recipe &gt; vault = ChefVault::Item.load(&quot;secrets&quot;, &quot;vaultuser&quot;)
</span><span class='line'> =&gt; data_bag_item[&quot;secrets&quot;, &quot;vaultuser&quot;, {&quot;id&quot;=&gt;&quot;vaultuser&quot;, &quot;vaultuser&quot;=&gt;&quot;$6$VqEIDjsp$7NtPMhA9cnxvSMTE9l7DMmydJJEymi9b4t1Vhk475vrWlfxMgVb3bDLhpk/RZt0J3X7l5H8WnqFgvq3dIa9Kt/&quot;}]
</span></code></pre></td></tr></table></div></figure>


<p><code>ChefVault::Item.load</code> takes two arguments, the &ldquo;vault&rdquo; or data bag,
in this case <code>secrets</code>, and the &ldquo;item&rdquo;, in this case <code>vaultuser</code>. It
returns a data bag item. Then in the
<a href="http://docs.opscode.com/resource_user.html"><code>user</code> resource</a>, I use
the password:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">user</span> <span class="s2">&quot;vaultuser&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">password</span> <span class="n">vault</span><span class="o">[</span><span class="s1">&#39;vaultuser&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">home</span> <span class="s2">&quot;/home/vaultuser&quot;</span>
</span><span class='line'>  <span class="n">supports</span> <span class="ss">:manage_home</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">shell</span> <span class="s2">&quot;/bin/bash&quot;</span>
</span><span class='line'>  <span class="n">comment</span> <span class="s2">&quot;Chef Vault User&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The important resource attribute here is <code>password</code>, where I&rsquo;m using
the local variable, <code>vault</code> and the <code>vaultuser</code> key from the item as
decrypted by <code>ChefVault::Item.load</code>. When Chef runs, it will look like
this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Recipe: vault::default
</span><span class='line'>  * chef_gem[chef-vault] action install
</span><span class='line'>    - install version 2.0.1 of package chef-vault
</span><span class='line'>  * chef_gem[chef-vault] action install (up to date)
</span><span class='line'>  * user[vaultuser] action create
</span><span class='line'>    - create user user[vaultuser]
</span></code></pre></td></tr></table></div></figure>


<p>Now, I can su to <code>vaultuser</code> using the password I created:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>ubuntu@-2790002246935003:~$ su - vaultuser
</span><span class='line'>Password: chef-vault
</span><span class='line'>vaultuser@os-2790002246935003:~$ id
</span><span class='line'>uid=1001(vaultuser) gid=1001(vaultuser) groups=1001(vaultuser)
</span><span class='line'>vaultuser@os-2790002246935003:~$ pwd
</span><span class='line'>/home/vaultuser
</span></code></pre></td></tr></table></div></figure>


<p>Yay! To show that the user was created with the right password,
here&rsquo;s the DEBUG log output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>INFO: Processing user[vaultuser] action create ((irb#1) line 12)
</span><span class='line'>DEBUG: user[vaultuser] user does not exist
</span><span class='line'>DEBUG: user[vaultuser] setting comment to Chef Vault User
</span><span class='line'>DEBUG: user[vaultuser] setting password to $6$VqEIDjsp$7NtPMhA9cnxvSMTE9l7DMmydJJEymi9b4t1Vhk475vrWlfxMgVb3bDLhpk/RZt0J3X7l5H8WnqFgvq3dIa9Kt/
</span><span class='line'>DEBUG: user[vaultuser] setting shell to /bin/bash
</span><span class='line'>INFO: user[vaultuser] created
</span></code></pre></td></tr></table></div></figure>


<p>Next, I&rsquo;ll create a secret that is a file rendered on the system.</p>

<h1>Create a Private SSH Key</h1>

<p>Suppose this <code>vaultuser</code> is to be used for deploying code by cloning a
repository. It will need a private SSH key to authenticate, so I&rsquo;ll
create one, with an empty passphrase in this case.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>% ssh-keygen -b 4096 -t rsa -f vaultuser-ssh
</span><span class='line'>Generating public/private rsa key pair.
</span><span class='line'>Enter passphrase (empty for no passphrase):
</span><span class='line'>Enter same passphrase again:
</span><span class='line'>Your identification has been saved in vaultuser-ssh.
</span><span class='line'>Your public key has been saved in vaultuser-ssh.pub.
</span></code></pre></td></tr></table></div></figure>


<p>Get the SHA256 checksum of the private key. I use SHA256 because
that&rsquo;s what Chef uses for file content. We&rsquo;ll use this to verify
content later.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>% sha256sum vaultuser-ssh
</span><span class='line'>a83221c243c9d39d20761e87db6c781ed0729b8ff4c3b330214ebca26e2ea89d  vaultuser-ssh
</span></code></pre></td></tr></table></div></figure>


<p>Assume that I also
<a href="https://help.github.com/articles/generating-ssh-keys">created the SSH key on GitHub</a>
for this user.</p>

<p>In order to have a file&rsquo;s contents be a JSON value for the data bag
item, I&rsquo;ll remove the newlines (<code>\n</code>), and generate the JSON:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>ruby -rjson -e &#39;puts JSON.generate({&quot;vaultuser-ssh-private&quot; =&gt; File.read(&quot;vaultuser-ssh&quot;)})&#39; \
</span><span class='line'>  &gt; secrets_vaultuser-ssh-private.json
</span></code></pre></td></tr></table></div></figure>


<p>Now, create the secret on the Chef Server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>knife encrypt create secrets vaultuser-ssh-private \
</span><span class='line'>  --search &#39;role:base&#39; \
</span><span class='line'>  --json secrets_vaultuser-ssh-private.json \
</span><span class='line'>  --admins jtimberman \
</span><span class='line'>  --mode client
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s verify the server has what we need:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>% knife data bag show secrets vaultuser-ssh-private
</span><span class='line'>id:                    vaultuser-ssh-private
</span><span class='line'>vaultuser-ssh-private:
</span><span class='line'>  cipher:         aes-256-cbc
</span><span class='line'>  encrypted_data: mRRToM2N/0F+OyJxkYlHo/cUtHSIuy69ROAKuGoHIhX9Fr5vFTCM4RyWQSTN
</span><span class='line'>  trimmed for brevity even though scrollbars
</span><span class='line'>% knife decrypt secrets vaultuser-ssh-private &#39;vaultuser-ssh-private&#39; --mode client
</span><span class='line'>secrets/vaultuser-ssh-private
</span><span class='line'>  vaultuser-ssh-private: -----BEGIN RSA PRIVATE KEY-----
</span><span class='line'>trimmed for brevity even though scrollbars
</span></code></pre></td></tr></table></div></figure>


<h2>Manage the Key File</h2>

<p>Now, I&rsquo;ll manage the private key file with the vault cookbook.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">vault_ssh</span> <span class="o">=</span> <span class="ss">ChefVault</span><span class="p">:</span><span class="ss">:Item</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s2">&quot;secrets&quot;</span><span class="p">,</span> <span class="s2">&quot;vaultuser-ssh-private&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">directory</span> <span class="s2">&quot;/home/vaultuser/.ssh&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">owner</span> <span class="s2">&quot;vaultuser&quot;</span>
</span><span class='line'>  <span class="n">group</span> <span class="s2">&quot;vaultuser&quot;</span>
</span><span class='line'>  <span class="n">mode</span> <span class="mo">0700</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">file</span> <span class="s2">&quot;/home/vaultuser/.ssh/id_rsa&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">content</span> <span class="n">vault_ssh</span><span class="o">[</span><span class="s2">&quot;vaultuser-ssh-private&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">owner</span> <span class="s2">&quot;vaultuser&quot;</span>
</span><span class='line'>  <span class="n">group</span> <span class="s2">&quot;vaultuser&quot;</span>
</span><span class='line'>  <span class="n">mode</span> <span class="mo">0600</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, let&rsquo;s break this up a bit. First, load the item from the
encrypted data bag like we did before.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">vault_ssh</span> <span class="o">=</span> <span class="ss">ChefVault</span><span class="p">:</span><span class="ss">:Item</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s2">&quot;secrets&quot;</span><span class="p">,</span> <span class="s2">&quot;vaultuser-ssh-private&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, make sure that the vaultuser has an <code>.ssh</code> directory with the
correct permissions.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">directory</span> <span class="s2">&quot;/home/vaultuser/.ssh&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">owner</span> <span class="s2">&quot;vaultuser&quot;</span>
</span><span class='line'>  <span class="n">group</span> <span class="s2">&quot;vaultuser&quot;</span>
</span><span class='line'>  <span class="n">mode</span> <span class="mo">0700</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, manage the content of the private key file with a <code>file</code>
resource and the <code>content</code> resource attribute. The value of
<code>vault_ssh["vaultuser-ssh-private"]</code> will be a string, with <code>\n</code>&rsquo;s
embedded, but when it&rsquo;s rendered on disk, it will display properly.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">file</span> <span class="s2">&quot;/home/vaultuser/.ssh/id_rsa&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">content</span> <span class="n">vault_ssh</span><span class="o">[</span><span class="s2">&quot;vaultuser-ssh-private&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">owner</span> <span class="s2">&quot;vaultuser&quot;</span>
</span><span class='line'>  <span class="n">group</span> <span class="s2">&quot;vaultuser&quot;</span>
</span><span class='line'>  <span class="n">mode</span> <span class="mo">0600</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now run chef on a target node:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Recipe: vault::default
</span><span class='line'>  * chef_gem[chef-vault] action install (up to date)
</span><span class='line'>  * user[vaultuser] action create (up to date)
</span><span class='line'>  * directory[/home/vaultuser/.ssh] action create
</span><span class='line'>    - create new directory /home/vaultuser/.ssh
</span><span class='line'>    - change mode from &#39;&#39; to &#39;0700&#39;
</span><span class='line'>    - change owner from &#39;&#39; to &#39;vaultuser&#39;
</span><span class='line'>    - change group from &#39;&#39; to &#39;vaultuser&#39;
</span><span class='line'>
</span><span class='line'>  * file[/home/vaultuser/.ssh/id_rsa] action create
</span><span class='line'>    - create new file /home/vaultuser/.ssh/id_rsa with content checksum a83221
</span><span class='line'>        --- /tmp/chef-tempfile20130909-1918-1v5hezo   2013-09-09 22:41:21.887239999 +0000
</span><span class='line'>        +++ /tmp/chef-diff20130909-1918-xwbmsn    2013-09-09 22:41:21.883240065 +0000
</span><span class='line'>        @@ -0,0 +1,51 @@
</span><span class='line'>        +-----BEGIN RSA PRIVATE KEY-----
</span><span class='line'>        +MIIJJwIBAAKCAgEAtZmwFTlVOBbr2ZfG+cDtUGx04xCcgaa0p0ISmeyMEoGYH/CP
</span><span class='line'>        output trimmed because its long even though scrollbars again
</span></code></pre></td></tr></table></div></figure>


<p>Note the content checksum, <code>a83221</code>. This will match the checksum of
the source file from earlier (scroll up!), and the one rendered:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>ubuntu@os-2790002246935003:~$ sudo sha256sum /home/vaultuser/.ssh/id_rsa
</span><span class='line'>a83221c243c9d39d20761e87db6c781ed0729b8ff4c3b330214ebca26e2ea89d  /home/vaultuser/.ssh/id_rsa
</span></code></pre></td></tr></table></div></figure>


<p>Yay! Now, we can SSH to GitHub (note, this is fake GitHub for example
purposes).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>ubuntu@os-2790002246935003:~$ su - vaultuser
</span><span class='line'>Password: chef-vault
</span><span class='line'>vaultuser@os-2790002246935003:~$ ssh -i .ssh/id_rsa github@172.31.7.15
</span><span class='line'>$ hostname
</span><span class='line'>os-945926465950316
</span><span class='line'>$ id
</span><span class='line'>uid=1002(github) gid=1002(github) groups=1002(github)
</span></code></pre></td></tr></table></div></figure>


<h1>Updating a Secret</h1>

<p>What happens if we need to update a secret? For example, if an
administrator leaves the organization, we will want to change the
<code>vaultuser</code> password (and SSH private key).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>% mkpasswd -m sha-512
</span><span class='line'>Password: gone-user
</span><span class='line'>$6$zM5STNtXdmsrOSm$svJr0tauijqqxTjnMIGJGJPv5V3ovMFCQo.ZDBleiL.yOxcngRqh9yAjpMAsMBA7RlKPv5DKFd1aPZm/wUoKs.
</span></code></pre></td></tr></table></div></figure>


<p>The <code>encrypt create</code> command will return an error if the target
already exists:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>% knife encrypt create secrets vaultuser --search &#39;role:base&#39; --json secrets_vaultuser.json --admins jtimberman --mode client
</span><span class='line'>ERROR: ChefVault::Exceptions::ItemAlreadyExists: secrets/vaultuser already exists, use &#39;knife encrypt remove&#39; and &#39;knife encrypt update&#39; to make changes.
</span></code></pre></td></tr></table></div></figure>


<p>So, I need to use <code>encrypt update</code>. <strong>Note</strong> make sure that the
contents of the JSON file are valid JSON.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>% knife encrypt update secrets vaultuser --search &#39;role:base&#39; --json secrets_vaultuser.json --admins jtimberman --mode client
</span></code></pre></td></tr></table></div></figure>


<p><code>encrypt update</code> only updates the things that change, so I can also
shorten this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>% knife encrypt update secrets vaultuser --json secrets_vaultuser.json --mode client
</span></code></pre></td></tr></table></div></figure>


<p>Since the search and the admins didn&rsquo;t change.</p>

<p>Verify it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>% knife decrypt secrets vaultuser &#39;vaultuser&#39; --mode client
</span><span class='line'>secrets/vaultuser
</span><span class='line'>  vaultuser: $6$zM5STNtXdmsrOSm$svJr0tauijqqxTjnMIGJGJPv5V3ovMFCQo.ZDBleiL.yOxcngRqh9yAjpMAsMBA7RlKPv5DKFd1aPZm/wUoKs.
</span></code></pre></td></tr></table></div></figure>


<p>Now, just run Chef on any nodes affected.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Recipe: vault::default
</span><span class='line'>  * chef_gem[chef-vault] action install (up to date)
</span><span class='line'>  * user[vaultuser] action create
</span><span class='line'>    - alter user user[vaultuser]
</span><span class='line'>
</span><span class='line'>  * directory[/home/vaultuser/.ssh] action create (up to date)
</span><span class='line'>  * file[/home/vaultuser/.ssh/id_rsa] action create (up to date)
</span><span class='line'>Chef Client finished, 1 resources updated
</span></code></pre></td></tr></table></div></figure>


<p>And su to the vault user with the <code>gone-user</code> password:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>ubuntu@os-2790002246935003:~$ su - vaultuser
</span><span class='line'>Password: gone-user
</span><span class='line'>vaultuser@os-2790002246935003:~$
</span></code></pre></td></tr></table></div></figure>


<h1>Managing Access to Items</h1>

<p>There are three common scenarios which require managing the access to an item
in the vault.</p>

<ol>
<li>A system needs to be taken offline, or otherwise prevented from
accessing the item(s).</li>
<li>A new system comes online that needs access.</li>
<li>An admin user has left the organization.</li>
<li>A new admin user has joined the organization.</li>
</ol>


<p>Suppose we have a system that we need to take offline for some reason,
so we want to disable its access to a secret. Or, perhaps we have a
user who has left the organization that was an admin. We can do that in a
few ways.</p>

<h2>Update the Vault Item</h2>

<p>The most straightforward way to manage access to an item is to use the
<code>update</code> or <code>remove</code> sub-commands.</p>

<h3>Remove a System</h3>

<p>Suppose I want to remove node <code>DEADNODE</code>, I can qualify the search to
exclude the node named <code>DEADNODE</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>% knife encrypt update secrets vaultuser \
</span><span class='line'>  --search &#39;role:base NOT name:DEADNODE&#39; \
</span><span class='line'>  --json secrets_vaultuser.json \
</span><span class='line'>  --admins jtimberman --mode client
</span></code></pre></td></tr></table></div></figure>


<p>Note, as before, admins didn&rsquo;t change so I don&rsquo;t need to pass that
argument.</p>

<h3>Add a New System</h3>

<p>If the node has run Chef and is indexed on the Chef Server already,
simply rerun the update command with the search:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>% knife encrypt update secrets vaultuser \
</span><span class='line'>  --search &#39;role:base&#39; \
</span><span class='line'>  --json secrets_vaultuser.json \
</span><span class='line'>  --admins jtimberman --mode client
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s a bit of a &ldquo;Chicken and Egg&rdquo; problem here, in that a new node
might not be indexed for search if it tried to load the secret during
a bootstrap beforehand. For example, if I create an OpenStack instance
with the base role in its run list, the node doesn&rsquo;t exist for the
search yet. A solution here is to create the node with an empty run
list, allowing it to register with the Chef Server, and then use
<code>knife bootstrap</code> to rerun Chef with the proper run list. This is
annoying, but no one claimed that chef-vault would solve <em>all</em>
problems with shared secret management :&ndash;).</p>

<h3>Remove an Admin</h3>

<p>The admins argument takes a list. Earlier, I only had my userid as an
admin. Suppose I created the item with &ldquo;bofh&rdquo; as an admin too:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>% knife encrypt create secrets vaultuser \
</span><span class='line'>  --search &#39;role:base&#39; \
</span><span class='line'>  --json secrets_vaultuser.json \
</span><span class='line'>  --admins &quot;jtimberman,bofh&quot; --mode client
</span></code></pre></td></tr></table></div></figure>


<p>To remove the bofh user, use the <code>encrypt remove</code> subcommand. In this
case, the <code>--admins</code> argument is the list of admins to remove, rather
than add.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>% knife encrypt remove secrets vaultuser --admins bofh --mode client
</span></code></pre></td></tr></table></div></figure>


<h3>Add a New Admin</h3>

<p>I want to add &ldquo;mandi&rdquo; as an administrator because she&rsquo;s awesome and
will help manage our secrets. As above, I just pass a comma-separated
string, <code>"jtimberman,mandi"</code> to the <code>--admins</code> argument.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>% knife encrypt update secrets vaultuser \
</span><span class='line'>  --search &#39;role:base&#39; \
</span><span class='line'>  --json secrets_vaultuser.json \
</span><span class='line'>  --admins &quot;jtimberman,mandi&quot; --mode client
</span></code></pre></td></tr></table></div></figure>


<h2>Regenerate the Client</h2>

<p>The heavyhanded way to remove access is to regenerate the API client
on the Chef Server. For example, of my nodes, say I want to remove
<code>os-945926465950316</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>% knife client reregister os-945926465950316
</span><span class='line'>-----BEGIN RSA PRIVATE KEY-----
</span><span class='line'>MIIEpAIBAAKCAQEAybzwv53tDLIzW+GHRJwLthZmiGTfZVyqQX6m6RGuZjemEIdy
</span><span class='line'>trim trim
</span></code></pre></td></tr></table></div></figure>


<p>If you&rsquo;re familiar with Chef Server&rsquo;s authentication cycle, you&rsquo;ll
know that until that private key is copied to the node, it will
completely fail to authenticate. However, once the
<code>/etc/chef/client.pem</code> file is updated with the content from the knife
command, we&rsquo;ll see that the node fails to read the Chef Vault item:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>================================================================================
</span><span class='line'>Recipe Compile Error in /var/chef/cache/cookbooks/vault/recipes/default.rb
</span><span class='line'>================================================================================
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>OpenSSL::PKey::RSAError
</span><span class='line'>-----------------------
</span><span class='line'>padding check failed
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Cookbook Trace:
</span><span class='line'>---------------
</span><span class='line'>  /var/chef/cache/cookbooks/vault/recipes/default.rb:4:in `from_file&#39;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Relevant File Content:
</span><span class='line'>----------------------
</span><span class='line'>/var/chef/cache/cookbooks/vault/recipes/default.rb:
</span><span class='line'>
</span><span class='line'>  1:  chef_gem &quot;chef-vault&quot;
</span><span class='line'>  2:  require &quot;chef-vault&quot;
</span><span class='line'>  3:
</span><span class='line'>  4&gt;&gt; vault = ChefVault::Item.load(&quot;secrets&quot;, &quot;vaultuser&quot;)
</span><span class='line'>  5:
</span><span class='line'>  6:  user &quot;vaultuser&quot; do
</span><span class='line'>  7:    password vault[&quot;vaultuser&quot;]
</span><span class='line'>  8:    home &quot;/home/vaultuser&quot;
</span><span class='line'>  9:    supports :manage_home =&gt; true
</span><span class='line'> 10:    shell &quot;/bin/bash&quot;
</span><span class='line'> 11:    comment &quot;Chef Vault User&quot;
</span><span class='line'> 12:  end
</span><span class='line'> 13:
</span></code></pre></td></tr></table></div></figure>


<p><strong>Note</strong> I say this is heavy-handed because if you make a mistake, you
  need to re-upload every single secret that this node needs access to.</p>

<h2>Removing Users</h2>

<p>We can also remove user access from Enterprise Chef simply by
disassociating that user from the organization on the Chef Server. I
won&rsquo;t show an example of that here, since I&rsquo;m using Opscode&rsquo;s hosted
Enterprise Chef server and I&rsquo;m the only admin, however :&ndash;).</p>

<h1>Backing Up Secrets</h1>

<p>To back up the secrets, as encrypted data from the Chef Server, use
<code>knife-essentials</code> (comes with Chef 11+, available as a RubyGem for
Chef 10).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>% knife download data_bags/secrets/
</span><span class='line'>Created data_bags/secrets/vaultuser_keys.json
</span><span class='line'>Created data_bags/secrets/vaultuser.json
</span><span class='line'>Created data_bags/secrets/vaultuser-ssh-private_keys.json
</span><span class='line'>Created data_bags/secrets/vaultuser-ssh-private.json
</span></code></pre></td></tr></table></div></figure>


<p>For example, the vaultuser.json file looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;vaultuser&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;vaultuser&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;encrypted_data&quot;</span><span class="p">:</span> <span class="s2">&quot;3yREwInxdyKpf8nuTIivXAeuEzHt7o4vF4FsOwmVLHmMWol5nCBoMWF0YdaW\n3P3NpEAAAxYEYeJYdVkrdLqjjB2kTJdx0+ceh/RBHBWqmSeHOWFH9pCRGjV8\nfS5XaTueShb320b/+Ia8iqUJJWg6utnbJCDx+VMcGNggPXgPKC8=\n&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;iv&quot;</span><span class="p">:</span> <span class="s2">&quot;EI+y74Uj2uwq7EVaP+0K6Q==\n&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;version&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;cipher&quot;</span><span class="p">:</span> <span class="s2">&quot;aes-256-cbc&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since these are encrypted using a strong cipher (AES 256), they should
be safe to store in repository. Unless you think the NSA has access to
that repository ;&ndash;).</p>

<h1>Conclusion</h1>

<p>Secrets management is hard! Especially when you need to store secrets
that are used by multiple systems, services, and people. Chef&rsquo;s
encrypted data bag feature isn&rsquo;t a panacea, but it certainly helps.
Hopefully, this blog post was informative. While I don&rsquo;t always
respond, I do read all comments posted here via Disqus, so let me know
if something is out of whack, or needs an update.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With Zones on OmniOS]]></title>
    <link href="http://jtimberman.housepub.org/blog/2013/06/23/getting-started-with-zones-on-omnios/"/>
    <updated>2013-06-23T23:47:00-06:00</updated>
    <id>http://jtimberman.housepub.org/blog/2013/06/23/getting-started-with-zones-on-omnios</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve become enamored with
<a href="http://wiki.illumos.org/display/illumos/illumos+Home">IllumOS</a>
recently. Years ago, I used Solaris (2.5.1 through 8) at IBM.
Unfortunately (for me), I stopped using it before Solaris 10 brought
all the cool toys to the yard &ndash; zones, zfs, dtrace, SMF. Thanks to
OmniTI&rsquo;s excellent IllumOS distribution,
<a href="http://omnios.omniti.com">OmniOS</a>, I&rsquo;m getting acclimated with the
awesomeness. I plan to write more about my experiences here.</p>

<p>First up, I spent today playing with zones. Zones are a kernel-level
container technology similar to Linux containers/cgroups, or BSD
jails. They&rsquo;re fast and lightweight. At least two of the plans I have
for them:</p>

<ol>
<li>Segregating the services on my home-server.</li>
<li>Adding support to various tools in Chef&rsquo;s ecosystem.</li>
</ol>


<p>The following is basically a compilation of several different blog
posts and documentation collections I&rsquo;ve been poring over. Like most
technical blog writers, I&rsquo;m posting this so I can find it later :&ndash;).</p>

<h2>Hardware</h2>

<p>I have a number of options for learning OmniOS. I have spare hardware,
or VMware, or
<a href="http://omnios.omniti.com/wiki.php/Installation#UsingVagrant">OmniTI&rsquo;s Vagrant box</a>.
I&rsquo;m doing all three of these, but the main use will be on physical
hardware, as I&rsquo;m planning to port the aforementioned server to OmniOS
(#1, above).</p>

<p>The details of the hardware are not important, except that I have a
hard disk device <code>c3t1d0</code>, and a physical NIC device <code>nge1</code> that are
devoted to zones. To adapt these instructions for your own
installation, change those device names where appropriate.</p>

<p>You can find the name of the disk device to use in your system with
the <code>format</code> command.</p>

<pre><code>root@menthe:~# format
Searching for disks...done


AVAILABLE DISK SELECTIONS:
       0. c3t0d0 &lt;ATA-WDCWD1500AHFD-0-7QR5 cyl 18238 alt 2 hd 255 sec 63&gt;
          /pci@0,0/pci1043,cb84@d/disk@0,0
       1. c3t1d0 &lt;ATA-SAMSUNG HD501LJ-0-12-465.76GB&gt;
          /pci@0,0/pci1043,cb84@d/disk@1,0
Specify disk (enter its number): ^D
</code></pre>

<p>Here I wanted to use the Samsung disk.</p>

<p>Use <code>dladm</code> to find the network devices:</p>

<pre><code>root@menthe:~# dladm show-phys
LINK         MEDIA                STATE      SPEED  DUPLEX    DEVICE
nge0         Ethernet             up         1000   full      nge0
nge1         Ethernet             up         1000   full      nge1
</code></pre>

<h2>Setup</h2>

<p>The example zone here is named <code>base</code>. Replace <code>base</code> with any zone
name you wish, e.g. <code>webserver37</code> or <code>noodlebarn</code>. It&rsquo;s also worth
noting that I&rsquo;m going to use DHCP, rather than static networking here.
There are plenty of guides out there for static networking, and I had
to hunt around for DHCP. Also worth noting is that this was all
performed right after installing the OS.</p>

<p>First, create a zpool to use for zones. This is a 500G disk, so I have
plenty of space.</p>

<pre><code>zpool create zones c3t1d0
</code></pre>

<p>Next, create a VNIC on the interface which is devoted to zones
(<code>nge1</code>). It can be named anything, but must end with a number.</p>

<pre><code>dladm create-vnic -l nge1 vnicbase0
</code></pre>

<p>Rather than use the <code>zonecfg</code> REPL, I used the following configuration
file, for repeatability.</p>

<pre><code>create -b
set zonepath=/zones/base
set ip-type=exclusive
set autoboot=false
add net
set physical=vnicbase0
end
commit
</code></pre>

<p>Use this config file to configure the zone with <code>zonecfg</code>.</p>

<pre><code>zonecfg -z base -f base.conf
</code></pre>

<p>Now we&rsquo;re ready to install the OS in the new zone. This may take
awhile as all the packages need to be downloaded.</p>

<pre><code>zoneadm -z base install
</code></pre>

<p>The default <code>nsswitch.conf(4)</code> does not use DNS for hosts. This is
fairly standard for Solaris/IllumOS. Also, the <code>resolv.conf(4)</code> is not
configured automatically, which is a departure from automagic Linux
distributions (and a thing I agree with).</p>

<pre><code>cp /etc/nsswitch.dns /etc/resolv.conf /zones/base/root/etc
</code></pre>

<p>OmniOS does not use
<a href="http://lists.omniti.com/pipermail/omnios-discuss/2012-December/000323.html"><code>sysidcfg</code></a>,
so the way to make the new zone boot up with an interface configured
for DHCP is to write out the <code>ipadm.conf</code> configuration for <code>ipadm</code>.
The following is <code>base.ipadm.conf</code> that I used, with the <code>vnicbase0</code>
VNIC created with <code>dladm</code> earlier.</p>

<pre><code>_ifname=vnicbase0;_family=2;
_ifname=vnicbase0;_family=26;
_ifname=vnicbase0;_aobjname=vnicbase0/v4;_dhcp=-1,no;
</code></pre>

<p>Copy this file to the zone.</p>

<pre><code>cp base.ipadm.conf /zones/base/root/etc/ipadm/ipadm.conf
</code></pre>

<p>Now, boot the zone.</p>

<pre><code>zoneadm -z base boot
</code></pre>

<p>Now you can log into the newly created zone and verify that things are
working, and do any further configuration required.</p>

<pre><code>zlogin -e ! base
</code></pre>

<p>I use <code>!</code> as the escape character because I&rsquo;m logging into my global
zone over SSH. This means you disconnect with <code>!.</code> instead of <code>~.</code>.</p>

<p>Once complete, the zone can be cloned.</p>

<h2>Clone a Zone</h2>

<p>I&rsquo;m going to clone the <code>base</code> zone to <code>clonebase</code>. Again, rename this
to whatever you like.</p>

<p>First, a zone must be halted before it can be cloned.</p>

<pre><code>zoneadm -z base halt
</code></pre>

<p>Now, create a new VNIC for the zone.</p>

<pre><code>dladm create-vnic -l nge1 clonebase
</code></pre>

<p>Read the <code>base</code> zone&rsquo;s configuration, and replace <code>base</code> with
<code>clonebase</code>.</p>

<pre><code>zonecfg -z base export | sed 's/base/clonebase/g' | tee clonebase.conf
</code></pre>

<p>Then, create the new zone configuration, and clone the base zone.</p>

<pre><code>zonecfg -z clonebase -f clonebase.conf
zoneadm -z clonebase clone base
</code></pre>

<p>Again, ensure that the network configuration to use DNS is available.</p>

<pre><code>cp /etc/nsswitch.dns /etc/resolv.conf /zones/clonebase/root/etc
</code></pre>

<p>Create the <code>ipadm.conf</code> config for the new zone. I named it <code>clonebase.ipadm.conf</code></p>

<pre><code>sed 's/base/clonebase/g' base.ipadm.conf &gt; clonebase.ipadm.conf
</code></pre>

<p>Now copy this to the zone.</p>

<pre><code>cp clonebase.ipadm.conf /zones/clonebase/root/etc/ipadm/ipadm.conf
</code></pre>

<p>Finally, boot the new zone.</p>

<pre><code>zoneadm -z clonebase boot
</code></pre>

<p>Login and verify the new zone.</p>

<pre><code>zlogin -e ! clonebase
</code></pre>

<h2>Cleaning Up</h2>

<p>Use the following to clean up the zone when it&rsquo;s not needed anymore.</p>

<pre><code>zone=clonebase
zoneadm -z $zone halt
zoneadm -z $zone uninstall -F
zonecfg -z $zone delete -F
</code></pre>

<h2>Sans Prose</h2>

<p><a href="https://gist.github.com/jtimberman/5848129">This gist</a> contains all
the things I did above minus the prose.</p>

<h2>What&rsquo;s Next?</h2>

<p>I have a few goals in mind for this system. First of all, I want to
manage the zones with Chef, of course. Some of the functions of the
zones may be:</p>

<ul>
<li>IPS package repository</li>
<li>Omnibus build system for OmniOS</li>
<li>Adding OmniOS support to cookbooks</li>
</ul>


<p>I also want to facilitate plugins and the ecosystem around Chef for
IllumOS, including zone based knife, vagrant and test-kitchen plugins.</p>

<p>Finally, I plan to convert my Linux home-server to OmniOS. There are a
couple things I&rsquo;m running that will require Linux (namely
<a href="http://www.plexapp.com">Plex</a>), but fortunately,
<a href="http://omnios.omniti.com/wiki.php/VirtualMachinesKVM">OmniOS has KVM</a>
thanks to <a href="http://smartos.org">SmartOS</a>.</p>

<h2>References</h2>

<p>The following links were helpful in composing this post, and of course
for the reference material they contain.</p>

<ul>
<li><a href="http://zero-knowledge.org/post/74">http://zero-knowledge.org/post/74</a></li>
<li><a href="https://blogs.oracle.com/mandalika/entry/solaris_10_zone_creation_for">https://blogs.oracle.com/mandalika/entry/solaris_10_zone_creation_for</a></li>
<li><a href="http://www.oracle.com/technetwork/articles/servers-storage-admin/o11-092-s11-zones-intro-524494.html">http://www.oracle.com/technetwork/articles/servers-storage-admin/o11-092-s11-zones-intro-524494.html</a></li>
<li><a href="http://lists.omniti.com/pipermail/omnios-discuss/2012-December/000322.html">http://lists.omniti.com/pipermail/omnios-discuss/2012-December/000322.html</a></li>
<li><a href="http://lists.omniti.com/pipermail/omnios-discuss/2012-December/000323.html">http://lists.omniti.com/pipermail/omnios-discuss/2012-December/000323.html</a></li>
<li><a href="http://omnios.omniti.com/ticket.php/11">http://omnios.omniti.com/ticket.php/11</a> (related to above list post(s))</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Starting ChefSpec Example]]></title>
    <link href="http://jtimberman.housepub.org/blog/2013/05/09/starting-chefspec-example/"/>
    <updated>2013-05-09T21:10:00-06:00</updated>
    <id>http://jtimberman.housepub.org/blog/2013/05/09/starting-chefspec-example</id>
    <content type="html"><![CDATA[<p>This is a quick post to introduce what I&rsquo;m starting on testing with
<a href="http://acrmp.github.io/chefspec/">ChefSpec</a>. This is from Opscode&rsquo;s
Java cookbook. While the recipe tested is really trivial, it actually
has some nuances that require detailed testing.</p>

<p>First off, the whole thing is in
<a href="https://gist.github.com/jtimberman/5552182">this gist</a>. I&rsquo;m going to
break it down into sections below. The file is <code>spec/default_spec.rb</code>
in the java cookbook (not committed/pushed yet).</p>

<p>The chefspec gem is where all the magic comes from. You can read about
ChefSpec on <a href="http://acrmp.github.io/chefspec/">its home page</a>. You&rsquo;ll
need to install the gem, and from there, run <code>rspec</code> to run the tests.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;chefspec&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, we&rsquo;re going to describe the default recipe. We&rsquo;re using the
regular rspec &ldquo;let&rdquo; block to set up the runner to converge the recipe.
Then, because we know/assume that the openjdk recipe is the default,
we can say that this chef run should include the <code>java::openjdk</code> recipe.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="s1">&#39;java::default&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">let</span> <span class="p">(</span><span class="ss">:chef_run</span><span class="p">)</span> <span class="p">{</span> <span class="ss">ChefSpec</span><span class="p">:</span><span class="ss">:ChefRunner</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">converge</span><span class="p">(</span><span class="s1">&#39;java::default&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;should include the openjdk recipe by default&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">chef_run</span><span class="o">.</span><span class="n">should</span> <span class="n">include_recipe</span> <span class="s1">&#39;java::openjdk&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, this cookbook supports Windows. However, we have to set up the
runner with the correct platform and version (this comes from
<a href="https://github.com/customink/fauxhai">fauxhai</a>), and then set
attributes that are required for it to work.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">context</span> <span class="s1">&#39;windows&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">let</span><span class="p">(</span><span class="ss">:chef_run</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">runner</span> <span class="o">=</span> <span class="ss">ChefSpec</span><span class="p">:</span><span class="ss">:ChefRunner</span><span class="o">.</span><span class="n">new</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;platform&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;windows&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;version&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;2008R2&#39;</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>      <span class="n">runner</span><span class="o">.</span><span class="n">node</span><span class="o">.</span><span class="n">set</span><span class="o">[</span><span class="s1">&#39;java&#39;</span><span class="o">][</span><span class="s1">&#39;install_flavor&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;windows&#39;</span>
</span><span class='line'>      <span class="n">runner</span><span class="o">.</span><span class="n">node</span><span class="o">.</span><span class="n">set</span><span class="o">[</span><span class="s1">&#39;java&#39;</span><span class="o">][</span><span class="s1">&#39;windows&#39;</span><span class="o">][</span><span class="s1">&#39;url&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;http://example.com/windows-java.msi&#39;</span>
</span><span class='line'>      <span class="n">runner</span><span class="o">.</span><span class="n">converge</span><span class="p">(</span><span class="s1">&#39;java::default&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;should include the windows recipe&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">chef_run</span><span class="o">.</span><span class="n">should</span> <span class="n">include_recipe</span> <span class="s1">&#39;java::windows&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next are the contexts for other install flavors. The default recipe
will include the right recipe based on the flavor, which is set by an
attribute. So we set up an rspec context for each recipe, then set the
install flavor attribute, and test that the right recipe was included.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">context</span> <span class="s1">&#39;oracle&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">let</span><span class="p">(</span><span class="ss">:chef_run</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">runner</span> <span class="o">=</span> <span class="ss">ChefSpec</span><span class="p">:</span><span class="ss">:ChefRunner</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>      <span class="n">runner</span><span class="o">.</span><span class="n">node</span><span class="o">.</span><span class="n">set</span><span class="o">[</span><span class="s1">&#39;java&#39;</span><span class="o">][</span><span class="s1">&#39;install_flavor&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;oracle&#39;</span>
</span><span class='line'>      <span class="n">runner</span><span class="o">.</span><span class="n">converge</span><span class="p">(</span><span class="s1">&#39;java::default&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;should include the oracle recipe&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">chef_run</span><span class="o">.</span><span class="n">should</span> <span class="n">include_recipe</span> <span class="s1">&#39;java::oracle&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">context</span> <span class="s1">&#39;oracle_i386&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">let</span><span class="p">(</span><span class="ss">:chef_run</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">runner</span> <span class="o">=</span> <span class="ss">ChefSpec</span><span class="p">:</span><span class="ss">:ChefRunner</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>      <span class="n">runner</span><span class="o">.</span><span class="n">node</span><span class="o">.</span><span class="n">set</span><span class="o">[</span><span class="s1">&#39;java&#39;</span><span class="o">][</span><span class="s1">&#39;install_flavor&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;oracle_i386&#39;</span>
</span><span class='line'>      <span class="n">runner</span><span class="o">.</span><span class="n">converge</span><span class="p">(</span><span class="s1">&#39;java::default&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;should include the oracle_i386 recipe&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">chef_run</span><span class="o">.</span><span class="n">should</span> <span class="n">include_recipe</span> <span class="s1">&#39;java::oracle_i386&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, a recent addition to this cookbook is support for
<a href="http://tickets.opscode.com/browse/COOK-2897">IBM&rsquo;s Java</a>. In addition
to setting the install flavor, we must set the URL where the IBM Java
package is (see the README in the commit linked in that ticket for
detail), and we can see that the <code>ibm</code> recipe is in fact included.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">context</span> <span class="s1">&#39;ibm&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">let</span><span class="p">(</span><span class="ss">:chef_run</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">runner</span> <span class="o">=</span> <span class="ss">ChefSpec</span><span class="p">:</span><span class="ss">:ChefRunner</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>      <span class="n">runner</span><span class="o">.</span><span class="n">node</span><span class="o">.</span><span class="n">set</span><span class="o">[</span><span class="s1">&#39;java&#39;</span><span class="o">][</span><span class="s1">&#39;install_flavor&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;ibm&#39;</span>
</span><span class='line'>      <span class="n">runner</span><span class="o">.</span><span class="n">node</span><span class="o">.</span><span class="n">set</span><span class="o">[</span><span class="s1">&#39;java&#39;</span><span class="o">][</span><span class="s1">&#39;ibm&#39;</span><span class="o">][</span><span class="s1">&#39;url&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;http://example.com/ibm-java.bin&#39;</span>
</span><span class='line'>      <span class="n">runner</span><span class="o">.</span><span class="n">converge</span><span class="p">(</span><span class="s1">&#39;java::default&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;should include the ibm recipe&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">chef_run</span><span class="o">.</span><span class="n">should</span> <span class="n">include_recipe</span> <span class="s1">&#39;java::ibm&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is just the start of the testing for this cookbook. We&rsquo;ll need to
test each individual recipe. However as I&rsquo;ve not written that code
yet, I don&rsquo;t have examples. Stay tuned!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test Kitchen and Jenkins]]></title>
    <link href="http://jtimberman.housepub.org/blog/2013/05/08/test-kitchen-and-jenkins/"/>
    <updated>2013-05-08T23:53:00-06:00</updated>
    <id>http://jtimberman.housepub.org/blog/2013/05/08/test-kitchen-and-jenkins</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been working more with test-kitchen 1.0 alpha lately. The most
recent thing I&rsquo;ve done is set up a Jenkins build server to run
test-kitchen on cookbooks. This post will describe how I did this for
my own environment, and how you can use my new test-kitchen cookbook
in yours&hellip; if you&rsquo;re using Jenkins, anyway.</p>

<p>This is all powered by a relatively simple cookbook, and some
click-click-clicking in the Jenkins UI. I&rsquo;ll walk through what I did
to set up my Jenkins system.</p>

<p>First, I started with Debian 7.0 (stable, released this past weekend).
I installed the OS on it, and then bootstrapped with Chef. The initial
test was to make sure everything installed correctly, and the commands
were functioning. This was done in a VM, and is now handled by
test-kitchen itself (how meta!) in the cookbook, kitchen-jenkins.</p>

<p>The cookbook, <a href="http://ckbk.it/kitchen-jenkins">kitchen-jenkins</a> is
available on the Chef Community site. I started with a recipe, but
extracted it to a cookbook to make it easier to share with you all.
This is essentially a site cookbook that I use to customize my Jenkins
installation so I can run test-kitchen builds.</p>

<p>I apply the recipe with a role, because I love the roles primitive in
Chef :&ndash;). Here is the role I&rsquo;m using:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;jenkins&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;description&quot;</span><span class="o">:</span> <span class="s2">&quot;Jenkins Build Server&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;run_list&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;recipe[kitchen-jenkins]&quot;</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>  <span class="s2">&quot;default_attributes&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;jenkins&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;server&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;home&quot;</span><span class="o">:</span> <span class="s2">&quot;/var/lib/jenkins&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;plugins&quot;</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;git-client&quot;</span><span class="p">,</span> <span class="s2">&quot;git&quot;</span><span class="p">],</span>
</span><span class='line'>        <span class="s2">&quot;version&quot;</span><span class="o">:</span> <span class="s2">&quot;1.511&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;war_checksum&quot;</span><span class="o">:</span> <span class="s2">&quot;7e676062231f6b80b60e53dc982eb89c36759bdd2da7f82ad8b35a002a36da9a&quot;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;json_class&quot;</span><span class="o">:</span> <span class="s2">&quot;Chef::Role&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;chef_type&quot;</span><span class="o">:</span> <span class="s2">&quot;role&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The run list is only slightly different here than my actual role, I
have a few other things in the run list, which are other site-specific
recipes. Don&rsquo;t worry about those now. The jenkins attributes are set
to ensure the right plugins I need are available, and the right
version of jenkins is installed.</p>

<p>(I&rsquo;m going to leave out the details such as uploading cookbooks and
roles, if you&rsquo;re interested in test-kitchen, I&rsquo;ll assume you&rsquo;ve got
that covered :&ndash;).)</p>

<p>Once Chef completes on the Jenkins node, I can reach the Jenkins UI,
conveniently enough, via &ldquo;<a href="http://jenkins:8080">http://jenkins:8080</a>&rdquo; (because I&rsquo;ve made a
DNS entry, of course). The next release of the Jenkins cookbook will
have a resource for managing jobs, but for now I&rsquo;m just going to
create them in the webui.</p>

<p>For this example, I want to have two kinds of cookbook testing jobs.
The first, is to simply run foodcritic and fail on any correctness
matches. Second, I want to actually run test-kitchen.</p>

<p>A foodcritic job is simple:</p>

<ol>
<li>New job &ndash;> Build a free-style software project
&ldquo;foodcritic-COOKBOOK&rdquo;.</li>
<li>Source Code Management &ndash;> Git, supply the repository and the master
branch.</li>
<li>Set a build trigger to Poll SCM every 5 minutes, once an hour,
whenever you like.</li>
<li>Add a build step to execute a shell, &ldquo;foodcritic . -f correctness&rdquo;</li>
</ol>


<p>I created a view for foodcritic jobs, and added them all to the view
for easy organizing.</p>

<p>Next, I create a test-kitchen job:</p>

<ol>
<li>New job &ndash;> Copy existing job &ldquo;foodcritic-COOKBOOK&rdquo;, name the new
job &ldquo;test-COOKBOOK&rdquo;.</li>
<li>Uncheck Poll SCM, check &ldquo;Build after other projects are built&rdquo; and
enter &ldquo;foodcritic-COOKBOOK&rdquo;.</li>
<li>Replace the foodcritic command in the build shell command with
&ldquo;kitchen test&rdquo;.</li>
</ol>


<p>Now, the test kitchen test will only run if the foodcritic build
succeeds. If the cookbook has any correctness lint errors, then the
foodcritic build fails, and the kitchen build won&rsquo;t run. This will
help conserve resources.</p>

<p>Hopefully the <code>kitchen-jenkins</code> cookbook is helpful and this blog post
will give you some ideas how to go about adding cookbook tests to your
CI system, even if it&rsquo;s not Jenkins.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TDD Cookbook Ticket]]></title>
    <link href="http://jtimberman.housepub.org/blog/2013/05/03/tdd-cookbook-ticket/"/>
    <updated>2013-05-03T14:36:00-06:00</updated>
    <id>http://jtimberman.housepub.org/blog/2013/05/03/tdd-cookbook-ticket</id>
    <content type="html"><![CDATA[<p>This post will briefly describe how I did a TDD update to Opscode&rsquo;s
<a href="http://ckbk.it/runit">runit</a> to resolve an
<a href="https://tickets.opscode.com/browse/COOK-2867">issue reported last night</a>.</p>

<p>First, the issue manifests itself only on Debian systems. The runit
cookbook&rsquo;s <code>runit_service</code> provider will write an
<a href="http://tickets.opscode.com/browse/COOK-1576">LSB init.d script</a> on
Debian, rather than symlinking to <code>/usr/bin/sv</code>. The problem raised in
the new ticket is that the template will follow the link and write to
<code>/usr/bin/sv</code>. This is bad, as it will end up in a forkbomb as
runsvdir attempts to restart sv on
<a href="http://drupal.org/files/x-all-the-things-template.png">all the things</a>.
Oops! Sorry about that. Let&rsquo;s get it fixed, and practice some TDD.</p>

<p>The runit cookbook includes support for test-kitchen, though I did
need to
<a href="https://github.com/opscode-cookbooks/runit/commit/8d2e0fcb9d6becf99c0d30694164e57d59fb667b">update it</a>
for this effort. Part of this change was adding a box for Debian in
the <code>.kitchen.yml</code>. I set about resolving this with TDD in mind.</p>

<p>First, the runit cookbook includes a couple
<a href="https://github.com/opscode-cookbooks/runit/tree/master/test/cookbooks">&ldquo;test&rdquo; cookbooks</a>
to facilitate setting up the system with the <code>runit_service</code> resource
so the outcome can be tested to ensure the behavior is correct. I
started by adding a &ldquo;failing test&rdquo; in the <code>runit_test::service</code>
recipe, meaning a link resource, and a <code>runit_service</code> resource that
would overwrite <code>/usr/bin/sv</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">link</span> <span class="s2">&quot;/etc/init.d/cook-2867&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">to</span> <span class="s2">&quot;/usr/bin/sv&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">runit_service</span> <span class="s2">&quot;cook-2867&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">default_logger</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then I ran <code>kitchen test</code> on the Debian box. As expected, the link was
created, and then the runit service was configured. The service&rsquo;s
provider will wait until the service is up. Since we&rsquo;ve destroyed the
sv binary, that will never happen, so I destroyed it. I manually
confirmed the behavior too, to make sure I wasn&rsquo;t seeing something
weird. Due to its very nature, this is <em>really</em> hard to test for
automatically, but it will happen consistently.</p>

<p>Next, I had to write the code to implement the fix for this bug.
Essentially, this means checking if the <code>/etc/init.d/cook-2867</code> file
is a symbolink link, and removing it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">initfile</span> <span class="o">=</span> <span class="o">::</span><span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span> <span class="s1">&#39;/etc&#39;</span><span class="p">,</span> <span class="s1">&#39;init.d&#39;</span><span class="p">,</span> <span class="n">new_resource</span><span class="o">.</span><span class="n">service_name</span><span class="p">)</span>
</span><span class='line'><span class="o">::</span><span class="no">File</span><span class="o">.</span><span class="n">unlink</span><span class="p">(</span><span class="n">initfile</span><span class="p">)</span> <span class="k">if</span> <span class="o">::</span><span class="no">File</span><span class="o">.</span><span class="n">symlink?</span><span class="p">(</span><span class="n">initfile</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Simple enough. Next I tested again by destroying the existing
environment and rerunning it from scratch. This takes some time, but
it verifies that everything is working properly. Here&rsquo;s the output on
Debian:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">INFO</span><span class="p">:</span> <span class="no">Processing</span> <span class="n">link</span><span class="o">[</span><span class="sr">/etc/ini</span><span class="n">t</span><span class="o">.</span><span class="n">d</span><span class="o">/</span><span class="n">cook</span><span class="o">-</span><span class="mi">2867</span><span class="o">]</span> <span class="n">action</span> <span class="n">create</span> <span class="p">(</span><span class="n">runit_test</span><span class="o">::</span><span class="n">service</span> <span class="n">line</span> <span class="mi">147</span><span class="p">)</span>
</span><span class='line'><span class="ss">INFO</span><span class="p">:</span> <span class="n">link</span><span class="o">[</span><span class="sr">/etc/ini</span><span class="n">t</span><span class="o">.</span><span class="n">d</span><span class="o">/</span><span class="n">cook</span><span class="o">-</span><span class="mi">2867</span><span class="o">]</span> <span class="n">created</span>
</span><span class='line'><span class="ss">INFO</span><span class="p">:</span> <span class="no">Processing</span> <span class="n">service</span><span class="o">[</span><span class="n">cook</span><span class="o">-</span><span class="mi">2867</span><span class="o">]</span> <span class="n">action</span> <span class="n">nothing</span> <span class="p">(</span><span class="n">dynamically</span> <span class="n">defined</span><span class="p">)</span>
</span><span class='line'><span class="ss">INFO</span><span class="p">:</span> <span class="no">Processing</span> <span class="n">runit_service</span><span class="o">[</span><span class="n">cook</span><span class="o">-</span><span class="mi">2867</span><span class="o">]</span> <span class="n">action</span> <span class="n">enable</span> <span class="p">(</span><span class="n">runit_test</span><span class="o">::</span><span class="n">service</span> <span class="n">line</span> <span class="mi">151</span><span class="p">)</span>
</span><span class='line'><span class="ss">INFO</span><span class="p">:</span> <span class="no">Processing</span> <span class="n">directory</span><span class="o">[</span><span class="sr">/etc/s</span><span class="n">v</span><span class="o">/</span><span class="n">cook</span><span class="o">-</span><span class="mi">2867</span><span class="o">]</span> <span class="n">action</span> <span class="n">create</span> <span class="p">(</span><span class="n">dynamically</span> <span class="n">defined</span><span class="p">)</span>
</span><span class='line'><span class="ss">INFO</span><span class="p">:</span> <span class="no">Processing</span> <span class="n">template</span><span class="o">[</span><span class="sr">/etc/s</span><span class="n">v</span><span class="o">/</span><span class="n">cook</span><span class="o">-</span><span class="mi">2867</span><span class="o">/</span><span class="n">run</span><span class="o">]</span> <span class="n">action</span> <span class="n">create</span> <span class="p">(</span><span class="n">dynamically</span> <span class="n">defined</span><span class="p">)</span>
</span><span class='line'><span class="ss">INFO</span><span class="p">:</span> <span class="no">Processing</span> <span class="n">directory</span><span class="o">[</span><span class="sr">/etc/s</span><span class="n">v</span><span class="o">/</span><span class="n">cook</span><span class="o">-</span><span class="mi">2867</span><span class="o">/</span><span class="n">log</span><span class="o">]</span> <span class="n">action</span> <span class="n">create</span> <span class="p">(</span><span class="n">dynamically</span> <span class="n">defined</span><span class="p">)</span>
</span><span class='line'><span class="ss">INFO</span><span class="p">:</span> <span class="no">Processing</span> <span class="n">directory</span><span class="o">[</span><span class="sr">/etc/s</span><span class="n">v</span><span class="o">/</span><span class="n">cook</span><span class="o">-</span><span class="mi">2867</span><span class="o">/</span><span class="n">log</span><span class="o">/</span><span class="n">main</span><span class="o">]</span> <span class="n">action</span> <span class="n">create</span> <span class="p">(</span><span class="n">dynamically</span> <span class="n">defined</span><span class="p">)</span>
</span><span class='line'><span class="ss">INFO</span><span class="p">:</span> <span class="no">Processing</span> <span class="n">directory</span><span class="o">[</span><span class="sr">/var/</span><span class="n">log</span><span class="o">/</span><span class="n">cook</span><span class="o">-</span><span class="mi">2867</span><span class="o">]</span> <span class="n">action</span> <span class="n">create</span> <span class="p">(</span><span class="n">dynamically</span> <span class="n">defined</span><span class="p">)</span>
</span><span class='line'><span class="ss">INFO</span><span class="p">:</span> <span class="no">Processing</span> <span class="n">file</span><span class="o">[</span><span class="sr">/etc/s</span><span class="n">v</span><span class="o">/</span><span class="n">cook</span><span class="o">-</span><span class="mi">2867</span><span class="o">/</span><span class="n">log</span><span class="o">/</span><span class="n">run</span><span class="o">]</span> <span class="n">action</span> <span class="n">create</span> <span class="p">(</span><span class="n">dynamically</span> <span class="n">defined</span><span class="p">)</span>
</span><span class='line'><span class="ss">INFO</span><span class="p">:</span> <span class="no">Processing</span> <span class="n">template</span><span class="o">[</span><span class="sr">/etc/ini</span><span class="n">t</span><span class="o">.</span><span class="n">d</span><span class="o">/</span><span class="n">cook</span><span class="o">-</span><span class="mi">2867</span><span class="o">]</span> <span class="n">action</span> <span class="n">create</span> <span class="p">(</span><span class="n">dynamically</span> <span class="n">defined</span><span class="p">)</span>
</span><span class='line'><span class="ss">INFO</span><span class="p">:</span> <span class="n">template</span><span class="o">[</span><span class="sr">/etc/ini</span><span class="n">t</span><span class="o">.</span><span class="n">d</span><span class="o">/</span><span class="n">cook</span><span class="o">-</span><span class="mi">2867</span><span class="o">]</span> <span class="n">updated</span> <span class="n">content</span>
</span><span class='line'><span class="ss">INFO</span><span class="p">:</span> <span class="n">template</span><span class="o">[</span><span class="sr">/etc/ini</span><span class="n">t</span><span class="o">.</span><span class="n">d</span><span class="o">/</span><span class="n">cook</span><span class="o">-</span><span class="mi">2867</span><span class="o">]</span> <span class="n">owner</span> <span class="n">changed</span> <span class="n">to</span> <span class="mi">0</span>
</span><span class='line'><span class="ss">INFO</span><span class="p">:</span> <span class="n">template</span><span class="o">[</span><span class="sr">/etc/ini</span><span class="n">t</span><span class="o">.</span><span class="n">d</span><span class="o">/</span><span class="n">cook</span><span class="o">-</span><span class="mi">2867</span><span class="o">]</span> <span class="n">group</span> <span class="n">changed</span> <span class="n">to</span> <span class="mi">0</span>
</span><span class='line'><span class="ss">INFO</span><span class="p">:</span> <span class="n">template</span><span class="o">[</span><span class="sr">/etc/ini</span><span class="n">t</span><span class="o">.</span><span class="n">d</span><span class="o">/</span><span class="n">cook</span><span class="o">-</span><span class="mi">2867</span><span class="o">]</span> <span class="n">mode</span> <span class="n">changed</span> <span class="n">to</span> <span class="mi">755</span>
</span><span class='line'><span class="ss">INFO</span><span class="p">:</span> <span class="n">runit_service</span><span class="o">[</span><span class="n">cook</span><span class="o">-</span><span class="mi">2867</span><span class="o">]</span> <span class="n">configured</span>
</span><span class='line'><span class="ss">INFO</span><span class="p">:</span> <span class="no">Chef</span> <span class="no">Run</span> <span class="n">complete</span> <span class="k">in</span> <span class="mi">7</span><span class="o">.</span><span class="mi">267132764</span> <span class="n">seconds</span>
</span><span class='line'><span class="ss">INFO</span><span class="p">:</span> <span class="no">Running</span> <span class="n">report</span> <span class="n">handlers</span>
</span></code></pre></td></tr></table></div></figure>


<p>I didn&rsquo;t feel I needed a specific test for this in minitest-chef,
because it wouldn&rsquo;t have finished converging (earlier behavior I saw
in the &ldquo;failing&rdquo; test).</p>

<p>If you&rsquo;re contributing to cookbooks, and they have support for
test-kitchen, it&rsquo;s awesome if you can open a bug report with a failing
test. In this case, it was fairly easy to reproduce the bug.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Anatomy of a Test Kitchen 1.0 Cookbook (Part 2)]]></title>
    <link href="http://jtimberman.housepub.org/blog/2013/03/19/anatomy-of-a-test-kitchen-1-dot-0-cookbook-part-2/"/>
    <updated>2013-03-19T09:28:00-06:00</updated>
    <id>http://jtimberman.housepub.org/blog/2013/03/19/anatomy-of-a-test-kitchen-1-dot-0-cookbook-part-2</id>
    <content type="html"><![CDATA[<p><strong>DISCLAIMER</strong> Test Kitchen 1.0 is still in <em>alpha</em> at the time of
  this post.</p>

<p><strong>Update</strong> We&rsquo;re no longer required to use bundler, and in fact
  recommend installing the required RubyGems in your globalRuby
  environment (#3 below).</p>

<p><strong>Update</strong> The log output from the various kitchen commands is not
  updated with the latest and greatest. Play along at home, it&rsquo;ll be
  okay :&ndash;).</p>

<p>This is a continuation from <a href="http://jtimberman.housepub.org/blog/2013/03/19/anatomy-of-a-test-kitchen-1-dot-0-cookbook-part-1/">part 1</a></p>

<p>In order to run the tests then, we need a few things on our machine:</p>

<ol>
<li>VirtualBox and Vagrant (1.1+)</li>
<li>A compiler toolchain with XML/XSLT development headers (for building Gem dependencies)</li>
<li>A sane, working Ruby environment (Ruby 1.9.3 or greater)</li>
<li>Git</li>
</ol>


<p>It is outside the scope of this post to cover how to get all those
installed.</p>

<p>Once those are installed:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% vagrant plugin install vagrant-berkshelf
</span><span class='line'>% gem install berkshelf
</span><span class='line'>% gem install test-kitchen --pre
</span><span class='line'>% gem install kitchen-vagrant</span></code></pre></td></tr></table></div></figure>


<p>Test Kitchen combines the suite (default) with the platform names
(e.g., ubuntu-12.04). To run all the suites on all platforms, simply do:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% kitchen test</span></code></pre></td></tr></table></div></figure>


<p>This will take awhile, especially if you don&rsquo;t already have the
Vagrant boxes on your system, as it will download each one. To make
this faster, we&rsquo;ll just run Ubuntu 12.04:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% kitchen test default.*1204</span></code></pre></td></tr></table></div></figure>


<p>Test Kitchen 1.0 can take a regular expression for the instances to
test. This will match the box <code>default-ubuntu-12.04</code>. I could also
just say <code>12</code> as that will match the single entry in my kitchen list
(above).</p>

<p>It will take a few minutes to run Test Kitchen. Those familiar with
Chef know that if it encounters an unhandled exception, it exits with
a non-zero return code. This is important, because we know at the end
of a successful run, Chef did the right thing, assuming our recipe is
the right thing :&ndash;).</p>

<p>To recap the <a href="http://jtimberman.housepub.org/blog/2013/03/19/anatomy-of-a-test-kitchen-1-dot-0-cookbook-part-1/">previous post</a>, we have a run list like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>["recipe[apt]", "recipe[minitest-handler]", "recipe[bluepill_test]"]</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s break down the output of our successful run. I&rsquo;ll show the
output first, and explain it after:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Starting Kitchen
</span><span class='line'>Cleaning up any prior instances of &lt;default-ubuntu-1204&gt;
</span><span class='line'>Destroying &lt;default-ubuntu-1204&gt;
</span><span class='line'>Finished destroying &lt;default-ubuntu-1204&gt; (0m0.00s).
</span><span class='line'>Testing &lt;default-ubuntu-1204&gt;
</span><span class='line'>Creating &lt;default-ubuntu-1204&gt;</span></code></pre></td></tr></table></div></figure>


<p>This is basic setup to ensure that &ldquo;The Kitchen&rdquo; is clean beforehand
and we don&rsquo;t have existing state interfering with the run.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[vagrant command] BEGIN (vagrant up default-ubuntu-1204 --no-provision)
</span><span class='line'>[default-ubuntu-1204] Importing base box 'canonical-ubuntu-12.04'...
</span><span class='line'>[default-ubuntu-1204] Matching MAC address for NAT networking...
</span><span class='line'>[default-ubuntu-1204] Clearing any previously set forwarded ports...
</span><span class='line'>[default-ubuntu-1204] Forwarding ports...
</span><span class='line'>[default-ubuntu-1204] -- 22 =&gt; 2222 (adapter 1)</span></code></pre></td></tr></table></div></figure>


<p>This will look familiar to Vagrant users, we&rsquo;re just getting some
basic setup from Vagrant initializing the box defined in the
<code>.kitchen.yml</code> (passed to the Vagrantfile by the kitchen-vagrant
plugin). This step does a <code>vagrant up --no-provision</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[Berkshelf] installing cookbooks...
</span><span class='line'>[Berkshelf] Using bluepill (2.2.2) at path: '/Users/jtimberman/Development/opscode/cookbooks/bluepill'
</span><span class='line'>[Berkshelf] Using apt (1.8.4)
</span><span class='line'>[Berkshelf] Using yum (2.0.0)
</span><span class='line'>[Berkshelf] Using minitest-handler (0.1.2)
</span><span class='line'>[Berkshelf] Using bluepill_test (0.0.1) at path: './test/cookbooks/bluepill_test'
</span><span class='line'>[Berkshelf] Using rsyslog (1.5.0)
</span><span class='line'>[Berkshelf] Using chef_handler (1.1.0)</span></code></pre></td></tr></table></div></figure>


<p>Remember from the <a href="http://jtimberman.housepub.org/blog/2013/03/19/anatomy-of-a-test-kitchen-1-dot-0-cookbook-part-1/">previous post</a> that we&rsquo;re using Berkshelf? This is
the integration with Vagrant that ensures that the cookbooks are
available. The first four, <code>apt</code>, <code>yum</code>, <code>minitest-handler</code> and
bluepill_test are defined in the Berksfile. The next, <code>rsyslog</code> is a
dependency of the <code>bluepill</code> cookbook (for rsyslog integration), and the
last, <code>chef_handler</code> is a dependency of <code>minitest-handler</code>. Berkshelf
extracts the dependencies from the cookbook metadata of each cookbook
defined in the Berksfile.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[default-ubuntu-1204] Creating shared folders metadata...
</span><span class='line'>[default-ubuntu-1204] Clearing any previously set network interfaces...
</span><span class='line'>[default-ubuntu-1204] Running any VM customizations...
</span><span class='line'>[default-ubuntu-1204] Booting VM...
</span><span class='line'>[default-ubuntu-1204] Waiting for VM to boot. This can take a few minutes.
</span><span class='line'>[default-ubuntu-1204] VM booted and ready for use!
</span><span class='line'>[default-ubuntu-1204] Setting host name...
</span><span class='line'>[default-ubuntu-1204] Mounting shared folders...
</span><span class='line'>[default-ubuntu-1204] -- v-root: /vagrant
</span><span class='line'>[default-ubuntu-1204] -- v-csc-1: /tmp/vagrant-chef-1/chef-solo-1/cookbooks
</span><span class='line'>[vagrant command] END (0m48.76s)
</span><span class='line'>Vagrant instance &lt;default-ubuntu-1204&gt; created.
</span><span class='line'>Finished creating &lt;default-ubuntu-1204&gt; (0m53.12s).</span></code></pre></td></tr></table></div></figure>


<p>Again, this is familiar output to Vagrant users, where Vagrant is
making the cookbooks available to the instance.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Converging &lt;default-ubuntu-1204&gt;
</span><span class='line'>[vagrant command] BEGIN (vagrant ssh default-ubuntu-1204 --command 'should_update_chef() {\n...')
</span><span class='line'>Installing Chef Omnibus (11.4.0)
</span><span class='line'>Downloading Chef 11.4.0 for ubuntu...
</span><span class='line'>Installing Chef 11.4.0
</span><span class='line'>Selecting previously unselected package chef.
</span><span class='line'>g database ...        60513 files and directories currently installed.)
</span><span class='line'>Unpacking chef (from .../chef_11.4.0_amd64.deb) ...
</span><span class='line'>Setting up chef (11.4.0-1.ubuntu.11.04) ...
</span><span class='line'>Thank you for installing Chef!
</span><span class='line'>[vagrant command] END (0m34.85s)
</span><span class='line'>[vagrant command] BEGIN (vagrant provision default-ubuntu-1204)
</span><span class='line'>[Berkshelf] installing cookbooks...
</span><span class='line'>[Berkshelf] Using bluepill (2.2.2) at path: '/Users/jtimberman/Development/opscode/cookbooks/bluepill'
</span><span class='line'>[Berkshelf] Using apt (1.8.4)
</span><span class='line'>[Berkshelf] Using yum (2.0.0)
</span><span class='line'>[Berkshelf] Using minitest-handler (0.1.2)
</span><span class='line'>[Berkshelf] Using bluepill_test (0.0.1) at path: './test/cookbooks/bluepill_test'
</span><span class='line'>[Berkshelf] Using rsyslog (1.5.0)
</span><span class='line'>[Berkshelf] Using chef_handler (1.1.0)</span></code></pre></td></tr></table></div></figure>


<p>This part is interesting, in that we&rsquo;re going to install the Full
Stack Chef (Omnibus) package. This means it doesn&rsquo;t matter what the
underlying base box has installed, we get the right version of Chef.
This is defined in the <code>.kitchen.yml</code>. This is done through <code>vagrant
ssh</code> (second line). Then, Test Kitchen does <code>vagrant provision</code>. The
provisioning step is where Berkshelf happens, so we do see this happen
again (perhaps a bug?).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[default-ubuntu-1204] Running provisioner: Vagrant::Provisioners::ChefSolo...
</span><span class='line'>[default-ubuntu-1204] Generating chef JSON and uploading...
</span><span class='line'>[default-ubuntu-1204] Running chef-solo...
</span><span class='line'>INFO: *** Chef 11.4.0 ***
</span><span class='line'>INFO: Setting the run_list to ["recipe[apt]", "recipe[minitest-handler]", "recipe[bluepill_test]"] from JSON
</span><span class='line'>INFO: Run List is [recipe[apt], recipe[minitest-handler], recipe[bluepill_test]]
</span><span class='line'>INFO: Run List expands to [apt, minitest-handler, bluepill_test]
</span><span class='line'>INFO: Starting Chef Run for default-ubuntu-1204.vagrantup.com</span></code></pre></td></tr></table></div></figure>


<p>This is the start of the actual Chef run, using Chef Solo by Vagrant&rsquo;s
provisioner. Note that we have our suite&rsquo;s run list. I&rsquo;m going to skip
a lot of the Chef output because it isn&rsquo;t required. Note that a few
resources in the minitest&mdash;handler will report as failed, but they can
be ignored because it means that those tests were simply not implemented.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>INFO: Processing directory[/var/chef/minitest/bluepill_test] action create (minitest-handler::default line 50)
</span><span class='line'>INFO: directory[/var/chef/minitest/bluepill_test] created directory /var/chef/minitest/bluepill_test
</span><span class='line'>INFO: Processing cookbook_file[tests-bluepill_test-default] action create (minitest-handler::default line 53)
</span><span class='line'>INFO: cookbook_file[tests-bluepill_test-default] created file /var/chef/minitest/bluepill_test/default_test.rb
</span><span class='line'>INFO: Processing remote_directory[tests-support-bluepill_test-default] action create (minitest-handler::default line 60)
</span><span class='line'>INFO: remote_directory[tests-support-bluepill_test-default] created directory /var/chef/minitest/bluepill_test/support
</span><span class='line'>INFO: Processing cookbook_file[/var/chef/minitest/bluepill_test/support/helpers.rb] action create (dynamically defined)
</span><span class='line'>INFO: cookbook_file[/var/chef/minitest/bluepill_test/support/helpers.rb] mode changed to 644
</span><span class='line'>INFO: cookbook_file[/var/chef/minitest/bluepill_test/support/helpers.rb] created file /var/chef/minitest/bluepill_test/support/helpers.rb</span></code></pre></td></tr></table></div></figure>


<p>These are the relevant parts of the minitest-handler recipe, where it
has copied the tests from the <code>bluepill_test</code> cookbook into place.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>INFO: Processing gem_package[i18n] action install (bluepill::default line 20)
</span><span class='line'>INFO: Processing gem_package[bluepill] action install (bluepill::default line 24)
</span><span class='line'>INFO: Processing directory[/etc/bluepill] action create (bluepill::default line 34)
</span><span class='line'>INFO: directory[/etc/bluepill] created directory /etc/bluepill
</span><span class='line'>INFO: directory[/etc/bluepill] owner changed to 0
</span><span class='line'>INFO: directory[/etc/bluepill] group changed to 0
</span><span class='line'>INFO: Processing directory[/var/run/bluepill] action create (bluepill::default line 34)
</span><span class='line'>INFO: directory[/var/run/bluepill] created directory /var/run/bluepill
</span><span class='line'>INFO: directory[/var/run/bluepill] owner changed to 0
</span><span class='line'>INFO: directory[/var/run/bluepill] group changed to 0
</span><span class='line'>INFO: Processing directory[/var/lib/bluepill] action create (bluepill::default line 34)
</span><span class='line'>INFO: directory[/var/lib/bluepill] created directory /var/lib/bluepill
</span><span class='line'>INFO: directory[/var/lib/bluepill] owner changed to 0
</span><span class='line'>INFO: directory[/var/lib/bluepill] group changed to 0
</span><span class='line'>INFO: Processing file[/var/log/bluepill.log] action create_if_missing (bluepill::default line 41)
</span><span class='line'>INFO: entered create
</span><span class='line'>INFO: file[/var/log/bluepill.log] owner changed to 0
</span><span class='line'>INFO: file[/var/log/bluepill.log] group changed to 0
</span><span class='line'>INFO: file[/var/log/bluepill.log] mode changed to 755
</span><span class='line'>INFO: file[/var/log/bluepill.log] created file /var/log/bluepill.log</span></code></pre></td></tr></table></div></figure>


<p>Recall from the <a href="http://jtimberman.housepub.org/blog/2013/03/19/anatomy-of-a-test-kitchen-1-dot-0-cookbook-part-1/">previous post</a> that the <code>bluepill_test</code> recipe includes
the <code>bluepill</code> recipe. This is the basic setup of bluepill.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>INFO: Processing package[nc] action install (bluepill_test::default line 4)
</span><span class='line'>INFO: Processing template[/etc/bluepill/test_app.pill] action create (bluepill_test::default line 16)
</span><span class='line'>INFO: template[/etc/bluepill/test_app.pill] updated content
</span><span class='line'>INFO: Processing bluepill_service[test_app] action enable (bluepill_test::default line 18)
</span><span class='line'>INFO: Processing bluepill_service[test_app] action load (bluepill_test::default line 18)
</span><span class='line'>INFO: Processing bluepill_service[test_app] action start (bluepill_test::default line 18)
</span><span class='line'>INFO: Processing link[/etc/init.d/test_app] action create (/tmp/vagrant-chef-1/chef-solo-1/cookbooks/bluepill/providers/service.rb line 30)
</span><span class='line'>INFO: link[/etc/init.d/test_app] created
</span><span class='line'>INFO: Chef Run complete in 81.099185824 seconds</span></code></pre></td></tr></table></div></figure>


<p>And this is the rest of the <code>bluepill_test</code> recipe. It sets up a test
service that will basically be a netcat process listening on a port.
Let&rsquo;s take a moment here and discuss what we have.</p>

<p>First, we have successfully converged the default recipe in the
<code>bluepill</code> cookbook via its inclusion in <code>bluepill_test</code>. This is
awesome, because we know the recipe works exactly as we defined it,
since Chef resources are declarative, and Chef exits if there&rsquo;s a
problem.</p>

<p>Second, we have successfully setup a service managed by bluepill
itself using the LWRP included in the <code>bluepill</code> cookbook,
<code>bluepill_service</code>. This means we know that the underlying provider
configured all the resources correctly.</p>

<p>At this point, we could say &ldquo;Ship it!&rdquo; and release the cookbook,
knowing it will do what we require. However, this may be disingenuous
because we don&rsquo;t know if the behavior of the system after all this
runs is actually correct. Therefore we look to the next segment of
output from Chef, from minitest:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>INFO: Running report handlers
</span><span class='line'>Run options: -v --seed 38794
</span><span class='line'>\# Running tests:
</span><span class='line'>recipe::bluepill_test::default#test_0001_the_default_log_file_must_exist_cook_1295_ =
</span><span class='line'>0.00 s = .
</span><span class='line'>recipe::bluepill_test::default::create a bluepill configuration file#test_0001_anonymous =
</span><span class='line'>0.00 s = .
</span><span class='line'>recipe::bluepill_test::default::create a bluepill configuration file#test_0002_must_be_valid_ruby =
</span><span class='line'>0.06 s = .
</span><span class='line'>recipe::bluepill_test::default::runs the application as a service#test_0001_anonymous =
</span><span class='line'>0.72 s = .
</span><span class='line'>recipe::bluepill_test::default::runs the application as a service#test_0002_anonymous =
</span><span class='line'>0.71 s = .
</span><span class='line'>recipe::bluepill_test::default::spawn a netcat tcp client repeatedly#test_0001_should_receive_a_tcp_connection_from_netcat =
</span><span class='line'>2.24 s = .
</span><span class='line'>Finished tests in 3.746002s, 1.6017 tests/s, 1.8687 assertions/s.
</span><span class='line'>6 tests, 7 assertions, 0 failures, 0 errors, 0 skips</span></code></pre></td></tr></table></div></figure>


<p>This is performed by the minitest-handler, which runs the tests copied
from the <code>bluepill_test</code> cookbook before. It&rsquo;s outside the scope of
this post to describe how to write minitest-chef tests, but we can
talk about the output.</p>

<p>We have 6 separate tests that perform 7 assertions, and they all
passed. The tests are asserting:</p>

<ol>
<li>The log file is created, and by the full name of the test, this is
to check for a regression from
<a href="http://tickets.opscode.com/browse/COOK-1295">COOK-1295</a>.</li>
<li>The <code>.pill</code> config file for the service must exist and be valid
Ruby.</li>
<li>The bluepill service must actually be enabled and running, thereby
testing that those actions in the LWRP work.</li>
<li>The running service, which listens on a TCP port, must be up and
available, thereby testing that bluepill started the service
correctly.</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[vagrant command] END (1m29.24s)
</span><span class='line'>Finished converging &lt;default-ubuntu-1204&gt; (2m15.45s).
</span><span class='line'>Setting up &lt;default-ubuntu-1204&gt;
</span><span class='line'>Finished setting up &lt;default-ubuntu-1204&gt; (0m0.00s).
</span><span class='line'>Verifying &lt;default-ubuntu-1204&gt;
</span><span class='line'>Finished verifying &lt;default-ubuntu-1204&gt; (0m0.00s).
</span><span class='line'>Destroying &lt;default-ubuntu-1204&gt;
</span><span class='line'>[vagrant command] BEGIN (vagrant destroy default-ubuntu-1204 -f)
</span><span class='line'>[default-ubuntu-1204] Forcing shutdown of VM...
</span><span class='line'>[Berkshelf] cleaning Vagrant's shelf
</span><span class='line'>[default-ubuntu-1204] Destroying VM and associated drives...
</span><span class='line'>[vagrant command] END (0m3.68s)
</span><span class='line'>Vagrant instance &lt;default-ubuntu-1204&gt; destroyed.
</span><span class='line'>Finished destroying &lt;default-ubuntu-1204&gt; (0m4.04s).
</span><span class='line'>Finished testing &lt;default-ubuntu-1204&gt; (3m12.62s).
</span><span class='line'>Kitchen is finished. (3m12.62s)</span></code></pre></td></tr></table></div></figure>


<p>This output shows Test Kitchen cleaning up after itself. We destroy
the Vagrant instance on a successful convergence and test run in Chef,
because further investigation is not required. If the test failed for
some reason, Test Kitchen leaves it running so you can log into the
machine and poke around to find out what went wrong. Then simply
correct the required part of the cookbook (recipes, tests, etc) and
rerun Test Kitchen. For example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% bundle exec kitchen login 1204
</span><span class='line'>vagrant@ubuntu-1204$ ... run some commands
</span><span class='line'>vagrant@ubuntu-1204$ ^D
</span><span class='line'>% bundle exec kitchen converge 1204</span></code></pre></td></tr></table></div></figure>


<p>My goal with these posts is to get some information out for folks to
consider when examining Test Kitchen 1.0 alpha for their own projects.
There&rsquo;s a lot more to Test Kitchen, such as managing non-cookbook
projects, or even using other kinds of tests. We&rsquo;ll have more
documentation and guides as we get the 1.0 release out.</p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Anatomy of a Test Kitchen 1.0 Cookbook (Part 1)]]></title>
    <link href="http://jtimberman.housepub.org/blog/2013/03/19/anatomy-of-a-test-kitchen-1-dot-0-cookbook-part-1/"/>
    <updated>2013-03-19T09:28:00-06:00</updated>
    <id>http://jtimberman.housepub.org/blog/2013/03/19/anatomy-of-a-test-kitchen-1-dot-0-cookbook-part-1</id>
    <content type="html"><![CDATA[<p><strong>DISCLAIMER</strong> Test Kitchen 1.0 is still in <em>alpha</em> at the time of
  this post.</p>

<p><strong>Update</strong> Remove Gemfile and Vagrantfile</p>

<p>Let&rsquo;s take a look at the anatomy of a cookbook set up with
test-kitchen 1.0-alpha.</p>

<p><strong>Note</strong> It is outside the scope of this post to discuss how to write
  minitest-chef tests or &ldquo;test cookbook&rdquo; recipes. Use the cookbook
  described below as an example to get ideas for writing your own.</p>

<p>This is the full directory tree of Opscode&rsquo;s
&ldquo;<a href="http://ckbk.it/bluepill">bluepill</a>&rdquo; cookbook:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>├── .kitchen.yml
</span><span class='line'>├── Berksfile
</span><span class='line'>├── CHANGELOG.md
</span><span class='line'>├── CONTRIBUTING
</span><span class='line'>├── LICENSE
</span><span class='line'>├── README.md
</span><span class='line'>├── TESTING.md
</span><span class='line'>├── attributes
</span><span class='line'>│   └── default.rb
</span><span class='line'>├── metadata.rb
</span><span class='line'>├── providers
</span><span class='line'>│   └── service.rb
</span><span class='line'>├── recipes
</span><span class='line'>│   ├── default.rb
</span><span class='line'>│   └── rsyslog.rb
</span><span class='line'>├── resources
</span><span class='line'>│   └── service.rb
</span><span class='line'>├── templates
</span><span class='line'>│   └── default
</span><span class='line'>│       ├── bluepill_init.fedora.erb
</span><span class='line'>│       ├── bluepill_init.freebsd.erb
</span><span class='line'>│       ├── bluepill_init.rhel.erb
</span><span class='line'>│       └── bluepill_rsyslog.conf.erb
</span><span class='line'>└── test
</span><span class='line'>    └── cookbooks
</span><span class='line'>        └── bluepill_test
</span><span class='line'>            ├── README.md
</span><span class='line'>            ├── attributes
</span><span class='line'>            │   └── default.rb
</span><span class='line'>            ├── files
</span><span class='line'>            │   └── default
</span><span class='line'>            │       └── tests
</span><span class='line'>            │           └── minitest
</span><span class='line'>            │               ├── default_test.rb
</span><span class='line'>            │               └── support
</span><span class='line'>            │                   └── helpers.rb
</span><span class='line'>            ├── metadata.rb
</span><span class='line'>            ├── recipes
</span><span class='line'>            │   └── default.rb
</span><span class='line'>            └── templates
</span><span class='line'>                └── default
</span><span class='line'>                    └── test_app.pill.erb</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;ll assume the reader is familiar with basic components of cookbooks
like &ldquo;recipes,&rdquo; &ldquo;templates,&rdquo; and the top-level documentation files, so
let&rsquo;s trim this down to just the areas of concern for Test Kitchen.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>├── .kitchen.yml
</span><span class='line'>├── Berksfile
</span><span class='line'>└── test
</span><span class='line'>    └── cookbooks
</span><span class='line'>        └── bluepill_test
</span><span class='line'>            ├── attributes
</span><span class='line'>            │   └── default.rb
</span><span class='line'>            ├── files
</span><span class='line'>            │   └── default
</span><span class='line'>            │       └── tests
</span><span class='line'>            │           └── minitest
</span><span class='line'>            │               ├── default_test.rb
</span><span class='line'>            │               └── support
</span><span class='line'>            │                   └── helpers.rb
</span><span class='line'>            ├── recipes
</span><span class='line'>            │   └── default.rb
</span><span class='line'>            └── templates
</span><span class='line'>                └── default
</span><span class='line'>                    └── test_app.pill.erb</span></code></pre></td></tr></table></div></figure>


<p>Note that this cookbook has a &ldquo;test&rdquo; cookbook. I&rsquo;ll get to that in a
minute.</p>

<p>First of all, we have the <code>.kitchen.yml</code>. This is the project
definition that describes what is required to run test kitchen itself.
This particular file tells Test Kitchen to bring up nodes of the
platforms we&rsquo;re testing with Vagrant, and defines the boxes with their
box names and URLs to download. You can view the full
<a href="https://github.com/opscode-cookbooks/bluepill/blob/master/.kitchen.yml"><code>.kitchen.yml</code> in the Git repo</a>.
For now, I&rsquo;m going to focus on the <code>suite</code> stanza in the
<code>.kitchen.yml</code>. This defines how Chef will run when Test Kitchen
brings up the Vagrant machine.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">default</span>
</span><span class='line'>  <span class="l-Scalar-Plain">run_list</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">recipe[minitest-handler]</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">recipe[bluepill_test]</span>
</span><span class='line'>  <span class="l-Scalar-Plain">attributes</span><span class="p-Indicator">:</span> <span class="p-Indicator">{</span><span class="nv">bluepill</span><span class="p-Indicator">:</span> <span class="p-Indicator">{</span> <span class="nv">bin</span><span class="p-Indicator">:</span> <span class="s">&quot;/opt/chef/embedded/bin/bluepill&quot;</span> <span class="p-Indicator">}</span> <span class="p-Indicator">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each platform has a recipe it will run with, in this case <code>apt</code> and
<code>yum</code>. Then the suite&rsquo;s run list is appended, so for example, the final run list of
the Ubuntu 12.04 node will be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="p-Indicator">[</span><span class="s">&quot;recipe[apt]&quot;</span><span class="p-Indicator">,</span> <span class="s">&quot;recipe[minitest-handler]&quot;</span><span class="p-Indicator">,</span> <span class="s">&quot;recipe[bluepill_test]&quot;</span><span class="p-Indicator">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>We have apt so the apt cache on the node is updated before Chef does
anything else. This is pretty typical so we put it in the default run
list of each Ubuntu box.</p>

<p>The <code>minitest-handler</code> recipe existing in the run list means that the
Minitest Chef Handler will be run at the end of the Chef run. In this
case, it will use the tests from the test cookbook, <code>bluepill_test</code>.</p>

<p>The bluepill cookbook itself does not depend on any of these
cookbooks. So how does Test Kitchen know where to get them? Enter the
next file in the list above, <code>Berksfile</code>. This informs
<a href="http://berkshelf.com">Berkshelf</a> which cookbooks to download. The
relevant excerpt from the Berksfile is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cookbook</span> <span class="s2">&quot;apt&quot;</span>
</span><span class='line'><span class="n">cookbook</span> <span class="s2">&quot;yum&quot;</span>
</span><span class='line'><span class="n">cookbook</span> <span class="s2">&quot;minitest-handler&quot;</span>
</span><span class='line'><span class="n">cookbook</span> <span class="s2">&quot;bluepill_test&quot;</span><span class="p">,</span> <span class="ss">:path</span> <span class="o">=&gt;</span> <span class="s2">&quot;./test/cookbooks/bluepill_test&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Based on the
<a href="https://github.com/opscode-cookbooks/bluepill/blob/master/Berksfile">Berksfile</a>,
it will download apt, yum, and minitest-handler from the Chef
Community site. It will also use the
<a href="https://github.com/opscode-cookbooks/bluepill/tree/master/test/cookbooks/bluepill_test">bluepill_test</a>
included in the bluepill cookbook. This is transparent to the user, as
I&rsquo;ll cover in a moment.</p>

<p>Test Kitchen&rsquo;s Vagrant driver plugin handles all the configuration of
Vagrant itself based on the entries in the <code>.kitchen.yml</code>. To get the
Berkshelf integration in the Vagrant boxes, we need to install the
vagrant-berkshelf plugin in Vagrant. Then, we automatically get
Berkshelf&rsquo;s Vagrant integration, meaning all the cookbooks defined in
the Berksfile are going to be available on the box we bring up.</p>

<p>Remember the test cookbook mentioned above? It&rsquo;s the next component.
The default <code>suite</code> in <code>.kitchen.yml</code> puts <code>bluepill_test</code> in the run
list. This particular recipe will include the <code>bluepill</code> default
recipe, then it sets up a test service using the <code>bluepill_service</code>
LWRP. This means that when the nodes brought up by Test Kitchen via
Vagrant converge, they&rsquo;ll have bluepill installed and set up, and then
a service running that we can test the final behavior. Since Chef will
exit with a non-zero return code if it encounters an exception, we
know that a successful run means everything is configured as defined
in the recipes, and we can run tests against the node.</p>

<p>The tests we&rsquo;ll run are written with the
<a href="https://github.com/calavera/minitest-chef-handler/">Minitest Chef Handler</a>.
These are defined in the test cookbook, <code>files/default/tests/minitest</code>
directory. The <code>minitest-handler</code> cookbook (also in the default suite
run list) will execute the
<a href="https://github.com/opscode-cookbooks/bluepill/blob/master/test/cookbooks/bluepill_test/files/default/tests/minitest/default_test.rb">default_test</a>
tests.</p>

<p>In the next post, we&rsquo;ll look at how to run Test Kitchen, and what all
the output means.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Last Check-in Time for Nodes]]></title>
    <link href="http://jtimberman.housepub.org/blog/2013/02/16/last-check-in-time-for-nodes/"/>
    <updated>2013-02-16T20:14:00-07:00</updated>
    <id>http://jtimberman.housepub.org/blog/2013/02/16/last-check-in-time-for-nodes</id>
    <content type="html"><![CDATA[<p>This one liner uses the knife exec sub-command to iterate over all the
node objects on the Chef Server, and print out their <code>ohai_time</code>
attribute in a human readable format.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>knife exec -E 'nodes.all {|n| puts "#{n.name} #{Time.at(n[:ohai_time])}"}'</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s break this up a little.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>knife exec -E</span></code></pre></td></tr></table></div></figure>


<p>The exec plugin for knife executes a script or the given string of
Ruby code in the same context as <code>chef-shell</code> (or <code>shef</code> in Chef 10
and earlier) if you start it up in it&rsquo;s &ldquo;main&rdquo; context. Since it is
knife, it will also use your <code>.chef/knife.rb</code> settings, so it knows
about your user, key and Chef Server.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nodes.all</span></code></pre></td></tr></table></div></figure>


<p>The <code>chef-shell</code> main context has helper methods to access the
corresponding endpoints in the Chef Server API. Clearly we&rsquo;re working
with &ldquo;nodes&rdquo; here, and the <code>#all</code> method returns all the node objects
from the Chef Server. This differs from search in that there&rsquo;s a
commit delay between the time when data is saved to the server, and
the data is indexed by Solr. This is usually a few seconds, but
depending on various factors like the hardware you&rsquo;re using, how many
nodes are converging, etc, it can take longer.</p>

<p>Anyway, we can pass a block to nodes.all and do something with each
node object. The example above is a oneliner, so let&rsquo;s make it more
readable.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">nodes</span><span class="o">.</span><span class="n">all</span> <span class="k">do</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">n</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">at</span><span class="p">(</span><span class="n">n</span><span class="o">[</span><span class="ss">:ohai_time</span><span class="o">]</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;re simply going to use <code>n</code> as the iterator for each node object,
and we&rsquo;ll print a string about the node. The <code>#{}</code>&rsquo;s in the string to
print with puts is Ruby string interpolation. That is, everything
inside the braces is a Ruby expression. First, the <code>Chef::Node</code> object
has a method, <code>#name</code>, that returns the node&rsquo;s name. This is usually
the FQDN, but depending on your configuration (<code>node_name</code> in
<code>/etc/chef/client.rb</code> or using the <code>-N</code> option for <code>chef-client</code>), it
could be something else. Then, we&rsquo;re going to use the node&rsquo;s
<code>ohai_time</code> attribute. Every time Chef runs and it gathers data about
the node with Ohai, it generates the <code>ohai_time</code> attribute, which is
the Unix epoch of the timestamp when Ohai ran. When Chef saves the
node data at the end of the run, we know approximately the last time
the node ran Chef. In this particular string, we&rsquo;re converting the
Unix epoch, like <code>1358962351.444405</code> to a human readable timestamp
like <code>2013-01-23 10:32:31 -0700</code>.</p>

<p>Of course, you can get similar data from the Chef Server by using
<code>knife status</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">knife</span> <span class="n">status</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>ohai_time</code> attribute will be displayed as a relative time, e.g.,
&ldquo;585 hours ago.&rdquo; It will include some more data about the nodes like IP&rsquo;s. This
uses Chef&rsquo;s search feature, so you can also pass in a query:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">knife</span> <span class="n">status</span> <span class="s2">&quot;role:webserver&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>knife exec</code> example is simple, but you can get a lot more data
about the nodes than what <code>knife status</code> reports.</p>

<p>In either case, <code>ohai_time</code> isn&rsquo;t 100% accurate, since it is generated
at the beginning of the run, and depending on what you&rsquo;re doing with
Chef on your systems, it can take a long time before the node data is
saved. However, it&rsquo;s close enough for many use cases.</p>

<p>If more detailed or completely accurate information about the Chef run
is required for your purposes, you should use a
<a href="http://docs.opscode.com/chef/essentials_handlers.html">report handler</a>,
which does have more data about the run available, including whether
the run was successful or not.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Chef 11 Server on CentOS 6]]></title>
    <link href="http://jtimberman.housepub.org/blog/2013/02/10/install-chef-11-server-on-centos-6/"/>
    <updated>2013-02-10T07:57:00-07:00</updated>
    <id>http://jtimberman.housepub.org/blog/2013/02/10/install-chef-11-server-on-centos-6</id>
    <content type="html"><![CDATA[<p>A few months ago, I posted briefly on
<a href="http://jtimberman.housepub.org/blog/2012/11/17/install-chef-10-server-on-centos/">how to install Chef 10 server on CentOS</a>.
This post revisits the process for Chef 11.</p>

<p>These steps were performed on a default CentOS 6.3 server install.</p>

<p>First, navigate to the
<a href="http://www.opscode.com/chef/install">Chef install page</a> to get the
package download URL. Use the form on the &ldquo;Chef Server&rdquo; tab to select
the appropriate drop-down items for your system.</p>

<p>Install the package from the given URL.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rpm -Uvh https://opscode-omnitruck-release.s3.amazonaws.com/el/6/x86_64/chef-server-11.0.4-1.el6.x86_64.rpm</span></code></pre></td></tr></table></div></figure>


<p>The package just puts the bits on disk (in <code>/opt/chef-server</code>). The
next step is to configure the Chef Server and start it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% chef-server-ctl reconfigure</span></code></pre></td></tr></table></div></figure>


<p>This runs the embedded <code>chef-solo</code> with the included cookbooks, and
sets up everything required &ndash; Erchef, RabbitMQ, PostgreSQL, etc.</p>

<p>Next, run the Opscode Pedant test suite. This will verify that
everything is working.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% chef-server-ctl test</span></code></pre></td></tr></table></div></figure>


<p>Copy the default admin user&rsquo;s key and the validator key to your local
workstation system that you have Chef <em>client</em> installed on, and
create a new user for yourself with knife. You&rsquo;ll need version 11.2.0.
The key files on the Chef Server are readable only by root.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>scp root@chef-server:/etc/chef-server/admin.pem .
</span><span class='line'>scp root@chef-server:/etc/chef-server/chef-validator.pem .</span></code></pre></td></tr></table></div></figure>


<p>Use <code>knife configure -i</code> to create an initial <code>~/.chef/knife.rb</code> and
new administrative API user for yourself. Use the FQDN of your newly
installed Chef Server, with HTTPS. The validation key needs to be
copied over from the Chef Server from
<code>/etc/chef-server/chef-validator.pem</code> to <code>~/.chef</code> to use it for
automatically bootstrapping nodes with <code>knife bootstrap</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% knife configure -i</span></code></pre></td></tr></table></div></figure>


<p>The <code>.chef/knife.rb</code> file should look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">log_level</span>                <span class="ss">:info</span>
</span><span class='line'><span class="n">log_location</span>             <span class="no">STDOUT</span>
</span><span class='line'><span class="n">node_name</span>                <span class="s1">&#39;jtimberman&#39;</span>
</span><span class='line'><span class="n">client_key</span>               <span class="s1">&#39;/home/jtimberman/.chef/jtimberman.pem&#39;</span>
</span><span class='line'><span class="n">validation_client_name</span>   <span class="s1">&#39;chef-validator&#39;</span>
</span><span class='line'><span class="n">validation_key</span>           <span class="s1">&#39;/home/jtimberman/.chef/chef-validator.pem&#39;</span>
</span><span class='line'><span class="n">chef_server_url</span>          <span class="s1">&#39;https://chef-server.example.com&#39;</span>
</span><span class='line'><span class="n">syntax_check_cache_path</span>  <span class="s1">&#39;/home/jtimberman/.chef/syntax_check_cache&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Your Chef Server is now ready to use. Test connectivity as your user
with knife:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sx">% knife </span><span class="n">client</span> <span class="n">list</span>
</span><span class='line'><span class="n">chef</span><span class="o">-</span><span class="n">validator</span>
</span><span class='line'><span class="n">chef</span><span class="o">-</span><span class="n">webui</span>
</span><span class='line'><span class="sx">% knife </span><span class="n">user</span> <span class="n">list</span>
</span><span class='line'><span class="n">admin</span>
</span><span class='line'><span class="n">jtimberman</span>
</span></code></pre></td></tr></table></div></figure>


<p>In previous versions of Open Source Chef Server, users were API
clients. In Chef 11, users are separate entities on the Server.</p>

<p>The <code>chef-server-ctl</code> command is used on the Chef Server system for
management. It has built-in help (<code>-h</code>) that will display the various
sub-commands.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chef and Net::SSH Dependency Broken]]></title>
    <link href="http://jtimberman.housepub.org/blog/2013/02/06/chef-and-net-ssh-dependency-broken/"/>
    <updated>2013-02-06T10:34:00-07:00</updated>
    <id>http://jtimberman.housepub.org/blog/2013/02/06/chef-and-net-ssh-dependency-broken</id>
    <content type="html"><![CDATA[<p><strong>2nd UPDATE</strong>
<a href="http://tickets.opscode.com/browse/CHEF-3835">CHEF-3835</a> was opened by
a member of the community; Chef versions 11.2.0 and 10.20.0 have been
released by Opscode to resolve the issue.</p>

<p><strong>UPDATE</strong> Opscode is working on getting a new release of the Chef gem
  with updated version constraints.</p>

<h1>What Happened?</h1>

<p>Earlier today (February 6, 2013), a new version of the various net-ssh
RubyGems were published. This includes:</p>

<ul>
<li>net-ssh 2.6.4</li>
<li>net-ssh-multi 1.1.1</li>
<li>net-ssh-gateway 1.1.1</li>
</ul>


<p>Chef&rsquo;s dependencies have a pessimistic version constraint (<code>~&gt;</code>) on
net-ssh 2.2.2.</p>

<h1>What&rsquo;s the Problem?</h1>

<p>So what is the problem?</p>

<p>It appears to lie with net-ssh-gateway. The version of net-ssh-gateway
went from 1.1.0 (released in April 2011), to 1.1.1. It depends on
net-ssh. In net-ssh-gateway 1.1.0, the net-ssh version constraint was
<code>&gt;= 1.99.1</code>, which is fine with Chef&rsquo;s constraint against <code>~&gt; 2.2.2</code>.
However, in net-ssh-gateway 1.1.1, the net-ssh version constraint was
changed to <code>&gt;= 2.6.4</code>, which is obviously a conflict with Chef&rsquo;s
constraint.</p>

<h1>What&rsquo;s the Solution?</h1>

<p>So, how can we fix it?</p>

<p>One solution is to use the Opscode Omnibus Package for Chef. This
isn&rsquo;t a solution for everyone, of course, but it does include and
contain all the dependencies. This also doesn&rsquo;t help if one wishes to
install another gem that depends on Chef under the &ldquo;Omnibus&rdquo; Ruby
environment along with Chef, because the conflict will be found. For
example, to use the minitest-chef-handler gem for running
minitest-chef tests.</p>

<p><code>vagrant@ubuntu-12-04:~$ /opt/chef/embedded/bin/gem install
minitest-chef-handler ERROR: While executing gem ...
(Gem::DependencyError) Unable to resolve dependencies: net-ssh-gateway
requires net-ssh (&gt;= 2.6.4)</code></p>

<p>Another solution is to relax / modify the constraint in Chef. This may
be okay, but as of <em>right now</em> we don&rsquo;t know if this will affect
anything in the way that Chef uses net-ssh. We have tickets related to
net-ssh version constraints in Chef:</p>

<ul>
<li><a href="http://tickets.opscode.com/browse/CHEF-2977">http://tickets.opscode.com/browse/CHEF-2977</a></li>
<li><a href="http://tickets.opscode.com/browse/CHEF-3156">http://tickets.opscode.com/browse/CHEF-3156</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Local-only Knife Configuration]]></title>
    <link href="http://jtimberman.housepub.org/blog/2013/02/01/local-only-knife-configuration/"/>
    <updated>2013-02-01T10:57:00-07:00</updated>
    <id>http://jtimberman.housepub.org/blog/2013/02/01/local-only-knife-configuration</id>
    <content type="html"><![CDATA[<p>In this post I want to discuss briefly an approach to setting up a
shared Knife configuration file for teams using the same Chef
Repository, while supporting customized configuration.</p>

<h2>Background</h2>

<p>Most infrastructures managed by Chef have multiple people working on
them. Recently, several people in the Ruby community started working
together on migrating <a href="http://rubygems.org">RubyGems</a> to
<a href="https://github.com/rubygems/rubygems-aws">Amazon EC2</a>.</p>

<p>The repository has a shared <code>.chef/knife.rb</code> which sets some local
paths where cookbooks and roles are located. In addition to this, I
wanted to test building the infrastructure using a Chef Server and my
own EC2 account.</p>

<h2>The Approach</h2>

<p>At Opscode, we believe in leveraging internal DSLs. The
<code>.chef/knife.rb</code> (and Chef&rsquo;s <code>client.rb</code> or <code>solo.rb</code>, etc) is no
exception. While you can have a fairly simple configuration like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">node_name</span>        <span class="s2">&quot;jtimberman&quot;</span>
</span><span class='line'><span class="n">client_key</span>       <span class="s2">&quot;/home/jtimberman/.chef/jtimberman.pem&quot;</span>
</span><span class='line'><span class="n">chef_server_url</span>  <span class="s2">&quot;https://api.opscode.com/organizations/my_organization&quot;</span>
</span><span class='line'><span class="n">cookbook_path</span>    <span class="s2">&quot;cookbooks&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also have something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">log_level</span>     <span class="ss">:info</span>
</span><span class='line'><span class="n">log_location</span>  <span class="no">STDOUT</span>
</span><span class='line'><span class="n">node_name</span>     <span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;NODE_NAME&quot;</span><span class="o">]</span> <span class="o">||</span> <span class="s2">&quot;solo&quot;</span>
</span><span class='line'><span class="n">client_key</span>    <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s2">&quot;../solo.pem&quot;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
</span><span class='line'><span class="n">cache_type</span>    <span class="s2">&quot;BasicFile&quot;</span>
</span><span class='line'><span class="n">cache_options</span><span class="p">(</span><span class="ss">path</span><span class="p">:</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s2">&quot;../checksums&quot;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">))</span>
</span><span class='line'><span class="n">cookbook_path</span> <span class="o">[</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s2">&quot;../../chef/cookbooks&quot;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span> <span class="o">]</span>
</span><span class='line'><span class="k">if</span> <span class="o">::</span><span class="no">File</span><span class="o">.</span><span class="n">exist?</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s2">&quot;../knife.local.rb&quot;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">))</span>
</span><span class='line'>  <span class="ss">Chef</span><span class="p">:</span><span class="ss">:Config</span><span class="o">.</span><span class="n">from_file</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s2">&quot;../knife.local.rb&quot;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">))</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the <code>knife.rb</code> included in the
<a href="https://github.com/rubygems/rubygems-aws">RubyGems-AWS repo</a>.</p>

<p>The main part of interest here is the last three lines.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="o">::</span><span class="no">File</span><span class="o">.</span><span class="n">exist?</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s2">&quot;../knife.local.rb&quot;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">))</span>
</span><span class='line'>  <span class="ss">Chef</span><span class="p">:</span><span class="ss">:Config</span><span class="o">.</span><span class="n">from_file</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s2">&quot;../knife.local.rb&quot;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">))</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This says &ldquo;if a file <code>knife.local.rb</code> exists, then load its
configuration. The <code>Chef::Config</code> class is what Chef uses for
configuration files, and the <code>#from_file</code> method will load the
specified file.</p>

<p>In this case, the content of my <code>knife.local.rb</code> is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">node_name</span>                <span class="s2">&quot;jtimberman&quot;</span>
</span><span class='line'><span class="n">client_key</span>               <span class="s2">&quot;/Users/jtimberman/.chef/jtimberman.pem&quot;</span>
</span><span class='line'><span class="n">validation_client_name</span>   <span class="s2">&quot;ORGNAME-validator&quot;</span>
</span><span class='line'><span class="n">validation_key</span>           <span class="s2">&quot;/Users/jtimberman/.chef/ORGNAME-validator.pem&quot;</span>
</span><span class='line'><span class="n">chef_server_url</span>          <span class="s2">&quot;https://api.opscode.com/organizations/ORGNAME&quot;</span>
</span><span class='line'><span class="n">cookbook_path</span> <span class="o">[</span>
</span><span class='line'>  <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s2">&quot;../../chef/cookbooks&quot;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">),</span>
</span><span class='line'>  <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s2">&quot;../../chef/site-cookbooks&quot;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
</span><span class='line'><span class="o">]</span>
</span><span class='line'><span class="n">knife</span><span class="o">[</span><span class="ss">:aws_access_key_id</span><span class="o">]</span>      <span class="o">=</span> <span class="s2">&quot;Some access key I like&quot;</span>
</span><span class='line'><span class="n">knife</span><span class="o">[</span><span class="ss">:aws_secret_access_key</span><span class="o">]</span>  <span class="o">=</span> <span class="s2">&quot;The matching secret access key&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here I&rsquo;m setting my Opscode Hosted Chef credentials and server. I also
set the <code>cookbook_path</code> to include the site-cookbooks directory (this
should probably go in the regular knife.rb). Finally, I set the knife
configuration options for my AWS EC2 account.</p>

<p>The configuration is parsed top-down, so the options here that overlap
the <code>knife.rb</code> will be used instead.</p>

<h2>In the Repository</h2>

<p>In the repository, commit only the <code>.chef/knife.rb</code> and not the
<code>.chef/knife.local.rb</code>. I recommend adding the local file to the
.gitignore or VCS equivalent.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sx">% echo </span><span class="o">.</span><span class="n">chef</span><span class="o">/</span><span class="n">knife</span><span class="o">.</span><span class="n">local</span><span class="o">.</span><span class="n">rb</span> <span class="o">&gt;&gt;</span> <span class="o">.</span><span class="n">gitignore</span>
</span><span class='line'><span class="sx">% git </span><span class="n">add</span> <span class="o">.</span><span class="n">chef</span><span class="o">/</span><span class="n">knife</span><span class="o">.</span><span class="n">rb</span> <span class="o">.</span><span class="n">gitignore</span>
</span><span class='line'><span class="sx">% git </span><span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s1">&#39;keep general knife.rb, local config is ignored&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>There are many approaches to solving the issue of having shared Knife
configuration for multiple people in a single repository. The real
benefit here is that the configuration file is Ruby, which provides a
lot of flexibility. Of course, when using someone else&rsquo;s configuration
examples, one should always read the code and understand it first :&ndash;).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Local Templates for Application Configuration]]></title>
    <link href="http://jtimberman.housepub.org/blog/2013/01/28/local-templates-for-application-configuration/"/>
    <updated>2013-01-28T09:57:00-07:00</updated>
    <id>http://jtimberman.housepub.org/blog/2013/01/28/local-templates-for-application-configuration</id>
    <content type="html"><![CDATA[<p>Today I joined the
<a href="http://foodfightshow.org/2013/01/application-deployment.html">Food Fight Show</a>
for a conversation about Application Deployment. Along the way, the
question came up about where to store application specific
configuration files. Should they be stored in a Chef cookbook for
setting up the system for the application? Or shoud they be stored in
the application codebase itself?</p>

<p>The answer is either, as far as Chef is concerned. Chef&rsquo;s
<a href="http://docs.opscode.com/resource_template.html">template resource</a>
can render a template from a local file on disk, or retrieve the
template from a cookbook. The latter is the most common pattern, so
let&rsquo;s examine the former, using a local file on disk.</p>

<p>For sake of discussion, let&rsquo;s use a Rails application that needs a
<code>database.yml</code> file rendered. Also, we&rsquo;ll assume that information
about the application (database user, password, server) we need is
stored in a Chef
<a href="http://docs.opscode.com/essentials_data_bags_store.html">data bag</a>.
Finally, we&rsquo;re going to assume that the application is already
deployed on the system somehow and we just want to render the
database.yml.</p>

<p>The application source tree looks something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>myapp/
</span><span class='line'>-&gt; config/
</span><span class='line'>    -&gt; database.yml.erb</span></code></pre></td></tr></table></div></figure>


<p>Note that there should not be a database.yml (non-.erb) here, as it
will be rendered with Chef. The deployment of the app will end up
in <code>/srv</code>, so the full path of this template is, for example,
<code>/srv/myapp/current/config/database.yml.erb</code>. The content of the
template may look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">&lt;%= @rails_env %&gt;</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">adapter</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">&lt;%= @adapter %&gt;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">host</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">&lt;%= @host %&gt;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">database</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">&lt;%= @database %&gt;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">username</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">&lt;%= @username %&gt;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">password</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">&lt;%= @password %&gt;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">encoding</span><span class="p-Indicator">:</span> <span class="s">&#39;utf8&#39;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">reconnect</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Chef recipe looks like this. Note we&rsquo;ll use a search to find
the first node that should be the database master (there should only
be one). For the adapter, we may have set an attribute in the role
that selects the adapter to use.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">results</span> <span class="o">=</span> <span class="n">search</span><span class="p">(</span><span class="ss">:node</span><span class="p">,</span> <span class="s2">&quot;role:myapp_database_master AND environment:</span><span class="si">#{</span><span class="n">node</span><span class="o">.</span><span class="n">chef_environment</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">db_master</span> <span class="o">=</span> <span class="n">results</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">template</span> <span class="s2">&quot;/srv/myapp/shared/database.yml&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="s2">&quot;/srv/myapp/current/config/database.yml.erb&quot;</span>
</span><span class='line'>  <span class="n">local</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">variables</span><span class="p">(</span>
</span><span class='line'>    <span class="ss">:rails_env</span> <span class="o">=&gt;</span> <span class="n">node</span><span class="o">.</span><span class="n">chef_environment</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:adapter</span> <span class="o">=&gt;</span> <span class="n">db_master</span><span class="o">[</span><span class="s1">&#39;myapp&#39;</span><span class="o">][</span><span class="s1">&#39;db_adapter&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:host</span> <span class="o">=&gt;</span> <span class="n">db_master</span><span class="o">[</span><span class="s1">&#39;fqdn&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:database</span> <span class="o">=&gt;</span> <span class="s2">&quot;myapp_</span><span class="si">#{</span><span class="n">node</span><span class="o">.</span><span class="n">chef_environment</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:username</span> <span class="o">=&gt;</span> <span class="s2">&quot;myapp&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:password</span> <span class="o">=&gt;</span> <span class="s2">&quot;SUPERSECRET&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The rendered template, <code>/srv/myapp/shared/database.yml</code>, will look
like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">production</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">adapter</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mysql</span>
</span><span class='line'>  <span class="l-Scalar-Plain">host</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">domU-12-31-39-14-F1-C3.compute-1.internal</span>
</span><span class='line'>  <span class="l-Scalar-Plain">database</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">myapp_production</span>
</span><span class='line'>  <span class="l-Scalar-Plain">username</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">myapp</span>
</span><span class='line'>  <span class="l-Scalar-Plain">password</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">SUPERSECRET</span>
</span><span class='line'>  <span class="l-Scalar-Plain">encoding</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">utf8</span>
</span><span class='line'>  <span class="l-Scalar-Plain">reconnect</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>This post is only part of the puzzle, mainly to explain what I
mentioned on the Food Fight Show today. There are a number of
unanswered questions like,</p>

<ul>
<li>Should database.yml be .gitignore&rsquo;d?</li>
<li>How do developers run the app locally?</li>
<li>How do I use this with Chef Solo?</li>
</ul>


<p>As mentioned on the show, there&rsquo;s currently a
<a href="http://lists.opscode.com/sympa/arc/chef/2013-01/msg00392.html">thread</a>
related to this topic on the Chef mailing list.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Process Supervision: Solved Problem]]></title>
    <link href="http://jtimberman.housepub.org/blog/2012/12/29/process-supervision-solved-problem/"/>
    <updated>2012-12-29T21:41:00-07:00</updated>
    <id>http://jtimberman.housepub.org/blog/2012/12/29/process-supervision-solved-problem</id>
    <content type="html"><![CDATA[<p><strong>TL;DR</strong>: Use <a href="http://smarden.org/runit/index.html">runit</a>; skip to
&ldquo;This is a Solved Problem&rdquo; and &ldquo;Additional Resources&rdquo; sections at the
end of this post.</p>

<p>Recently on my twitter stream, I saw a link to
<a href="http://stackoverflow.com/questions/3295737/how-to-start-jetty-properly">a question</a>
on Stack Overflow about how to properly start Jetty. While the
question is over 2.5 years old, the question stems from the common
problem: How do I start a long running process, and <em>keep it running</em>?
That an accepted answer is to run it under &ldquo;nohup&rdquo; (or screen?!) tells
me that for some reason, this isn&rsquo;t perceived as a solved problem.</p>

<p>In my opinion, process supervision <em>is</em> a solved problem. However,
this wheel keeps getting reinvented, or reimplemented with solutions
that are not easily manageable or scalable. In this post, I will
clarify some terminology, describe commonly understood goals of
process supervision, explore some of the common approaches, and how
they don&rsquo;t meet those goals, and finally explain why I feel this is a
solved problem.</p>

<p><em>Note</em> This is a Unix/Linux centric post. Windows has its own
  methods for running services, but the problem is definitely solved
  there too; Microsoft gave developers and administrators APIs that
  seem to be commonly used.</p>

<h1>Process Supervision is Not Service Management</h1>

<p>What exactly is process supervision?</p>

<p>One of the reasons for running servers is to provide a service of some
kind. That is, an application that provides business value. A service
is made up of one or more running processes on computer systems
somewhere. Those processes are typically long-lived running daemons.</p>

<p>Process supervision is simply the concept of starting a daemon and
keeping it running.</p>

<p>Note that this is <em>not</em> the same as more general service management.
That may imply multiple services, which may be running on separate
physical or virtual servers in a distributed system. That is outside
the scope of this post.</p>

<p>This is also <em>not</em> service monitoring, a la graphing (munin, graphite)
and/or alerting (nagios, sensu). That is also outside the scope of
this post.</p>

<h1>Goals and Benefits of Process Supervision</h1>

<p>The
<a href="http://en.wikipedia.org/wiki/Process_supervision">Wikipedia page on Process Supervision</a>
describe its benefits as follows:</p>

<ul>
<li>Ability to restart services which have failed</li>
<li>The fact that it does not require the use of &ldquo;pidfiles&rdquo;</li>
<li>Clean process state</li>
<li>Reliable logging, because the master process can capture the stdout/stderr of the service process and route it to a log</li>
<li>Faster (concurrent) and ability to start up and stop</li>
</ul>


<p>To this, I add:</p>

<ul>
<li>Manage processes with Unix signals</li>
<li>Simple setup that is configuration management-friendly (I&rsquo;m obviously
<a href="http://opscode.com/chef">biased</a>)</li>
<li>Dependency management between services on the same machine</li>
</ul>


<p>For sake of argument, these combined lists of goals and benefits are
my criteria for a process supversion system in this post.</p>

<p><strong>Spoiler alert</strong>: <a href="http://smarden.org/runit/benefits.html">runit</a>
covers all of these, as does
<a href="http://skarnet.org/software/s6/why.html">s6</a>.</p>

<h1>Common Approaches</h1>

<p>I&rsquo;m going to talk about some approaches to process supervision, and
how they don&rsquo;t meet the criteria above. This won&rsquo;t be comprehensive. I
want to illustrate the highlights.</p>

<h2>Nohup</h2>

<p>First, the approach mentioned in the StackOverflow answer: &ldquo;nohup.&rdquo;
The &ldquo;nohup&rdquo; command will &ldquo;run a command immune to hangups, with output
to a non-tty.&rdquo; This typically involves logging into a system and
manually invoking the command, such as:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nohup jar -jar start.jar</span></code></pre></td></tr></table></div></figure>


<p>This doesn&rsquo;t provide the ability to restart if it fails. The process
state is contaminated with whatever the user has in their login shell
profile(s). It will log to &ldquo;nohup.out&rdquo; by default, though it can be
redirected to another file. It&rsquo;s pretty safe to say that in my opinion
that this fails the criteria above, and should not be used for long
running processes, especially those as important as running your Java
application.</p>

<h2>Terminal Multiplexers</h2>

<p>Next up, a common approach for running process is to start up screen
(or tmux), and let them run in the foreground. Screen and tmux are
terminal multiplexers. That is, they are &ldquo;full-screen window
manager[s] that multiplex a physical terminal between several
processes.&rdquo; These are great tools, and
<a href="http://jtimberman.housepub.org/blog/2012/01/28/iterm2-with-tmux/">I use tmux</a>
for other reasons. However, this fails the criteria for the same
reasons as nohup. Additionally, automating a process running in screen
is not a simple task that can be repeated reliably.</p>

<h2>SysV/BSD Init</h2>

<p>Most commonly, process management (and not supervision) is handled on
Unix/Linux systems by plain ol&#8217; SysV/BSD
&ldquo;<a href="http://en.wikipedia.org/wiki/Init">init</a>.&rdquo; These obviously fail to
meet the criteria above, because two new(er) systems,
&ldquo;<a href="http://upstart.ubuntu.com/">upstart</a>&rdquo; and
&ldquo;<a href="http://www.freedesktop.org/wiki/Software/systemd">systemd</a>&rdquo; have
been written to address the problems. That said, &ldquo;init&rdquo; fails pretty
much all the criteria:</p>

<ol>
<li>No ability to restart services which have failed.</li>
<li>One of the biggest problems is handling of &ldquo;pidfiles.&rdquo;</li>
<li>Process state is theoretically clean, but then realize the average
init script sources at least two different shell scripts for helper
functions and environment variables, nevermind homegrown scripts that
might read in user shell settings, too.</li>
<li>The best one can hope for in logging is that the process writes to
syslog, because many init scripts redirect log output in different,
non-portable ways.</li>
<li>Init is 100% sequential startup, no concurrency: &ldquo;/etc/rc2.d/S*&rdquo;</li>
<li>Sure, you can send signals to the process, but most init scripts
don&rsquo;t support more than &ldquo;reload&rdquo; or &ldquo;restart,&rdquo; so you&rsquo;re left on your
own with picking up the pieces manually.</li>
<li>Configuration management is easy, right? Just &ldquo;ensure running&rdquo; or
&ldquo;action :start&rdquo; &ndash; except let&rsquo;s not forget the &ldquo;/etc/sysconfig&rdquo; or
&ldquo;/etc/default&rdquo; that sets more configuration. And that the package
manager might have started it for you before you&rsquo;re ready.</li>
<li>Okay, I&rsquo;ll give you this. As long as the sequential ordering of the
init scripts is all correct to meet the dependencies.</li>
</ol>


<p>Also, I have a personal pet peeve about init script complexity,
inconsistency and non-portability between distributions of Linux, let
alone Unix. I could (and probably will) write a post about that. For a
taste, see <a href="http://tickets.opscode.com/browse/CHEF-3774">CHEF-3774</a>.</p>

<p><strong>Note</strong>: I&rsquo;m generalizing both SysV and BSD here. I admit I don&rsquo;t have
extensive experience with BSD systems, but my observation is it fails
in very similar ways to SysV.</p>

<h2>Systemd/Upstart</h2>

<p>The newer init-replacement systems, systemd and upstart are worth
their own section, though I&rsquo;ll be brief. Other people have
<a href="http://blog.mywarwithentropy.com/2010/10/upstart-better-init-or-more-painful-one.html">posted</a>
<a href="http://monolight.cc/2011/05/the-systemd-fallacy/">about</a> these, and
they&rsquo;re pretty well covered on the
<a href="http://skarnet.org/software/s6/why.html">s6 comparison</a>.</p>

<p>Mainly, I see both of these as reinventing the solution that follows.
However, a couple points I&rsquo;d like to make:</p>

<ol>
<li>Both systems are primarily focused on desktop systems, rather than
server systems. This is mostly evident in their use of D-Bus
(<em>Desktop</em> bus), goals of faster boot time, and that their roots are
in primarily desktop-oriented Linux distributions (Fedora and Ubuntu).</li>
<li>They both completely replace init, which isn&rsquo;t necessarily bad.
However, they both operate differently from init, and each other, thus
being a non-portable major difference between Linux distributions.</li>
</ol>


<h2>Other Process Supervision Systems</h2>

<p>There are a lot of process supervision systems out there. In no
particular order, an incomplete list:</p>

<ul>
<li><a href="https://github.com/arya/bluepill">Bluepill</a></li>
<li><a href="http://godrb.com/">God</a></li>
<li><a href="http://ddollar.github.com/foreman/">Foreman</a> (not to be confused
with <a href="http://theforeman.org/">The Foreman</a>)</li>
<li><a href="http://supervisord.org/">Supervisor</a></li>
<li><a href="http://mmonit.com/monit/">Monit</a></li>
</ul>


<p>I have varying degrees of experience with all of these. I have written
<a href="http://community.opscode.com/cookbooks/bluepill">significant</a>
<a href="http://community.opscode.com/cookbooks/god">amounts</a> of automation
code for operating some of them.</p>

<p>I think that with perhaps the exception of Monit(*), they are redundant
and unnecessary.</p>

<p>(*): I don&rsquo;t have as much experience with Monit as the others, and it
seems to have a lot of nice additional features. I&rsquo;ve also heard
<a href="https://twitter.com/nrr/status/293564015827894272">it goes well</a> with
my favorite solution.</p>

<h1>This Is a Solved Problem</h1>

<p>Earlier I mentioned <a href="http://smarden.org/runit/">runit</a> meets all the
criteria I listed above. In my opinion, it is the solution to the
process supervision problem. While the
<a href="http://smarden.org/runit/benefits.html">runit website</a> itself lists
its benefits, it gets a nod from the
<a href="http://skarnet.org/software/s6/why.html">s6 project</a>, too. The
underlying solution is actually the foundation both runit and s6 build
on: <a href="http://cr.yp.to/daemontools.html">Dan J Bernstein&rsquo;s daemontools</a>.
The
<a href="http://www.skarnet.org/software/skalibs/djblegacy.html">merits of DJB and daemontools</a>
are <em>very</em> well stated by the author of s6. I strongly recommend
reading it, as he sums up my thoughts about DJB, too. It is worth
noting that I do like s6 itself, but it isn&rsquo;t currently packaged
anywhere and adheres fairly strictly to the &ldquo;slash package&rdquo;
convention, which isn&rsquo;t compatible with the more popular
<a href="http://www.pathname.com/fhs/">Filesystem Hierarchy Standard</a>.</p>

<p>Anyway, the real point of this post is to talk about why I like runit.
I think the best way to explain it is to talk about how it meets the
criteria above.</p>

<h3>Restart Failed Services</h3>

<p>The <code>runsv</code> program
<a href="http://smarden.org/runit/benefits.html#supervision">supervises services</a>,
and will restart them if they fail. While it doesn&rsquo;t provide any
notification that the service failed, other than possibly writing to
the log, this means that if a configuration issue caused a service to
fail, it will automatically start when the configuration file is
corrected.</p>

<h3>No PID files</h3>

<p>Each service managed by <code>runsv</code> has a &ldquo;service directory&rdquo; where all
its files are kept. Here, a &ldquo;supervise&rdquo; directory is managed by runsv,
and a &ldquo;pid&rdquo; file containing the running PID is stored. However this
isn&rsquo;t the same as the pidfile management used in init scripts, and it
means program authors don&rsquo;t have to worry about managing a pidfile.</p>

<h3>Clean Process State</h3>

<p>Runit&rsquo;s benefits page
<a href="http://smarden.org/runit/benefits.html#state">describes how</a> it
guarantees clean process state. I won&rsquo;t repeat it here.</p>

<h3>Reliable Logging</h3>

<p>Likewise, Runit&rsquo;s benefits page describes how it provides
<a href="http://smarden.org/runit/benefits.html#log">reliable logging</a>.</p>

<h3>Parallel Start/Stop</h3>

<p>One of the goals and benefits lauded by systemd and upstart is that
they reduce system boot time because various services can be started
in parallel. Runit also starts up all the services it manages in
parallel. More about this under dependency management, too.</p>

<h3>Manage Processes (with Unix Signals)</h3>

<p>The <code>sv</code> <a href="http://smarden.org/runit/sv.8.html">program</a> is used to send
signals to services, and for general management of the services. It is
used to start, stop and restart services. It also implements a number of
commands that can be used for signals like TERM, CONT, USR1. <code>sv</code> also
includes &ldquo;LSB-init&rdquo; compatibility, so the binary can be linked to
<code>/etc/init.d/service-name</code> so &ldquo;init style&rdquo; commands can be used:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo /etc/init.d/service-name status
</span><span class='line'>sudo /etc/init.d/service-name restart</span></code></pre></td></tr></table></div></figure>


<p>And so forth.</p>

<h3>Simple Setup, Configuration Management Friendly</h3>

<p>One of the benefits listed is that runit is
<a href="http://smarden.org/runit/benefits.html#packaging">packaging friendly</a>.
This is interesting because that also makes it configuration
management friendly. Setting up a new service under runit is
fairly simple:</p>

<ol>
<li>Create a &ldquo;service directory&rdquo; for the service.</li>
<li>Write a &ldquo;run&rdquo; script that will start the service.</li>
<li>Create a symbolic link from the service directory to the directory
of supervised services.</li>
</ol>


<p>As an example, suppose we want to run a git daemon. By convention,
we&rsquo;ll create the service directory in <code>/etc/sv</code>, and the supervised
services are linked in <code>/etc/service</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo mkdir /etc/sv/git-daemon
</span><span class='line'>sudo vi /etc/sv/git-daemon/run
</span><span class='line'>sudo chmod 0755 /etc/sv/git-daemon/run
</span><span class='line'>sudo ln -s /etc/sv/git-daemon /etc/service</span></code></pre></td></tr></table></div></figure>


<p>The run script may look like this
(<a href="http://smarden.org/runit/chpst.8.html">chpst</a> is a program that
comes with runit that changes the process state, such as the user it
runs as):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/sh
</span><span class='line'>exec 2&gt;&1
</span><span class='line'>exec chpst -ugitdaemon \
</span><span class='line'>  "$(git --exec-path)"/git-daemon --verbose --reuseaddr \
</span><span class='line'>    --base-path=/var/cache /var/cache/git</span></code></pre></td></tr></table></div></figure>


<p>Within a few seconds, the git daemon will be running:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root      6236  0.0  0.0    164     4 ?        Ss   19:03   0:00 runsv git-daemon
</span><span class='line'>119      12093  0.0  0.0  11460   812 ?        S    23:46   0:00 /usr/lib/git-core/git-daemon --verbose --reuseaddr --base-path=/var/cache /var/cache/git</span></code></pre></td></tr></table></div></figure>


<p>The <a href="http://smarden.org/runit/faq.html">documentation</a> contains a
lot more information and usesp</p>

<p><strong>Note</strong>: As evidence that this is packaging friendly, this is
  provided by the very simple <code>git-daemon-run</code> package on
  <a href="http://packages.debian.org/search?keywords=git-daemon-run">Debian</a>
  and
  <a href="http://packages.ubuntu.com/search?keywords=git-daemon-run">Ubuntu</a>.</p>

<h3>Dependency Management</h3>

<p>Many services require that other services are available before they
can start. A common example is that the database filesystem must be
mounted before the database can be started.</p>

<p>Depending on the services, this can be addressed simply by <code>runsv</code>
restarting services that fail. For example, if the startup of the
database fails because its file system isn&rsquo;t mounted and the process
exits with a return code greater than 0, then perhaps restarting will
eventually work once the filesystem is mounted. Of course, this is an
oversimplified naive example.</p>

<p>The runit <a href="http://smarden.org/runit/faq.html#depends">FAQ</a> addresses
this issue by use of the program <code>sv</code>, mentioned earlier. Simply put,
use the <code>sv start</code> command on the required service.</p>

<h2>A Few Notes</h2>

<p>I&rsquo;ve used runit for a few years now. We used it at HJK Solutions to
manage all system and application services that weren&rsquo;t packaged with
an init script. We use it at Opscode to manage all the services that
run <a href="http://opscode.com/private-chef">Opscode Private Chef</a>.</p>

<ol>
<li>Manage services that run in the foreground. If a service doesn&rsquo;t
support running in the foreground, you&rsquo;ll have a bad time with it in
runit, as <code>runsv</code> cannot supervise it.</li>
<li>Use <a href="http://smarden.org/runit/svlogd.8.html">svlogd</a> to capture log
output. It automatically rotates the log files, and can capture both
STDOUT and STDERR. It can also be configured (see the man page).</li>
<li>The author of runit is also the package maintainer for
Debian/Ubuntu. This means runit works extremely well on these
distributions.</li>
<li>I don&rsquo;t replace init with runit, so I can&rsquo;t speak to that.</li>
<li><a href="https://twitter.com/ianmeyer">Ian Meyer</a> maintains an
<a href="https://github.com/imeyer/runit-rpm">RPM spec</a> for runit packages
that work well. It will be included in Opscode&rsquo;s
<a href="http://community.opscode.com/cookbooks/runit">runit cookbook</a>
<a href="http://tickets.opscode.com/browse/COOK-2164">soon</a>.</li>
<li>If you use Chef, use Opscode&rsquo;s
<a href="http://community.opscode.com/cookbooks/runit">runit cookbook</a>. It
will <a href="http://tickets.opscode.com/browse/CHEF-154">soon</a> have a
resource/provider for managing runit services, instead of the definition.</li>
</ol>


<h1>Conclusion</h1>

<p>Use runit.</p>

<p>But not just because I said so. Use it because it meets the criteria
for a process supervision system, and it builds on the foundation
pioneered by an excellent
<a href="www.skarnet.org/software/skalibs/djblegacy.html">software engineer</a>.</p>

<p>After all, I&rsquo;m not <a href="http://rubyists.github.com/2011/05/02/runit-for-ruby-and-everything-else.html">the only one who thinks so</a>.</p>

<h1>Additional Resources</h1>

<ul>
<li><a href="http://skarnet.org/software/s6/">s6</a> &ndash; by Laurent Bercot</li>
<li><a href="http://smarden.org/runit/">runit</a> &ndash; by Gerrit Pape</li>
<li><a href="http://cr.yp.to/daemontools.html">daemontools</a> &ndash; by Dan J Bernstein</li>
<li><a href="http://rubyists.github.com/2011/05/02/runit-for-ruby-and-everything-else.html">Runit for Ruby (and everything else)</a></li>
<li><a href="http://community.opscode.com/cookbooks/runit">runit cookbook for Chef</a>
(nice changes coming in
<a href="http://tickets.opscode.com/browse/CHEF-154">CHEF-154</a>, and
<a href="http://tickets.opscode.com/browse/COOK-2164">COOK-2164</a> too!)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cookbook Integration Testing With Real Examples]]></title>
    <link href="http://jtimberman.housepub.org/blog/2012/12/13/cookbook-integration-testing-with-real-examples/"/>
    <updated>2012-12-13T20:54:00-07:00</updated>
    <id>http://jtimberman.housepub.org/blog/2012/12/13/cookbook-integration-testing-with-real-examples</id>
    <content type="html"><![CDATA[<p>This blog post starts with a <a href="https://gist.github.com/4281314">gist</a>,
and a
<a href="https://twitter.com/jtimberman/status/279380189287436289">tweet</a>.
However, that isn&rsquo;t the whole story. Read on&hellip;</p>

<p>Today I released version 1.6.0 of
<a href="http://community.opscode.com/cookbooks/apt">Opscode&rsquo;s apt cookbook</a>. The
cookbook itself needed better coverage for testing in Test Kitchen.
This post will describe these additions to the cookbook, including how
one of the test recipes can actually be used for actual production
use. My goal is to explain a bit about how we go about testing with
Test Kitchen, and provide some real world examples.</p>

<p>TL;DR &ndash;
<a href="https://github.com/opscode-cookbooks/apt/commit/9996510bab27a9ea5f17e2f6362151dcbe708e89">This commit has all the code</a>.</p>

<h1>Kitchenfile</h1>

<p>First, the Kitchenfile for the project looked like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cookbook</span> <span class="s2">&quot;apt&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">runtimes</span> <span class="o">[]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is outdated as far as Kitchenfiles goes. It still has the empty
array runtimes setting which prevents Test Kitchen from attempting to
<a href="http://tickets.opscode.com/browse/KITCHEN-4">run additional tests under RVM</a>.
We&rsquo;ll remove this line, and update it for supporting the
configurations of the recipes and features we want to test. The
cookbook itself has three recipes:</p>

<ul>
<li>default.rb</li>
<li>cacher-client.rb</li>
<li>cacher-ng.rb</li>
</ul>


<p>By default, with no configurations defined in a Kitchenfile,
test-kitchen will run the default recipe (using Chef Solo under
Vagrant). This is useful in the common case, but we also want to
actually test other functionality in the cookbook. In addition to the
recipes, we want to verify that the LWRPs will do what we intend.</p>

<p>I updated the Kitchenfile with the following content:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cookbook</span> <span class="s2">&quot;apt&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">configuration</span> <span class="s2">&quot;default&quot;</span>
</span><span class='line'>  <span class="n">configuration</span> <span class="s2">&quot;cacher-ng&quot;</span>
</span><span class='line'>  <span class="n">configuration</span> <span class="s2">&quot;lwrps&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>A configuration can correspond to a recipe (<code>default</code>, <code>cacher-ng</code>),
but it can also be arbitrarily named. This is a name used by kitchen
test. The <code>cacher-client</code> recipe isn&rsquo;t present because
<code>recipe[apt::cacher-ng]</code> includes it, and getting the test to work,
where the single node is a cacher client to itself, was prone to
error. &ldquo;I assure you, it works&rdquo; :&ndash;). We&rsquo;ll look at this later anyway.</p>

<p>With the above Kitchenfile, kitchen test will start up the Vagrant
VMs and attempt to run Chef Solo with the recipes named by the
configuration. This is a good start, but we want to actually run some
minitest-chef tests. These will be created inside a &ldquo;test&rdquo; cookbook
included with this cookbook. I created a cookbook named <code>apt_test</code>
under <code>./test/kitchen/cookbooks</code> using:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>knife cookbook create apt_test -o ./test/kitchen/cookbooks
</span></code></pre></td></tr></table></div></figure>


<p>This creates the cookbook scaffolding like normal. I cleaned up the
contents of the directory to contain what I needed to start:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>test/kitchen/cookbooks//apt_test/metadata.rb
</span><span class='line'>test/kitchen/cookbooks//apt_test/README.md
</span><span class='line'>test/kitchen/cookbooks//apt_test/recipes
</span><span class='line'>test/kitchen/cookbooks//apt_test/recipes/cacher-ng.rb
</span><span class='line'>test/kitchen/cookbooks//apt_test/recipes/default.rb
</span><span class='line'>test/kitchen/cookbooks//apt_test/recipes/lwrps.rb
</span></code></pre></td></tr></table></div></figure>


<p>The metadata.rb is as you&rsquo;d expect, it contains the name, a version,
maintainer information and a description. The README simply mentions
that this is a test cookbook for the parent project. The recipes are
the interesting part. Let&rsquo;s address them in the order of the
configurations in the Kitchenfile.</p>

<h1>Configuration: default</h1>

<p>First, the default recipe in the test cookbook. This is simply going
to perform an <code>include_recipe "apt::default"</code>. The way test kitchen
runs, it will actually have the following run list for Chef Solo:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>[test-kitchen::default, minitest-handler, apt_test::default, apt::default]
</span></code></pre></td></tr></table></div></figure>


<p><code>test-kitchen</code> sets up some essential things for Test Kitchen itself.
<code>minitest-handler</code> is the recipe that sets up minitest-chef-handler to
run post-convergence tests. <code>apt_test::default</code> is the &ldquo;test&rdquo; recipe
for this configuration, and finally <code>apt::default</code> is the cookbook&rsquo;s
recipe for this configuration named &ldquo;default&rdquo;.</p>

<p>Had we not done anything else here, the results are the same as simply
running test kitchen with the original Kitchenfile (with runtimes,
instead of configurations defined).</p>

<h2>Minitest: default recipe</h2>

<p>There are now minitest-chef tests for each configuration. The default
recipe provides some &ldquo;apt-get update&rdquo; executes, and also creates a
directory that can be used for preseeding packages. We&rsquo;ll simply test
that the preseeding directory exists. We could probably check that the
cache is updated, but since this cookbook has worked for almost 4
years w/o issue for <code>apt-get update</code> we&rsquo;ll trust it continues working
:&ndash;). Here&rsquo;s the test (ignoring the boilerplate):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">it</span> <span class="s1">&#39;creates the preseeding directory&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">directory</span><span class="p">(</span><span class="s1">&#39;/var/cache/local/preseeding&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">must_exist</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>When Chef runs, it will run this test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>apt_test::default#test_0001_creates_the_preseeding_directory = 0.00 s = .
</span><span class='line'>Finished tests in 0.007988s, 125.1808 tests/s, 125.1808 assertions/s.
</span><span class='line'>1 tests, 1 assertions, 0 failures, 0 errors, 0 skips
</span></code></pre></td></tr></table></div></figure>


<h1>Configuration: cacher-ng</h1>

<p>Next, Test Kitchen runs the <code>cacher-ng</code> configuration. The recipe in
the <code>apt_test</code> cookbook simply includes the <code>apt::cacher-ng</code> recipe.
The run list in Chef Solo looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>[test-kitchen::default, minitest-handler, apt_test::cacher-ng, apt::cacher-ng]
</span></code></pre></td></tr></table></div></figure>


<p>The <code>apt::cacher-ng</code> recipe also includes the client recipe, but
basically does nothing unless the <code>cacher_ipaddress</code> attribute is set,
or if we can search using a Chef Server (which Solo can&rsquo;t, of course).</p>

<h2>Minitest: cacher-ng recipe</h2>

<p>The meat of the matter for the <code>cacher-ng</code> recipe is running the
<code>apt-cacher-ng</code> service, so we&rsquo;ve written a minitest test for this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">it</span> <span class="s1">&#39;runs the cacher service&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">service</span><span class="p">(</span><span class="s2">&quot;apt-cacher-ng&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">must_be_running</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And when Chef runs the test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>apt_test::default#test_0001_runs_the_cacher_service = 0.06 s = .
</span><span class='line'>Finished tests in 0.067250s, 14.8698 tests/s, 14.8698 assertions/s.
</span><span class='line'>1 tests, 1 assertions, 0 failures, 0 errors, 0 skips
</span></code></pre></td></tr></table></div></figure>


<h1>Configuration: lwrps</h1>

<p>Finally, we have our custom configuration that doesn&rsquo;t correspond to a
recipe in the <code>apt</code> cookbook, <code>lwrps</code>. This configuration instead is
to do a real-world integration test that the LWRPs actually do what
they&rsquo;re supposed to.</p>

<h2>Recipe: apt_test::lwrps</h2>

<p>The recipe itself looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">include_recipe</span> <span class="s2">&quot;apt&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">apt_repository</span> <span class="s2">&quot;opscode&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">uri</span> <span class="s2">&quot;http://apt.opscode.com&quot;</span>
</span><span class='line'>  <span class="n">components</span> <span class="o">[</span><span class="s2">&quot;main&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">distribution</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="s1">&#39;lsb&#39;</span><span class="o">][</span><span class="s1">&#39;codename&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">-0.10&quot;</span>
</span><span class='line'>  <span class="n">key</span> <span class="s2">&quot;2940ABA983EF826A&quot;</span>
</span><span class='line'>  <span class="n">keyserver</span> <span class="s2">&quot;pgpkeys.mit.edu&quot;</span>
</span><span class='line'>  <span class="n">action</span> <span class="ss">:add</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">apt_preference</span> <span class="s2">&quot;chef&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">pin</span> <span class="s2">&quot;version 10.16.2-1&quot;</span>
</span><span class='line'>  <span class="n">pin_priority</span> <span class="s2">&quot;700&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>apt</code> recipe is included because otherwise, we may not be able to
notify the <code>apt-get update</code> resource to execute when the new sources.list
is dropped off.</p>

<p>Next, we use Opscode&rsquo;s very own apt repository as an example because
we can rely on that existing. When Test Kitchen runs, it will actually
write out the apt repository configuration file to
<code>/etc/apt/sources.list.d/opscode.list</code>, but more on that in a minute.</p>

<p>Finally, we&rsquo;re going to write out an apt preferences file for pinning
the Chef package. Currently, Chef is actually packaged at various
versions in Ubuntu releases:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>% rmadison chef
</span><span class='line'>      chef | 0.7.10-0ubuntu1.1 | lucid/universe | source, all
</span><span class='line'>      chef | 0.8.16-4.2 | oneiric/universe | source, all
</span><span class='line'>      chef |  10.12.0-2 | quantal/universe | source, all
</span><span class='line'>      chef |  10.12.0-2 | raring/universe | source, all
</span></code></pre></td></tr></table></div></figure>


<p>So by adding the Opscode APT repository, and pinning Chef, we can
ensure that we&rsquo;re going to have the correct version of Chef installed
as a package, if we were installing Chef as a package from APT :).</p>

<p>When Chef Solo runs, here is the run list:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>[test-kitchen::default, minitest-handler, apt_test::lwrps]
</span></code></pre></td></tr></table></div></figure>


<p>Notice it doesn&rsquo;t have &ldquo;<code>apt::lwrps</code>&rdquo;, since that isn&rsquo;t a recipe in
the apt cookbook.</p>

<h2>Minitest: lwrps recipe</h2>

<p>The minitest tests for the lwrps configuration and recipe look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">it</span> <span class="s1">&#39;creates the Opscode sources.list&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">file</span><span class="p">(</span><span class="s2">&quot;/etc/apt/sources.list.d/opscode.list&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">must_exist</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;adds the Opscode package signing key&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">opscode_key</span> <span class="o">=</span> <span class="n">shell_out</span><span class="p">(</span><span class="s2">&quot;apt-key list&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">assert</span> <span class="n">opscode_key</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;Opscode Packages &lt;packages@opscode.com&gt;&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;creates the correct pinning preferences for chef&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">chef_policy</span> <span class="o">=</span> <span class="n">shell_out</span><span class="p">(</span><span class="s2">&quot;apt-cache policy chef&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">assert</span> <span class="n">chef_policy</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;Package pin: 10.16.2-1&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first test simply asserts that the Opscode APT sources.list is
present. We could elaborate on this by verifying that its content is
correct, but for now we&rsquo;re going to trust that the declarative
resource in the recipe is, ahem, declared properly.</p>

<p>Next, we run the <code>apt-key</code> command to show the available GPG keys in
the APT trusted keyring. This will have the correct Opscode Packages
key if it was added correctly.</p>

<p>Finally, we test that the package pinning for the Chef package is
correct. Successful output of the tests looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>apt_test::default#test_0003_creates_the_correct_pinning_preferences_for_chef = 0.05 s = .
</span><span class='line'>apt_test::default#test_0002_adds_the_opscode_package_signing_key = 0.05 s = .
</span><span class='line'>apt_test::default#test_0001_creates_the_opscode_sources_list = 0.00 s = .
</span><span class='line'>Finished tests in 0.112725s, 26.6133 tests/s, 26.6133 assertions/s.
</span><span class='line'>3 tests, 3 assertions, 0 failures, 0 errors, 0 skips
</span></code></pre></td></tr></table></div></figure>


<h1>The Real World Bits</h1>

<p>The tests hide some of the detail. What does this actually look like
on a real system? Glad you asked!</p>

<p>Here&rsquo;s the sources.list for Opscode&rsquo;s APT repository.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>vagrant@ubuntu-12-04:~$ cat /etc/apt/sources.list.d/opscode.list
</span><span class='line'>deb     http://apt.opscode.com precise-0.10 main
</span></code></pre></td></tr></table></div></figure>


<p>Next, the apt-key content:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>vagrant@ubuntu-12-04:~$ sudo apt-key list
</span><span class='line'>(snip, ubuntu&#39;s keys)
</span><span class='line'>pub   1024D/83EF826A 2009-07-24
</span><span class='line'>uid                  Opscode Packages &lt;packages@opscode.com&gt;
</span><span class='line'>sub   2048g/3B6F42A0 2009-07-24
</span></code></pre></td></tr></table></div></figure>


<p>And the grand finale, the pinning preferences:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>vagrant@ubuntu-12-04:~$ apt-cache policy chef
</span><span class='line'>chef:
</span><span class='line'>  Installed: 10.14.4-2.ubuntu.11.04
</span><span class='line'>  Candidate: 10.16.2-1
</span><span class='line'>  Package pin: 10.16.2-1
</span><span class='line'>  Version table:
</span><span class='line'>     10.16.2-1 700
</span><span class='line'>        500 http://apt.opscode.com/ precise-0.10/main amd64 Packages
</span><span class='line'> *** 10.14.4-2.ubuntu.11.04 700
</span><span class='line'>        100 /var/lib/dpkg/status
</span></code></pre></td></tr></table></div></figure>


<p>I used <a href="https://github.com/opscode/bento">Opscode&rsquo;s bento box</a> for
Ubuntu 12.04, which comes with the &lsquo;omnibus&rsquo; Chef package version
10.14.4(-2.ubuntu.11.04). In order to install the newer Chef package
and demonstrate the pinning, I&rsquo;ll first remove it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>vagrant@ubuntu-12-04:~$ sudo dpkg --purge chef
</span></code></pre></td></tr></table></div></figure>


<p>Then, I install from the Opscode APT repository:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>vagrant@ubuntu-12-04:~$ sudo apt-get install chef
</span><span class='line'>...
</span><span class='line'>Setting up chef (10.16.2-1) ...
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>And the package is installed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>vagrant@ubuntu-12-04:~$ apt-cache policy chef
</span><span class='line'>chef:
</span><span class='line'>  Installed: 10.16.2-1
</span><span class='line'>  Candidate: 10.16.2-1
</span><span class='line'>  Package pin: 10.16.2-1
</span><span class='line'>  Version table:
</span><span class='line'> *** 10.16.2-1 700
</span><span class='line'>        500 http://apt.opscode.com/ precise-0.10/main amd64 Packages
</span><span class='line'>        100 /var/lib/dpkg/status
</span></code></pre></td></tr></table></div></figure>


<p>Currently the omnibus packages are <em>NOT</em> in the APT repository, since
they do not have additional dependencies they are installed simply
with dpkg. Don&rsquo;t use this particular recipe if you&rsquo;re using the
Omnibus packages. Instead, just marvel at the utility of this. Perhaps
instead, use the LWRPs in the apt cookbook to set up your own local
APT repository and pinning preferences.</p>

<h1>Conclusion</h1>

<p>Test Kitchen is a framework for isolated integration testing in
individual projects. As such, it has a lot of features, capabilities
and also moving parts. Hopefully this post helps you understand some
of them, and see how it works, and how you may be able to use it for
yourself. Or, if you want, simply grab the <code>apt_test::lwrps</code> recipe&rsquo;s
contents and stick them in your own cookbook that manages Chef package
installation and move along. :&ndash;)</p>

<p>All the code used in this post is available in the <a href="https://github.com/opscode-cookbooks/apt/">Opscode Cookbook&rsquo;s
organization &ldquo;apt&rdquo; repository</a>.</p>

<h2>Further Reading</h2>

<ul>
<li><a href="https://github.com/opscode/test-kitchen">Learn about Test Kitchen</a></li>
<li><a href="https://github.com/calavera/minitest-chef-handler">More about Minitest-Chef</a></li>
<li><a href="https://github.com/opscode-cookbooks/apt/commit/9996510bab27a9ea5f17e2f6362151dcbe708e89">apt cookbook commit</a></li>
<li><a href="http://www.opscode.com/blog/2012/07/20/on-the-level-testing-your-infrastructure/">BDD Testing Infrastructure</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
