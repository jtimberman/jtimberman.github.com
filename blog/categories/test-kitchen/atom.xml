<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: test-kitchen | jtimberman's Code Blog]]></title>
  <link href="http://jtimberman.housepub.org/blog/categories/test-kitchen/atom.xml" rel="self"/>
  <link href="http://jtimberman.housepub.org/"/>
  <updated>2014-01-16T23:47:29-07:00</updated>
  <id>http://jtimberman.housepub.org/</id>
  <author>
    <name><![CDATA[Joshua Timberman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Starting ChefSpec Example]]></title>
    <link href="http://jtimberman.housepub.org/blog/2013/05/09/starting-chefspec-example/"/>
    <updated>2013-05-09T21:10:00-06:00</updated>
    <id>http://jtimberman.housepub.org/blog/2013/05/09/starting-chefspec-example</id>
    <content type="html"><![CDATA[<p>This is a quick post to introduce what I&rsquo;m starting on testing with
<a href="http://acrmp.github.io/chefspec/">ChefSpec</a>. This is from Opscode&rsquo;s
Java cookbook. While the recipe tested is really trivial, it actually
has some nuances that require detailed testing.</p>

<p>First off, the whole thing is in
<a href="https://gist.github.com/jtimberman/5552182">this gist</a>. I&rsquo;m going to
break it down into sections below. The file is <code>spec/default_spec.rb</code>
in the java cookbook (not committed/pushed yet).</p>

<p>The chefspec gem is where all the magic comes from. You can read about
ChefSpec on <a href="http://acrmp.github.io/chefspec/">its home page</a>. You&rsquo;ll
need to install the gem, and from there, run <code>rspec</code> to run the tests.</p>

<p><code>ruby
require 'chefspec'
</code></p>

<p>Next, we&rsquo;re going to describe the default recipe. We&rsquo;re using the
regular rspec &ldquo;let&rdquo; block to set up the runner to converge the recipe.
Then, because we know/assume that the openjdk recipe is the default,
we can say that this chef run should include the <code>java::openjdk</code> recipe.</p>

<p>```ruby
describe &lsquo;java::default&rsquo; do
  let (:chef_run) { ChefSpec::ChefRunner.new.converge(&lsquo;java::default&rsquo;) }
  it &lsquo;should include the openjdk recipe by default&rsquo; do</p>

<pre><code>chef_run.should include_recipe 'java::openjdk'
</code></pre>

<p>  end
```</p>

<p>Next, this cookbook supports Windows. However, we have to set up the
runner with the correct platform and version (this comes from
<a href="https://github.com/customink/fauxhai">fauxhai</a>), and then set
attributes that are required for it to work.</p>

<p>```ruby
context &lsquo;windows&rsquo; do</p>

<pre><code>let(:chef_run) do
  runner = ChefSpec::ChefRunner.new(
    'platform' =&gt; 'windows',
    'version' =&gt; '2008R2'
    )
  runner.node.set['java']['install_flavor'] = 'windows'
  runner.node.set['java']['windows']['url'] = 'http://example.com/windows-java.msi'
  runner.converge('java::default')
end
it 'should include the windows recipe' do
  chef_run.should include_recipe 'java::windows'
end
</code></pre>

<p>  end
```</p>

<p>Next are the contexts for other install flavors. The default recipe
will include the right recipe based on the flavor, which is set by an
attribute. So we set up an rspec context for each recipe, then set the
install flavor attribute, and test that the right recipe was included.</p>

<p>```ruby
  context &lsquo;oracle&rsquo; do</p>

<pre><code>let(:chef_run) do
  runner = ChefSpec::ChefRunner.new
  runner.node.set['java']['install_flavor'] = 'oracle'
  runner.converge('java::default')
end
it 'should include the oracle recipe' do
  chef_run.should include_recipe 'java::oracle'
end
</code></pre>

<p>  end
  context &lsquo;oracle_i386&rsquo; do</p>

<pre><code>let(:chef_run) do
  runner = ChefSpec::ChefRunner.new
  runner.node.set['java']['install_flavor'] = 'oracle_i386'
  runner.converge('java::default')
end
it 'should include the oracle_i386 recipe' do
  chef_run.should include_recipe 'java::oracle_i386'
end
</code></pre>

<p>  end
```</p>

<p>Finally, a recent addition to this cookbook is support for
<a href="http://tickets.opscode.com/browse/COOK-2897">IBM&rsquo;s Java</a>. In addition
to setting the install flavor, we must set the URL where the IBM Java
package is (see the README in the commit linked in that ticket for
detail), and we can see that the <code>ibm</code> recipe is in fact included.</p>

<p>```ruby
  context &lsquo;ibm&rsquo; do</p>

<pre><code>let(:chef_run) do
  runner = ChefSpec::ChefRunner.new
  runner.node.set['java']['install_flavor'] = 'ibm'
  runner.node.set['java']['ibm']['url'] = 'http://example.com/ibm-java.bin'
  runner.converge('java::default')
end
it 'should include the ibm recipe' do
  chef_run.should include_recipe 'java::ibm'
end
</code></pre>

<p>  end
end
```</p>

<p>This is just the start of the testing for this cookbook. We&rsquo;ll need to
test each individual recipe. However as I&rsquo;ve not written that code
yet, I don&rsquo;t have examples. Stay tuned!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test Kitchen and Jenkins]]></title>
    <link href="http://jtimberman.housepub.org/blog/2013/05/08/test-kitchen-and-jenkins/"/>
    <updated>2013-05-08T23:53:00-06:00</updated>
    <id>http://jtimberman.housepub.org/blog/2013/05/08/test-kitchen-and-jenkins</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been working more with test-kitchen 1.0 alpha lately. The most
recent thing I&rsquo;ve done is set up a Jenkins build server to run
test-kitchen on cookbooks. This post will describe how I did this for
my own environment, and how you can use my new test-kitchen cookbook
in yours&hellip; if you&rsquo;re using Jenkins, anyway.</p>

<p>This is all powered by a relatively simple cookbook, and some
click-click-clicking in the Jenkins UI. I&rsquo;ll walk through what I did
to set up my Jenkins system.</p>

<p>First, I started with Debian 7.0 (stable, released this past weekend).
I installed the OS on it, and then bootstrapped with Chef. The initial
test was to make sure everything installed correctly, and the commands
were functioning. This was done in a VM, and is now handled by
test-kitchen itself (how meta!) in the cookbook, kitchen-jenkins.</p>

<p>The cookbook, <a href="http://ckbk.it/kitchen-jenkins">kitchen-jenkins</a> is
available on the Chef Community site. I started with a recipe, but
extracted it to a cookbook to make it easier to share with you all.
This is essentially a site cookbook that I use to customize my Jenkins
installation so I can run test-kitchen builds.</p>

<p>I apply the recipe with a role, because I love the roles primitive in
Chef :&ndash;). Here is the role I&rsquo;m using:</p>

<p>```javascript
{
  &ldquo;name&rdquo;: &ldquo;jenkins&rdquo;,
  &ldquo;description&rdquo;: &ldquo;Jenkins Build Server&rdquo;,
  &ldquo;run_list&rdquo;: [</p>

<pre><code>"recipe[kitchen-jenkins]"
</code></pre>

<p>  ],
  &ldquo;default_attributes&rdquo;: {</p>

<pre><code>"jenkins": {
  "server": {
    "home": "/var/lib/jenkins",
    "plugins": ["git-client", "git"],
    "version": "1.511",
    "war_checksum": "7e676062231f6b80b60e53dc982eb89c36759bdd2da7f82ad8b35a002a36da9a"
  }
}
</code></pre>

<p>  },
  &ldquo;json_class&rdquo;: &ldquo;Chef::Role&rdquo;,
  &ldquo;chef_type&rdquo;: &ldquo;role&rdquo;
}
```</p>

<p>The run list is only slightly different here than my actual role, I
have a few other things in the run list, which are other site-specific
recipes. Don&rsquo;t worry about those now. The jenkins attributes are set
to ensure the right plugins I need are available, and the right
version of jenkins is installed.</p>

<p>(I&rsquo;m going to leave out the details such as uploading cookbooks and
roles, if you&rsquo;re interested in test-kitchen, I&rsquo;ll assume you&rsquo;ve got
that covered :&ndash;).)</p>

<p>Once Chef completes on the Jenkins node, I can reach the Jenkins UI,
conveniently enough, via &ldquo;<a href="http://jenkins:8080">http://jenkins:8080</a>&rdquo; (because I&rsquo;ve made a
DNS entry, of course). The next release of the Jenkins cookbook will
have a resource for managing jobs, but for now I&rsquo;m just going to
create them in the webui.</p>

<p>For this example, I want to have two kinds of cookbook testing jobs.
The first, is to simply run foodcritic and fail on any correctness
matches. Second, I want to actually run test-kitchen.</p>

<p>A foodcritic job is simple:</p>

<ol>
<li>New job &ndash;> Build a free-style software project
&ldquo;foodcritic-COOKBOOK&rdquo;.</li>
<li>Source Code Management &ndash;> Git, supply the repository and the master
branch.</li>
<li>Set a build trigger to Poll SCM every 5 minutes, once an hour,
whenever you like.</li>
<li>Add a build step to execute a shell, &ldquo;foodcritic . -f correctness&rdquo;</li>
</ol>


<p>I created a view for foodcritic jobs, and added them all to the view
for easy organizing.</p>

<p>Next, I create a test-kitchen job:</p>

<ol>
<li>New job &ndash;> Copy existing job &ldquo;foodcritic-COOKBOOK&rdquo;, name the new
job &ldquo;test-COOKBOOK&rdquo;.</li>
<li>Uncheck Poll SCM, check &ldquo;Build after other projects are built&rdquo; and
enter &ldquo;foodcritic-COOKBOOK&rdquo;.</li>
<li>Replace the foodcritic command in the build shell command with
&ldquo;kitchen test&rdquo;.</li>
</ol>


<p>Now, the test kitchen test will only run if the foodcritic build
succeeds. If the cookbook has any correctness lint errors, then the
foodcritic build fails, and the kitchen build won&rsquo;t run. This will
help conserve resources.</p>

<p>Hopefully the <code>kitchen-jenkins</code> cookbook is helpful and this blog post
will give you some ideas how to go about adding cookbook tests to your
CI system, even if it&rsquo;s not Jenkins.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Anatomy of a Test Kitchen 1.0 Cookbook (Part 2)]]></title>
    <link href="http://jtimberman.housepub.org/blog/2013/03/19/anatomy-of-a-test-kitchen-1-dot-0-cookbook-part-2/"/>
    <updated>2013-03-19T09:28:00-06:00</updated>
    <id>http://jtimberman.housepub.org/blog/2013/03/19/anatomy-of-a-test-kitchen-1-dot-0-cookbook-part-2</id>
    <content type="html"><![CDATA[<p><strong>DISCLAIMER</strong> Test Kitchen 1.0 is still in <em>alpha</em> at the time of
  this post.</p>

<p><strong>Update</strong> We&rsquo;re no longer required to use bundler, and in fact
  recommend installing the required RubyGems in your globalRuby
  environment (#3 below).</p>

<p><strong>Update</strong> The log output from the various kitchen commands is not
  updated with the latest and greatest. Play along at home, it&rsquo;ll be
  okay :&ndash;).</p>

<p>This is a continuation from <a href="/blog/2013/03/19/anatomy-of-a-test-kitchen-1-dot-0-cookbook-part-1/">part 1</a></p>

<p>In order to run the tests then, we need a few things on our machine:</p>

<ol>
<li>VirtualBox and Vagrant (1.1+)</li>
<li>A compiler toolchain with XML/XSLT development headers (for building Gem dependencies)</li>
<li>A sane, working Ruby environment (Ruby 1.9.3 or greater)</li>
<li>Git</li>
</ol>


<p>It is outside the scope of this post to cover how to get all those
installed.</p>

<p>Once those are installed:</p>

<p><code>
% vagrant plugin install vagrant-berkshelf
% gem install berkshelf
% gem install test-kitchen --pre
% gem install kitchen-vagrant
</code></p>

<p>Test Kitchen combines the suite (default) with the platform names
(e.g., ubuntu-12.04). To run all the suites on all platforms, simply do:</p>

<p><code>
% kitchen test
</code></p>

<p>This will take awhile, especially if you don&rsquo;t already have the
Vagrant boxes on your system, as it will download each one. To make
this faster, we&rsquo;ll just run Ubuntu 12.04:</p>

<p><code>
% kitchen test default.*1204
</code></p>

<p>Test Kitchen 1.0 can take a regular expression for the instances to
test. This will match the box <code>default-ubuntu-12.04</code>. I could also
just say <code>12</code> as that will match the single entry in my kitchen list
(above).</p>

<p>It will take a few minutes to run Test Kitchen. Those familiar with
Chef know that if it encounters an unhandled exception, it exits with
a non-zero return code. This is important, because we know at the end
of a successful run, Chef did the right thing, assuming our recipe is
the right thing :&ndash;).</p>

<p>To recap the <a href="/blog/2013/03/19/anatomy-of-a-test-kitchen-1-dot-0-cookbook-part-1/">previous post</a>, we have a run list like this:</p>

<p><code>
["recipe[apt]", "recipe[minitest-handler]", "recipe[bluepill_test]"]
</code></p>

<p>Let&rsquo;s break down the output of our successful run. I&rsquo;ll show the
output first, and explain it after:</p>

<p><code>
Starting Kitchen
Cleaning up any prior instances of &lt;default-ubuntu-1204&gt;
Destroying &lt;default-ubuntu-1204&gt;
Finished destroying &lt;default-ubuntu-1204&gt; (0m0.00s).
Testing &lt;default-ubuntu-1204&gt;
Creating &lt;default-ubuntu-1204&gt;
</code></p>

<p>This is basic setup to ensure that &ldquo;The Kitchen&rdquo; is clean beforehand
and we don&rsquo;t have existing state interfering with the run.</p>

<p><code>
[vagrant command] BEGIN (vagrant up default-ubuntu-1204 --no-provision)
[default-ubuntu-1204] Importing base box 'canonical-ubuntu-12.04'...
[default-ubuntu-1204] Matching MAC address for NAT networking...
[default-ubuntu-1204] Clearing any previously set forwarded ports...
[default-ubuntu-1204] Forwarding ports...
[default-ubuntu-1204] -- 22 =&gt; 2222 (adapter 1)
</code></p>

<p>This will look familiar to Vagrant users, we&rsquo;re just getting some
basic setup from Vagrant initializing the box defined in the
<code>.kitchen.yml</code> (passed to the Vagrantfile by the kitchen-vagrant
plugin). This step does a <code>vagrant up --no-provision</code>.</p>

<p><code>
[Berkshelf] installing cookbooks...
[Berkshelf] Using bluepill (2.2.2) at path: '/Users/jtimberman/Development/opscode/cookbooks/bluepill'
[Berkshelf] Using apt (1.8.4)
[Berkshelf] Using yum (2.0.0)
[Berkshelf] Using minitest-handler (0.1.2)
[Berkshelf] Using bluepill_test (0.0.1) at path: './test/cookbooks/bluepill_test'
[Berkshelf] Using rsyslog (1.5.0)
[Berkshelf] Using chef_handler (1.1.0)
</code></p>

<p>Remember from the <a href="/blog/2013/03/19/anatomy-of-a-test-kitchen-1-dot-0-cookbook-part-1/">previous post</a> that we&rsquo;re using Berkshelf? This is
the integration with Vagrant that ensures that the cookbooks are
available. The first four, <code>apt</code>, <code>yum</code>, <code>minitest-handler</code> and
bluepill_test are defined in the Berksfile. The next, <code>rsyslog</code> is a
dependency of the <code>bluepill</code> cookbook (for rsyslog integration), and the
last, <code>chef_handler</code> is a dependency of <code>minitest-handler</code>. Berkshelf
extracts the dependencies from the cookbook metadata of each cookbook
defined in the Berksfile.</p>

<p><code>
[default-ubuntu-1204] Creating shared folders metadata...
[default-ubuntu-1204] Clearing any previously set network interfaces...
[default-ubuntu-1204] Running any VM customizations...
[default-ubuntu-1204] Booting VM...
[default-ubuntu-1204] Waiting for VM to boot. This can take a few minutes.
[default-ubuntu-1204] VM booted and ready for use!
[default-ubuntu-1204] Setting host name...
[default-ubuntu-1204] Mounting shared folders...
[default-ubuntu-1204] -- v-root: /vagrant
[default-ubuntu-1204] -- v-csc-1: /tmp/vagrant-chef-1/chef-solo-1/cookbooks
[vagrant command] END (0m48.76s)
Vagrant instance &lt;default-ubuntu-1204&gt; created.
Finished creating &lt;default-ubuntu-1204&gt; (0m53.12s).
</code></p>

<p>Again, this is familiar output to Vagrant users, where Vagrant is
making the cookbooks available to the instance.</p>

<p><code>
Converging &lt;default-ubuntu-1204&gt;
[vagrant command] BEGIN (vagrant ssh default-ubuntu-1204 --command 'should_update_chef() {\n...')
Installing Chef Omnibus (11.4.0)
Downloading Chef 11.4.0 for ubuntu...
Installing Chef 11.4.0
Selecting previously unselected package chef.
g database ...        60513 files and directories currently installed.)
Unpacking chef (from .../chef_11.4.0_amd64.deb) ...
Setting up chef (11.4.0-1.ubuntu.11.04) ...
Thank you for installing Chef!
[vagrant command] END (0m34.85s)
[vagrant command] BEGIN (vagrant provision default-ubuntu-1204)
[Berkshelf] installing cookbooks...
[Berkshelf] Using bluepill (2.2.2) at path: '/Users/jtimberman/Development/opscode/cookbooks/bluepill'
[Berkshelf] Using apt (1.8.4)
[Berkshelf] Using yum (2.0.0)
[Berkshelf] Using minitest-handler (0.1.2)
[Berkshelf] Using bluepill_test (0.0.1) at path: './test/cookbooks/bluepill_test'
[Berkshelf] Using rsyslog (1.5.0)
[Berkshelf] Using chef_handler (1.1.0)
</code></p>

<p>This part is interesting, in that we&rsquo;re going to install the Full
Stack Chef (Omnibus) package. This means it doesn&rsquo;t matter what the
underlying base box has installed, we get the right version of Chef.
This is defined in the <code>.kitchen.yml</code>. This is done through <code>vagrant
ssh</code> (second line). Then, Test Kitchen does <code>vagrant provision</code>. The
provisioning step is where Berkshelf happens, so we do see this happen
again (perhaps a bug?).</p>

<p><code>
[default-ubuntu-1204] Running provisioner: Vagrant::Provisioners::ChefSolo...
[default-ubuntu-1204] Generating chef JSON and uploading...
[default-ubuntu-1204] Running chef-solo...
INFO: *** Chef 11.4.0 ***
INFO: Setting the run_list to ["recipe[apt]", "recipe[minitest-handler]", "recipe[bluepill_test]"] from JSON
INFO: Run List is [recipe[apt], recipe[minitest-handler], recipe[bluepill_test]]
INFO: Run List expands to [apt, minitest-handler, bluepill_test]
INFO: Starting Chef Run for default-ubuntu-1204.vagrantup.com
</code></p>

<p>This is the start of the actual Chef run, using Chef Solo by Vagrant&rsquo;s
provisioner. Note that we have our suite&rsquo;s run list. I&rsquo;m going to skip
a lot of the Chef output because it isn&rsquo;t required. Note that a few
resources in the minitest&mdash;handler will report as failed, but they can
be ignored because it means that those tests were simply not implemented.</p>

<p><code>
INFO: Processing directory[/var/chef/minitest/bluepill_test] action create (minitest-handler::default line 50)
INFO: directory[/var/chef/minitest/bluepill_test] created directory /var/chef/minitest/bluepill_test
INFO: Processing cookbook_file[tests-bluepill_test-default] action create (minitest-handler::default line 53)
INFO: cookbook_file[tests-bluepill_test-default] created file /var/chef/minitest/bluepill_test/default_test.rb
INFO: Processing remote_directory[tests-support-bluepill_test-default] action create (minitest-handler::default line 60)
INFO: remote_directory[tests-support-bluepill_test-default] created directory /var/chef/minitest/bluepill_test/support
INFO: Processing cookbook_file[/var/chef/minitest/bluepill_test/support/helpers.rb] action create (dynamically defined)
INFO: cookbook_file[/var/chef/minitest/bluepill_test/support/helpers.rb] mode changed to 644
INFO: cookbook_file[/var/chef/minitest/bluepill_test/support/helpers.rb] created file /var/chef/minitest/bluepill_test/support/helpers.rb
</code></p>

<p>These are the relevant parts of the minitest-handler recipe, where it
has copied the tests from the <code>bluepill_test</code> cookbook into place.</p>

<p><code>
INFO: Processing gem_package[i18n] action install (bluepill::default line 20)
INFO: Processing gem_package[bluepill] action install (bluepill::default line 24)
INFO: Processing directory[/etc/bluepill] action create (bluepill::default line 34)
INFO: directory[/etc/bluepill] created directory /etc/bluepill
INFO: directory[/etc/bluepill] owner changed to 0
INFO: directory[/etc/bluepill] group changed to 0
INFO: Processing directory[/var/run/bluepill] action create (bluepill::default line 34)
INFO: directory[/var/run/bluepill] created directory /var/run/bluepill
INFO: directory[/var/run/bluepill] owner changed to 0
INFO: directory[/var/run/bluepill] group changed to 0
INFO: Processing directory[/var/lib/bluepill] action create (bluepill::default line 34)
INFO: directory[/var/lib/bluepill] created directory /var/lib/bluepill
INFO: directory[/var/lib/bluepill] owner changed to 0
INFO: directory[/var/lib/bluepill] group changed to 0
INFO: Processing file[/var/log/bluepill.log] action create_if_missing (bluepill::default line 41)
INFO: entered create
INFO: file[/var/log/bluepill.log] owner changed to 0
INFO: file[/var/log/bluepill.log] group changed to 0
INFO: file[/var/log/bluepill.log] mode changed to 755
INFO: file[/var/log/bluepill.log] created file /var/log/bluepill.log
</code></p>

<p>Recall from the <a href="/blog/2013/03/19/anatomy-of-a-test-kitchen-1-dot-0-cookbook-part-1/">previous post</a> that the <code>bluepill_test</code> recipe includes
the <code>bluepill</code> recipe. This is the basic setup of bluepill.</p>

<p><code>
INFO: Processing package[nc] action install (bluepill_test::default line 4)
INFO: Processing template[/etc/bluepill/test_app.pill] action create (bluepill_test::default line 16)
INFO: template[/etc/bluepill/test_app.pill] updated content
INFO: Processing bluepill_service[test_app] action enable (bluepill_test::default line 18)
INFO: Processing bluepill_service[test_app] action load (bluepill_test::default line 18)
INFO: Processing bluepill_service[test_app] action start (bluepill_test::default line 18)
INFO: Processing link[/etc/init.d/test_app] action create (/tmp/vagrant-chef-1/chef-solo-1/cookbooks/bluepill/providers/service.rb line 30)
INFO: link[/etc/init.d/test_app] created
INFO: Chef Run complete in 81.099185824 seconds
</code></p>

<p>And this is the rest of the <code>bluepill_test</code> recipe. It sets up a test
service that will basically be a netcat process listening on a port.
Let&rsquo;s take a moment here and discuss what we have.</p>

<p>First, we have successfully converged the default recipe in the
<code>bluepill</code> cookbook via its inclusion in <code>bluepill_test</code>. This is
awesome, because we know the recipe works exactly as we defined it,
since Chef resources are declarative, and Chef exits if there&rsquo;s a
problem.</p>

<p>Second, we have successfully setup a service managed by bluepill
itself using the LWRP included in the <code>bluepill</code> cookbook,
<code>bluepill_service</code>. This means we know that the underlying provider
configured all the resources correctly.</p>

<p>At this point, we could say &ldquo;Ship it!&rdquo; and release the cookbook,
knowing it will do what we require. However, this may be disingenuous
because we don&rsquo;t know if the behavior of the system after all this
runs is actually correct. Therefore we look to the next segment of
output from Chef, from minitest:</p>

<p><code>
INFO: Running report handlers
Run options: -v --seed 38794
\# Running tests:
recipe::bluepill_test::default#test_0001_the_default_log_file_must_exist_cook_1295_ =
0.00 s = .
recipe::bluepill_test::default::create a bluepill configuration file#test_0001_anonymous =
0.00 s = .
recipe::bluepill_test::default::create a bluepill configuration file#test_0002_must_be_valid_ruby =
0.06 s = .
recipe::bluepill_test::default::runs the application as a service#test_0001_anonymous =
0.72 s = .
recipe::bluepill_test::default::runs the application as a service#test_0002_anonymous =
0.71 s = .
recipe::bluepill_test::default::spawn a netcat tcp client repeatedly#test_0001_should_receive_a_tcp_connection_from_netcat =
2.24 s = .
Finished tests in 3.746002s, 1.6017 tests/s, 1.8687 assertions/s.
6 tests, 7 assertions, 0 failures, 0 errors, 0 skips
</code></p>

<p>This is performed by the minitest-handler, which runs the tests copied
from the <code>bluepill_test</code> cookbook before. It&rsquo;s outside the scope of
this post to describe how to write minitest-chef tests, but we can
talk about the output.</p>

<p>We have 6 separate tests that perform 7 assertions, and they all
passed. The tests are asserting:</p>

<ol>
<li>The log file is created, and by the full name of the test, this is
to check for a regression from
<a href="http://tickets.opscode.com/browse/COOK-1295">COOK-1295</a>.</li>
<li>The <code>.pill</code> config file for the service must exist and be valid
Ruby.</li>
<li>The bluepill service must actually be enabled and running, thereby
testing that those actions in the LWRP work.</li>
<li>The running service, which listens on a TCP port, must be up and
available, thereby testing that bluepill started the service
correctly.</li>
</ol>


<p><code>
[vagrant command] END (1m29.24s)
Finished converging &lt;default-ubuntu-1204&gt; (2m15.45s).
Setting up &lt;default-ubuntu-1204&gt;
Finished setting up &lt;default-ubuntu-1204&gt; (0m0.00s).
Verifying &lt;default-ubuntu-1204&gt;
Finished verifying &lt;default-ubuntu-1204&gt; (0m0.00s).
Destroying &lt;default-ubuntu-1204&gt;
[vagrant command] BEGIN (vagrant destroy default-ubuntu-1204 -f)
[default-ubuntu-1204] Forcing shutdown of VM...
[Berkshelf] cleaning Vagrant's shelf
[default-ubuntu-1204] Destroying VM and associated drives...
[vagrant command] END (0m3.68s)
Vagrant instance &lt;default-ubuntu-1204&gt; destroyed.
Finished destroying &lt;default-ubuntu-1204&gt; (0m4.04s).
Finished testing &lt;default-ubuntu-1204&gt; (3m12.62s).
Kitchen is finished. (3m12.62s)
</code></p>

<p>This output shows Test Kitchen cleaning up after itself. We destroy
the Vagrant instance on a successful convergence and test run in Chef,
because further investigation is not required. If the test failed for
some reason, Test Kitchen leaves it running so you can log into the
machine and poke around to find out what went wrong. Then simply
correct the required part of the cookbook (recipes, tests, etc) and
rerun Test Kitchen. For example:</p>

<p><code>
% bundle exec kitchen login 1204
vagrant@ubuntu-1204$ ... run some commands
vagrant@ubuntu-1204$ ^D
% bundle exec kitchen converge 1204
</code></p>

<p>My goal with these posts is to get some information out for folks to
consider when examining Test Kitchen 1.0 alpha for their own projects.
There&rsquo;s a lot more to Test Kitchen, such as managing non-cookbook
projects, or even using other kinds of tests. We&rsquo;ll have more
documentation and guides as we get the 1.0 release out.</p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Anatomy of a Test Kitchen 1.0 Cookbook (Part 1)]]></title>
    <link href="http://jtimberman.housepub.org/blog/2013/03/19/anatomy-of-a-test-kitchen-1-dot-0-cookbook-part-1/"/>
    <updated>2013-03-19T09:28:00-06:00</updated>
    <id>http://jtimberman.housepub.org/blog/2013/03/19/anatomy-of-a-test-kitchen-1-dot-0-cookbook-part-1</id>
    <content type="html"><![CDATA[<p><strong>DISCLAIMER</strong> Test Kitchen 1.0 is still in <em>alpha</em> at the time of
  this post.</p>

<p><strong>Update</strong> Remove Gemfile and Vagrantfile</p>

<p>Let&rsquo;s take a look at the anatomy of a cookbook set up with
test-kitchen 1.0-alpha.</p>

<p><strong>Note</strong> It is outside the scope of this post to discuss how to write
  minitest-chef tests or &ldquo;test cookbook&rdquo; recipes. Use the cookbook
  described below as an example to get ideas for writing your own.</p>

<p>This is the full directory tree of Opscode&rsquo;s
&ldquo;<a href="http://ckbk.it/bluepill">bluepill</a>&rdquo; cookbook:</p>

<p>```
├── .kitchen.yml
├── Berksfile
├── CHANGELOG.md
├── CONTRIBUTING
├── LICENSE
├── README.md
├── TESTING.md
├── attributes
│   └── default.rb
├── metadata.rb
├── providers
│   └── service.rb
├── recipes
│   ├── default.rb
│   └── rsyslog.rb
├── resources
│   └── service.rb
├── templates
│   └── default
│       ├── bluepill_init.fedora.erb
│       ├── bluepill_init.freebsd.erb
│       ├── bluepill_init.rhel.erb
│       └── bluepill_rsyslog.conf.erb
└── test</p>

<pre><code>└── cookbooks
    └── bluepill_test
        ├── README.md
        ├── attributes
        │   └── default.rb
        ├── files
        │   └── default
        │       └── tests
        │           └── minitest
        │               ├── default_test.rb
        │               └── support
        │                   └── helpers.rb
        ├── metadata.rb
        ├── recipes
        │   └── default.rb
        └── templates
            └── default
                └── test_app.pill.erb
</code></pre>

<p>```</p>

<p>I&rsquo;ll assume the reader is familiar with basic components of cookbooks
like &ldquo;recipes,&rdquo; &ldquo;templates,&rdquo; and the top-level documentation files, so
let&rsquo;s trim this down to just the areas of concern for Test Kitchen.</p>

<p>```
├── .kitchen.yml
├── Berksfile
└── test</p>

<pre><code>└── cookbooks
    └── bluepill_test
        ├── attributes
        │   └── default.rb
        ├── files
        │   └── default
        │       └── tests
        │           └── minitest
        │               ├── default_test.rb
        │               └── support
        │                   └── helpers.rb
        ├── recipes
        │   └── default.rb
        └── templates
            └── default
                └── test_app.pill.erb
</code></pre>

<p>```</p>

<p>Note that this cookbook has a &ldquo;test&rdquo; cookbook. I&rsquo;ll get to that in a
minute.</p>

<p>First of all, we have the <code>.kitchen.yml</code>. This is the project
definition that describes what is required to run test kitchen itself.
This particular file tells Test Kitchen to bring up nodes of the
platforms we&rsquo;re testing with Vagrant, and defines the boxes with their
box names and URLs to download. You can view the full
<a href="https://github.com/opscode-cookbooks/bluepill/blob/master/.kitchen.yml"><code>.kitchen.yml</code> in the Git repo</a>.
For now, I&rsquo;m going to focus on the <code>suite</code> stanza in the
<code>.kitchen.yml</code>. This defines how Chef will run when Test Kitchen
brings up the Vagrant machine.</p>

<p><code>yaml
- name: default
  run_list:
  - recipe[minitest-handler]
  - recipe[bluepill_test]
  attributes: {bluepill: { bin: "/opt/chef/embedded/bin/bluepill" } }
</code></p>

<p>Each platform has a recipe it will run with, in this case <code>apt</code> and
<code>yum</code>. Then the suite&rsquo;s run list is appended, so for example, the final run list of
the Ubuntu 12.04 node will be:</p>

<p><code>
["recipe[apt]", "recipe[minitest-handler]", "recipe[bluepill_test]"]
</code></p>

<p>We have apt so the apt cache on the node is updated before Chef does
anything else. This is pretty typical so we put it in the default run
list of each Ubuntu box.</p>

<p>The <code>minitest-handler</code> recipe existing in the run list means that the
Minitest Chef Handler will be run at the end of the Chef run. In this
case, it will use the tests from the test cookbook, <code>bluepill_test</code>.</p>

<p>The bluepill cookbook itself does not depend on any of these
cookbooks. So how does Test Kitchen know where to get them? Enter the
next file in the list above, <code>Berksfile</code>. This informs
<a href="http://berkshelf.com">Berkshelf</a> which cookbooks to download. The
relevant excerpt from the Berksfile is:</p>

<p><code>ruby
cookbook "apt"
cookbook "yum"
cookbook "minitest-handler"
cookbook "bluepill_test", :path =&gt; "./test/cookbooks/bluepill_test"
</code></p>

<p>Based on the
<a href="https://github.com/opscode-cookbooks/bluepill/blob/master/Berksfile">Berksfile</a>,
it will download apt, yum, and minitest-handler from the Chef
Community site. It will also use the
<a href="https://github.com/opscode-cookbooks/bluepill/tree/master/test/cookbooks/bluepill_test">bluepill_test</a>
included in the bluepill cookbook. This is transparent to the user, as
I&rsquo;ll cover in a moment.</p>

<p>Test Kitchen&rsquo;s Vagrant driver plugin handles all the configuration of
Vagrant itself based on the entries in the <code>.kitchen.yml</code>. To get the
Berkshelf integration in the Vagrant boxes, we need to install the
vagrant-berkshelf plugin in Vagrant. Then, we automatically get
Berkshelf&rsquo;s Vagrant integration, meaning all the cookbooks defined in
the Berksfile are going to be available on the box we bring up.</p>

<p>Remember the test cookbook mentioned above? It&rsquo;s the next component.
The default <code>suite</code> in <code>.kitchen.yml</code> puts <code>bluepill_test</code> in the run
list. This particular recipe will include the <code>bluepill</code> default
recipe, then it sets up a test service using the <code>bluepill_service</code>
LWRP. This means that when the nodes brought up by Test Kitchen via
Vagrant converge, they&rsquo;ll have bluepill installed and set up, and then
a service running that we can test the final behavior. Since Chef will
exit with a non-zero return code if it encounters an exception, we
know that a successful run means everything is configured as defined
in the recipes, and we can run tests against the node.</p>

<p>The tests we&rsquo;ll run are written with the
<a href="https://github.com/calavera/minitest-chef-handler/">Minitest Chef Handler</a>.
These are defined in the test cookbook, <code>files/default/tests/minitest</code>
directory. The <code>minitest-handler</code> cookbook (also in the default suite
run list) will execute the
<a href="https://github.com/opscode-cookbooks/bluepill/blob/master/test/cookbooks/bluepill_test/files/default/tests/minitest/default_test.rb">default_test</a>
tests.</p>

<p>In the next post, we&rsquo;ll look at how to run Test Kitchen, and what all
the output means.</p>
]]></content>
  </entry>
  
</feed>
