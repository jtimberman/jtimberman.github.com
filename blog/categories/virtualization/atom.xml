<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: virtualization | jtimberman's Code Blog]]></title>
  <link href="http://jtimberman.housepub.org/blog/categories/virtualization/atom.xml" rel="self"/>
  <link href="http://jtimberman.housepub.org/"/>
  <updated>2014-12-29T11:42:29-07:00</updated>
  <id>http://jtimberman.housepub.org/</id>
  <author>
    <name><![CDATA[Joshua Timberman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Getting Started With Zones on OmniOS]]></title>
    <link href="http://jtimberman.housepub.org/blog/2013/06/23/getting-started-with-zones-on-omnios/"/>
    <updated>2013-06-23T23:47:00-06:00</updated>
    <id>http://jtimberman.housepub.org/blog/2013/06/23/getting-started-with-zones-on-omnios</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve become enamored with
<a href="http://wiki.illumos.org/display/illumos/illumos+Home">IllumOS</a>
recently. Years ago, I used Solaris (2.5.1 through 8) at IBM.
Unfortunately (for me), I stopped using it before Solaris 10 brought
all the cool toys to the yard &ndash; zones, zfs, dtrace, SMF. Thanks to
OmniTI&rsquo;s excellent IllumOS distribution,
<a href="http://omnios.omniti.com">OmniOS</a>, I&rsquo;m getting acclimated with the
awesomeness. I plan to write more about my experiences here.</p>

<p>First up, I spent today playing with zones. Zones are a kernel-level
container technology similar to Linux containers/cgroups, or BSD
jails. They&rsquo;re fast and lightweight. At least two of the plans I have
for them:</p>

<ol>
<li>Segregating the services on my home-server.</li>
<li>Adding support to various tools in Chef&rsquo;s ecosystem.</li>
</ol>


<p>The following is basically a compilation of several different blog
posts and documentation collections I&rsquo;ve been poring over. Like most
technical blog writers, I&rsquo;m posting this so I can find it later :&ndash;).</p>

<h2>Hardware</h2>

<p>I have a number of options for learning OmniOS. I have spare hardware,
or VMware, or
<a href="http://omnios.omniti.com/wiki.php/Installation#UsingVagrant">OmniTI&rsquo;s Vagrant box</a>.
I&rsquo;m doing all three of these, but the main use will be on physical
hardware, as I&rsquo;m planning to port the aforementioned server to OmniOS
(#1, above).</p>

<p>The details of the hardware are not important, except that I have a
hard disk device <code>c3t1d0</code>, and a physical NIC device <code>nge1</code> that are
devoted to zones. To adapt these instructions for your own
installation, change those device names where appropriate.</p>

<p>You can find the name of the disk device to use in your system with
the <code>format</code> command.</p>

<pre><code>root@menthe:~# format
Searching for disks...done


AVAILABLE DISK SELECTIONS:
       0. c3t0d0 &lt;ATA-WDCWD1500AHFD-0-7QR5 cyl 18238 alt 2 hd 255 sec 63&gt;
          /pci@0,0/pci1043,cb84@d/disk@0,0
       1. c3t1d0 &lt;ATA-SAMSUNG HD501LJ-0-12-465.76GB&gt;
          /pci@0,0/pci1043,cb84@d/disk@1,0
Specify disk (enter its number): ^D
</code></pre>

<p>Here I wanted to use the Samsung disk.</p>

<p>Use <code>dladm</code> to find the network devices:</p>

<pre><code>root@menthe:~# dladm show-phys
LINK         MEDIA                STATE      SPEED  DUPLEX    DEVICE
nge0         Ethernet             up         1000   full      nge0
nge1         Ethernet             up         1000   full      nge1
</code></pre>

<h2>Setup</h2>

<p>The example zone here is named <code>base</code>. Replace <code>base</code> with any zone
name you wish, e.g. <code>webserver37</code> or <code>noodlebarn</code>. It&rsquo;s also worth
noting that I&rsquo;m going to use DHCP, rather than static networking here.
There are plenty of guides out there for static networking, and I had
to hunt around for DHCP. Also worth noting is that this was all
performed right after installing the OS.</p>

<p>First, create a zpool to use for zones. This is a 500G disk, so I have
plenty of space.</p>

<pre><code>zpool create zones c3t1d0
</code></pre>

<p>Next, create a VNIC on the interface which is devoted to zones
(<code>nge1</code>). It can be named anything, but must end with a number.</p>

<pre><code>dladm create-vnic -l nge1 vnicbase0
</code></pre>

<p>Rather than use the <code>zonecfg</code> REPL, I used the following configuration
file, for repeatability.</p>

<pre><code>create -b
set zonepath=/zones/base
set ip-type=exclusive
set autoboot=false
add net
set physical=vnicbase0
end
commit
</code></pre>

<p>Use this config file to configure the zone with <code>zonecfg</code>.</p>

<pre><code>zonecfg -z base -f base.conf
</code></pre>

<p>Now we&rsquo;re ready to install the OS in the new zone. This may take
awhile as all the packages need to be downloaded.</p>

<pre><code>zoneadm -z base install
</code></pre>

<p>The default <code>nsswitch.conf(4)</code> does not use DNS for hosts. This is
fairly standard for Solaris/IllumOS. Also, the <code>resolv.conf(4)</code> is not
configured automatically, which is a departure from automagic Linux
distributions (and a thing I agree with).</p>

<pre><code>cp /etc/nsswitch.dns /etc/resolv.conf /zones/base/root/etc
</code></pre>

<p>OmniOS does not use
<a href="http://lists.omniti.com/pipermail/omnios-discuss/2012-December/000323.html"><code>sysidcfg</code></a>,
so the way to make the new zone boot up with an interface configured
for DHCP is to write out the <code>ipadm.conf</code> configuration for <code>ipadm</code>.
The following is <code>base.ipadm.conf</code> that I used, with the <code>vnicbase0</code>
VNIC created with <code>dladm</code> earlier.</p>

<pre><code>_ifname=vnicbase0;_family=2;
_ifname=vnicbase0;_family=26;
_ifname=vnicbase0;_aobjname=vnicbase0/v4;_dhcp=-1,no;
</code></pre>

<p>Copy this file to the zone.</p>

<pre><code>cp base.ipadm.conf /zones/base/root/etc/ipadm/ipadm.conf
</code></pre>

<p>Now, boot the zone.</p>

<pre><code>zoneadm -z base boot
</code></pre>

<p>Now you can log into the newly created zone and verify that things are
working, and do any further configuration required.</p>

<pre><code>zlogin -e ! base
</code></pre>

<p>I use <code>!</code> as the escape character because I&rsquo;m logging into my global
zone over SSH. This means you disconnect with <code>!.</code> instead of <code>~.</code>.</p>

<p>Once complete, the zone can be cloned.</p>

<h2>Clone a Zone</h2>

<p>I&rsquo;m going to clone the <code>base</code> zone to <code>clonebase</code>. Again, rename this
to whatever you like.</p>

<p>First, a zone must be halted before it can be cloned.</p>

<pre><code>zoneadm -z base halt
</code></pre>

<p>Now, create a new VNIC for the zone.</p>

<pre><code>dladm create-vnic -l nge1 clonebase
</code></pre>

<p>Read the <code>base</code> zone&rsquo;s configuration, and replace <code>base</code> with
<code>clonebase</code>.</p>

<pre><code>zonecfg -z base export | sed 's/base/clonebase/g' | tee clonebase.conf
</code></pre>

<p>Then, create the new zone configuration, and clone the base zone.</p>

<pre><code>zonecfg -z clonebase -f clonebase.conf
zoneadm -z clonebase clone base
</code></pre>

<p>Again, ensure that the network configuration to use DNS is available.</p>

<pre><code>cp /etc/nsswitch.dns /etc/resolv.conf /zones/clonebase/root/etc
</code></pre>

<p>Create the <code>ipadm.conf</code> config for the new zone. I named it <code>clonebase.ipadm.conf</code></p>

<pre><code>sed 's/base/clonebase/g' base.ipadm.conf &gt; clonebase.ipadm.conf
</code></pre>

<p>Now copy this to the zone.</p>

<pre><code>cp clonebase.ipadm.conf /zones/clonebase/root/etc/ipadm/ipadm.conf
</code></pre>

<p>Finally, boot the new zone.</p>

<pre><code>zoneadm -z clonebase boot
</code></pre>

<p>Login and verify the new zone.</p>

<pre><code>zlogin -e ! clonebase
</code></pre>

<h2>Cleaning Up</h2>

<p>Use the following to clean up the zone when it&rsquo;s not needed anymore.</p>

<pre><code>zone=clonebase
zoneadm -z $zone halt
zoneadm -z $zone uninstall -F
zonecfg -z $zone delete -F
</code></pre>

<h2>Sans Prose</h2>

<p><a href="https://gist.github.com/jtimberman/5848129">This gist</a> contains all
the things I did above minus the prose.</p>

<h2>What&rsquo;s Next?</h2>

<p>I have a few goals in mind for this system. First of all, I want to
manage the zones with Chef, of course. Some of the functions of the
zones may be:</p>

<ul>
<li>IPS package repository</li>
<li>Omnibus build system for OmniOS</li>
<li>Adding OmniOS support to cookbooks</li>
</ul>


<p>I also want to facilitate plugins and the ecosystem around Chef for
IllumOS, including zone based knife, vagrant and test-kitchen plugins.</p>

<p>Finally, I plan to convert my Linux home-server to OmniOS. There are a
couple things I&rsquo;m running that will require Linux (namely
<a href="http://www.plexapp.com">Plex</a>), but fortunately,
<a href="http://omnios.omniti.com/wiki.php/VirtualMachinesKVM">OmniOS has KVM</a>
thanks to <a href="http://smartos.org">SmartOS</a>.</p>

<h2>References</h2>

<p>The following links were helpful in composing this post, and of course
for the reference material they contain.</p>

<ul>
<li><a href="http://zero-knowledge.org/post/74">http://zero-knowledge.org/post/74</a></li>
<li><a href="https://blogs.oracle.com/mandalika/entry/solaris_10_zone_creation_for">https://blogs.oracle.com/mandalika/entry/solaris_10_zone_creation_for</a></li>
<li><a href="http://www.oracle.com/technetwork/articles/servers-storage-admin/o11-092-s11-zones-intro-524494.html">http://www.oracle.com/technetwork/articles/servers-storage-admin/o11-092-s11-zones-intro-524494.html</a></li>
<li><a href="http://lists.omniti.com/pipermail/omnios-discuss/2012-December/000322.html">http://lists.omniti.com/pipermail/omnios-discuss/2012-December/000322.html</a></li>
<li><a href="http://lists.omniti.com/pipermail/omnios-discuss/2012-December/000323.html">http://lists.omniti.com/pipermail/omnios-discuss/2012-December/000323.html</a></li>
<li><a href="http://omnios.omniti.com/ticket.php/11">http://omnios.omniti.com/ticket.php/11</a> (related to above list post(s))</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Multiple Provisioners in Vagrant]]></title>
    <link href="http://jtimberman.housepub.org/blog/2012/08/10/vagrant-multiple-provisioners/"/>
    <updated>2012-08-10T11:39:00-06:00</updated>
    <id>http://jtimberman.housepub.org/blog/2012/08/10/vagrant-multiple-provisioners</id>
    <content type="html"><![CDATA[<p><strong>Update</strong> Chef 10.14 is
  <a href="http://www.opscode.com/blog/2012/09/07/chef-10-14-0-released/">released</a>.
  I removed the &ldquo;<code>--pre</code>&rdquo; from the gem install commands but otherwise
  left this post, since it was written by Past Me.</p>

<p>As you may be aware, the next release of Chef, 10.14, is in
<a href="http://lists.opscode.com/sympa/arc/chef-dev/2012-07/msg00021.html">beta testing</a>.
Most publicly available baseboxes for <a href="http://vagrantup.com">Vagrant</a>
aren&rsquo;t built for the beta. But perhaps you want to try it out?</p>

<p>Vagrant to the rescue! Besides the Chef solo and client provisioners,
Vagrant has a shell provisioner, too. It allows you to pass in an
inline command, or a shell script. This example builds on my
<a href="/blog/2012/03/18/multivm-vagrantfile-for-chef/">MultiVM Vagrantfile for Chef post</a>.
You may wish to refer to the full file in that post for complete
context.</p>

<p>First, the shell provisioner line looks like this:</p>

<p><code>ruby
config.vm.provision :shell, :inline =&gt; "sudo /opt/chef/embedded/bin/gem install chef --no-ri --no-rdoc"
</code></p>

<p>It goes in the config block. Remember that <code>cookbook_testers</code> is a
hash of data about the multiple VMs I&rsquo;m using, so they would all get
launched with this provisioner.</p>

<p>```ruby
Vagrant::Config.run do |global_config|
  cookbook_testers.each_pair do |name, options|</p>

<pre><code>global_config.vm.define name do |config|
  ### Use shell for great justice!
  config.vm.provision :shell, :inline =&gt; "sudo /opt/chef/embedded/bin/gem install chef --no-ri --no-rdoc"
  ### chef-client (allthethings)
  config.vm.provision :chef_client do |chef|
    # ... chef provisioner is the same as before
  end
end
</code></pre>

<p>  end
end
```</p>

<p>And now, a <code>vagrant up</code> on my Ubuntu 12.04 VM, with the less
interesting output truncated:</p>

<p><code>
% vagrant up precise
...
[precise] Running provisioner: Vagrant::Provisioners::Shell...
Successfully installed chef-10.14.0.beta.3
1 gem installed
[precise] Running provisioner: Vagrant::Provisioners::ChefClient...
...
[precise] Running chef-client...
...
[Fri, 10 Aug 2012 17:50:23 +0000] INFO: *** Chef 10.14.0.beta.3 ***
...
[Fri, 10 Aug 2012 17:50:37 +0000] INFO: Chef Run complete in 11.323208919 seconds
</code></p>

<p>One of the most compelling features of Chef 10.14 is the introduction
of
<a href="http://tickets.opscode.com/browse/CHEF-13">&ldquo;no-op&rdquo; or &ldquo;dry-run&rdquo; mode</a>,
also called
&ldquo;<a href="http://lists.opscode.com/sympa/arc/chef/2012-07/msg00025.html">Why Run Mode</a>&rdquo;.
However, at this time, neither arbitrary command-line arguments nor why-run
mode itself are supported in Vagrant. I opened a
<a href="https://github.com/mitchellh/vagrant/pull/1067">pull request</a> for the
former, which will allow the latter easily. Of course, vagrant is
highly valuable for doing testing by <em>actually running</em> your recipes,
but I think arbitrary command-line options will be a welcome feature
for other purposes.</p>

<p>Another use case for this particular method of using Vagrant
provisioners is to update RubyGems inside an &ldquo;Omnibus&rdquo; full stack
install, to resolve
<a href="http://tickets.opscode.com/browse/CHEF-3295">this bug</a>, or
<a href="http://tickets.opscode.com/browse/CHEF-2871">this request</a>.</p>

<p><code>ruby
config.vm.provision :shell, :inline =&gt; "sudo /opt/chef/embedded/bin/gem update --system"
</code></p>

<p>These two example commands can be combined in a single <code>:inline</code>, or
as a shell script.</p>

<p><code>ruby
config.vm.provision :shell, :path =&gt; "gem-updater.sh"
</code></p>

<p>And the shell script, <code>gem-updater.sh</code> in the same directory as the Vagrantfile:</p>

<p>```sh</p>

<h1>!/bin/sh</h1>

<p>sudo /opt/chef/embedded/bin/gem update &mdash;system
sudo /opt/chef/embedded/bin/gem install chef &mdash;no-ri &mdash;no-rdoc
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MultiVM Vagrantfile for Chef]]></title>
    <link href="http://jtimberman.housepub.org/blog/2012/03/18/multivm-vagrantfile-for-chef/"/>
    <updated>2012-03-18T00:16:00-06:00</updated>
    <id>http://jtimberman.housepub.org/blog/2012/03/18/multivm-vagrantfile-for-chef</id>
    <content type="html"><![CDATA[<p>Most commonly, <a href="http://vagrantup.com">Vagrant&rsquo;s</a>
Vagrantfile describes only a single VM. That&rsquo;s fine, but most
environments separate functionality to different servers (e.g.,
database and web app). For this reason, Vagrantfiles can be set up for
<a href="http://docs.vagrantup.com/v2/multi-machine/index.html">multi-VM arrangements</a>.</p>

<p>However, I&rsquo;m going to describe a different use case for multiple VMs.</p>

<h2>Testing Multiple Distributions</h2>

<p>As a cookbook developer for a variety of platforms and platform
versions, I have to ensure changes do not break existing functionality
across supported platforms &ndash; namely current releases of Ubuntu and
CentOS (and their parents, Debian and RHEL).</p>

<p>Enter Vagrant&rsquo;s Multi-VM Vagrantfile.</p>

<p>While I <a href="/blog/2012/02/15/testing-with-fission/">posted recently</a>
about testing with VMware Fusion, I am using Vagrant more. Primarily
because Opscode uses Vagrant internally &ndash;
<a href="http://twitter.com/schisamo">Seth Chisamore</a> built a multi-VM
Vagrantfile for bringing up our full stack. The specifics in his
Vagrantfile are tuned to that particular use case which is different
than mine. However, there are similar patterns that I adapted.</p>

<h2>Vagrantfile</h2>

<p>The Vagrantfile configures four virtual machines:</p>

<ul>
<li>CentOS 5.7 and 6.2</li>
<li>Ubuntu 10.04 and 11.10</li>
</ul>


<p>I built my VMs with <a href="https://github.com/jedi4ever/veewee">veewee</a>
templates that install Chef via the
<a href="http://opscode.com/chef/install">omnibus built chef-full package</a>.
That way I have a consistent installation that reflects what Opscode
will ship as the easiest and best supported way to install Chef.</p>

<p>Part of the magic of this configuration is that I&rsquo;m going to reuse my
knife configuration. The Vagrantfile itself goes into my cookbook
testing Chef Repository.</p>

<p>```ruby</p>

<pre><code>require 'chef'
require 'chef/config'
require 'chef/knife'

current_dir = File.dirname(__FILE__)
Chef::Config.from_file(File.join(current_dir, '.chef', 'knife.rb'))
</code></pre>

<p>```</p>

<p>Next, I&rsquo;m going to describe data about the virtual machines that I&rsquo;m
going to run. This is a hash of named VMs, <code>centos5</code>, <code>lucid</code>, etc. I
assign their hostname, and give them a host only IP address. I also
set an initial run list, since Vagrant will (noisily) complain if the
run list is empty in a Chef provisioner.</p>

<p><em>Note</em> I have a <code>base</code> role as a holder, the actual relevant things
 are in the <code>base_redhat</code> and <code>base_debian</code> roles. The details really
 don&rsquo;t matter, though.</p>

<p>```ruby
cookbook_testers = {
  :centos5 => {</p>

<pre><code>:hostname =&gt; "centos5-cookbook-test",
:ipaddress =&gt; "172.16.13.5",
:run_list =&gt; "role[base],role[base_redhat]"
</code></pre>

<p>  },
  :centos6 => {</p>

<pre><code>:hostname =&gt; "centos6-cookbook-test",
:ipaddress =&gt; "172.16.13.6",
:run_list =&gt; "role[base],role[base_redhat]"
</code></pre>

<p>  },
  :lucid => {</p>

<pre><code>:hostname =&gt; "lucid-cookbook-test",
:ipaddress =&gt; "172.16.13.10",
:run_list =&gt; "role[base],role[base_debian]"
</code></pre>

<p>  },
  :oneiric => {</p>

<pre><code>:hostname =&gt; "oneiric-cookbook-test",
:ipaddress =&gt; "172.16.13.11",
:run_list =&gt; "role[base],role[base_debian]"
</code></pre>

<p>  }
}
```</p>

<p>Next, I&rsquo;m going to set up the <code>Vagrant::Config</code> object as &ldquo;global&rdquo;
configuration for all the VMs, and then iterate over each of the VMs
described above.</p>

<p>```ruby
Vagrant::Config.run do |global_config|
  cookbook_testers.each_pair do |name, options|</p>

<pre><code>global_config.vm.define name do |config|
  vm_name = "#{name}-cookbook-test"
  ipaddress = options[:ipaddress]
</code></pre>

<p>```</p>

<p>I disable the shared folder, since I&rsquo;m going to use a Chef Server, and
my recipes will download what they need from remote repositories, not
my local system.</p>

<p><code>ruby
config.vm.share_folder("v-root", "/vagrant", ".", :disabled =&gt; true)
</code></p>

<p>Set up some basic configuration for the box. Modify this to suit your
environment. This section is on a per-VM basis. If particular tunables
were required, I&rsquo;d create additional config in the <code>cookbook_testers</code>
hash above, and use those values here.</p>

<p><em>Note</em> <code>name</code> will be a symbol, but only in some contexts of
 execution.</p>

<p><code>ruby
config.vm.box = name.to_s
config.vm.boot_mode = :headless
config.vm.host_name = vm_name
config.vm.network :hostonly, ipaddress
</code></p>

<p>Now I set up the Chef provisioner. Again, I&rsquo;m using Chef with a Server
(<a href="http://opscode.com/hosted-chef">Opscode Hosted Chef</a>, of course). I
use the <code>chef_server_url</code>, and <code>validation_client_name</code> settings from
my <code>knife.rb</code>.</p>

<p>The nodes' names will be <code>NAME-cookbook-test</code>, rather than their FQDN.
I use this with a rake task that nukes them all from orbit
consistently :).</p>

<p><code>ruby
chef.chef_server_url = Chef::Config[:chef_server_url]
chef.validation_key_path = "#{current_dir}/.chef/#{Chef::Config[:validation_client_name]}.pem"
chef.validation_client_name = Chef::Config[:validation_client_name]
chef.node_name = vm_name
chef.provisioning_path = "/etc/chef"
chef.log_level = :info
</code></p>

<p>The run list is going to be combined from the run lists defined from
the <code>cookbook_testers</code> hash above, and a shell environment variable,
<code>CHEF_RUN_LIST</code>, which is simply a comma-separated list of run list
items, similar to that used by <code>knife bootstrap</code>.</p>

<p><code>ruby
run_list = []
run_list &lt;&lt; ENV['CHEF_RUN_LIST'].split(",") if ENV.has_key?('CHEF_RUN_LIST')
chef.run_list = [options[:run_list].split(","), run_list].flatten
</code></p>

<p>To use the Vagrantfile, I export the shell variable with the
role(s)/recipe(s) I am testing, then run <code>vagrant up</code>.</p>

<p><code>
% export CHEF_RUN_LIST="recipe[apache2],recipe[apache2::mod_ssl]"
% vagrant up
</code></p>

<p>Vagrant will bring up each VM one at a time, going through the full
cycle of provisioning. If there&rsquo;s an unhandled exception that causes
Chef to exit, then Vagrant also halts execution. If <code>vagrant up</code> is
rerun, then Vagrant continues to the <em>next</em> VM. To reprovision a
failed VM, it can be specified:</p>

<p><code>
% vagrant provision centos5
</code></p>

<p>Without the VM name, vagrant would reprovision all the VMs. Likewise,
<code>vagrant ssh NAME</code> can be used to open an SSH connection to the named
VM. This is useful to reprovision a VM that failed early, while
Vagrant is continuing on with the others.</p>

<h2>Full Vagrantfile</h2>

<p>The Vagrantfile is split up in the earlier section, but you can see
the full thing below.</p>

<p>```ruby
require &lsquo;chef&rsquo;
require &lsquo;chef/config&rsquo;
require &lsquo;chef/knife&rsquo;
current_dir = File.dirname(<strong>FILE</strong>)
Chef::Config.from_file(File.join(current_dir, &lsquo;.chef&rsquo;, &lsquo;knife.rb&rsquo;))
cookbook_testers = {
  :centos5 => {</p>

<pre><code>:hostname =&gt; "centos5-cookbook-test",
:ipaddress =&gt; "172.16.13.5",
:run_list =&gt; "role[base],role[base_redhat]"
</code></pre>

<p>  },
  :centos6 => {</p>

<pre><code>:hostname =&gt; "centos6-cookbook-test",
:ipaddress =&gt; "172.16.13.6",
:run_list =&gt; "role[base],role[base_redhat]"
</code></pre>

<p>  },
  :lucid => {</p>

<pre><code>:hostname =&gt; "lucid-cookbook-test",
:ipaddress =&gt; "172.16.13.10",
:run_list =&gt; "role[base],role[base_debian]"
</code></pre>

<p>  },
  :oneiric => {</p>

<pre><code>:hostname =&gt; "oneiric-cookbook-test",
:ipaddress =&gt; "172.16.13.11",
:run_list =&gt; "role[base],role[base_debian]"
</code></pre>

<p>  }
}
Vagrant::Config.run do |global_config|
  cookbook_testers.each_pair do |name, options|</p>

<pre><code>global_config.vm.define name do |config|
  vm_name = "#{name}-cookbook-test"
  ipaddress = options[:ipaddress]
  config.vm.share_folder("v-root", "/vagrant", ".", :disabled =&gt; true)
  config.vm.box = name.to_s
  config.vm.boot_mode = :headless
  config.vm.host_name = vm_name
  config.vm.network :hostonly, ipaddress
  config.vm.provision :chef_client do |chef|
    chef.chef_server_url = Chef::Config[:chef_server_url]
    chef.validation_key_path = "#{current_dir}/.chef/#{Chef::Config[:validation_client_name]}.pem"
    chef.validation_client_name = Chef::Config[:validation_client_name]
    chef.node_name = vm_name
    chef.provisioning_path = "/etc/chef"
    chef.log_level = :info
    run_list = []
    run_list &lt;&lt; ENV['CHEF_RUN_LIST'].split(",") if ENV.has_key?('CHEF_RUN_LIST')
    chef.run_list = [options[:run_list].split(","), run_list].flatten
  end
end
</code></pre>

<p>  end
end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing with fission]]></title>
    <link href="http://jtimberman.housepub.org/blog/2012/02/15/testing-with-fission/"/>
    <updated>2012-02-15T22:53:00-07:00</updated>
    <id>http://jtimberman.housepub.org/blog/2012/02/15/testing-with-fission</id>
    <content type="html"><![CDATA[<p>In this post, I&rsquo;m going to talk about the fission gem:</p>

<ul>
<li><a href="http://rubygems.org/gems/fission">http://rubygems.org/gems/fission</a></li>
<li><a href="https://github.com/thbishop/fission">https://github.com/thbishop/fission</a></li>
</ul>


<p>I primarily use this to manage the VMware Fusion virtual machines I
use for testing <a href="http://community.opscode.com/users/opscode">Opscode&rsquo;s Chef Cookbooks</a>.</p>

<p>This post is rather light on specific details about things that are
either &ldquo;common&rdquo; knowledge or documented elsewhere. Particularly, I
won&rsquo;t tell you how to set up the virtual machines, other than a few
notes that I think make it easier to manage virtual machines in this
way. In other words, you&rsquo;re smart and can figure them out.</p>

<h2>Install and Configure</h2>

<p>The first step to use the fission RubyGem is to install it. If you
don&rsquo;t like RubyGems, then create a package or grab the source from the
GitHub link, above.</p>

<pre><code>gem install fission
</code></pre>

<p>Test that it is detecting your VMware Fusion VMs:</p>

<pre><code>fission status
</code></pre>

<p>Fission has a configuration file, <code>~/.fissionrc</code>, which is yaml
format. If the status command fails, you may need to configure fission
to find the <code>vmrun</code> command. Here&rsquo;s the example from my system:</p>

<pre><code>---
vmrun_bin: /Applications/VMware Fusion.app/Contents/Library/vmrun
</code></pre>

<h2>Install an OS on a VM</h2>

<p>If you&rsquo;re reading this, I presume you know how to install an OS in a
VMware virtual machine. I do a number of tasks during the installation
to make it easy and consistent to work with all my test VMs.</p>

<ul>
<li>Use bridged networking with DHCP</li>
</ul>


<p>This usually results in the least amount of hassle for connecting to
the VM without any tunneling or port forwarding tomfoolery.</p>

<ul>
<li>Give it a simple VM name with alphanumeric characters only.</li>
<li>Use the same hostname during installation as the VM name</li>
</ul>


<p>In the examples below, I use my &ldquo;guineapig&rdquo; system. I also have other
systems like &ldquo;ubuntu1110&rdquo;, &ldquo;freebsd82&rdquo; and &ldquo;centos6&rdquo;. This is the name
you&rsquo;ll use to refer to the VM with fission, so it should be short,
easy to type and clearly identifiable.</p>

<ul>
<li>Set the root password, even if the OS doesn&rsquo;t use the root account</li>
<li>Make sure SSH as root is enabled</li>
</ul>


<p>Some Linux distributions such as Ubuntu do not enable the root login.
This is for testing, so I really don&rsquo;t care, and I can always write a
Chef recipe to lock things down (as I would in production) if
required.</p>

<p>I also set a simple password that I can use with <code>-P</code> to <code>knife
bootstrap</code> without the shell doing anything with special characters.</p>

<ul>
<li>Use NTP</li>
</ul>


<p>Install the NTP package for your operating system. The workflow here
(and the whole point really) is to make heavy use of VMware Fusion
snapshots and rollback, so it is important that the system time is
correct. I customized the bootstrap templates I use to add <code>ntpdate</code>.</p>

<h2>Using Fission</h2>

<p>And now the moment you&rsquo;ve been waiting for. First, see the fission
README for full detail on the commands available. I&rsquo;m going to focus
here on how I use it.</p>

<p>After the install and post install tasks are done, I create a
new snapshot for the VM.</p>

<pre><code>% fission status
guineapig        [running]
% fission snapshot create guineapig base
</code></pre>

<p>The name is &ldquo;base&rdquo; because thats a good name for a baseline. It can be
useful to create specifically named snapshots for particular purposes.</p>

<p>I use Opscode Hosted Chef as my server and I already have my local
workstation set up with the validation key, a Chef repository and have
uploaded the cookbook(s) I use for testing. I&rsquo;ll use &ldquo;knife
bootstrap&rdquo; to kick off a run on my VM:</p>

<pre><code>% knife bootstrap 10.1.1.129 -x root -Pvanilla -r 'recipe[apache2]'
...
INFO: service[apache2] restarted
INFO: Chef Run complete in 44.324473 seconds
</code></pre>

<p>Sweet, it worked. However, if the Chef run fails, I can log in as
root, fix the bug and rerun, or whatever else may need to be done.
Then once I&rsquo;m ready to reset the VM, fission comes back to play.</p>

<pre><code>% fission snapshot revert guineapig base
Reverting to snapshot 'base'
Reverted to snapshot 'base'
</code></pre>

<p>Note that fission will poweroff the VM when reverting the snapshot.
Turn it on again with the start command.</p>

<pre><code>% fission status
guineapig        [not running]

% fission start guineapig
Starting 'guineapig'
VM 'guineapig' started

% fission status
guineapig        [running]
</code></pre>

<p>And after logging in, we can see that apache2 is not installed as it
should not be after the snapshot is restored.</p>

<pre><code>% ssh root@guineapig
root@guineapig's password:
root@guineapig:~# dpkg -l apache2
No packages found matching apache2.
</code></pre>

<p>The VM is now ready to do my bidding once again.</p>

<h1>Cleanup</h1>

<p>Note that reverting the snapshot doesn&rsquo;t delete the Chef node or
client objects. Since fission is a Ruby library, a simple knife plugin
can wrap up all the fission revert, restart and Chef cleanup, though.
I called mine nukular.</p>

<pre><code>% knife nukular guineapig base guineapig.int.example.com
</code></pre>

<p>And here&rsquo;s the plugin I&rsquo;m using:</p>

<p>```ruby
require &lsquo;chef/knife&rsquo;</p>

<p>  module KnifePlugins</p>

<pre><code>class Nukular &lt; Chef::Knife
  deps do
    require 'fission'
    require 'chef/node'
    require 'chef/api_client'
  end

  banner "knife nukular VM SNAPSHOT [NODE]"

  def run
    vm, snapshot = @name_args
    node = @name_args[2].nil? ? vm : @name_args[2]
    Fission::Command::SnapshotRevert.new(args=[vm, snapshot]).execute
    Fission::Command::Start.new(args=[vm]).execute
    Chef::Node.load(node).destroy
    Chef::ApiClient.load(node).destroy
  end
end
</code></pre>

<p>  end
```</p>

<p>The command-line usage takes 2 or 3 arguments. The first two must be
the VM name and the snapshot name, e.g. <code>guineapig</code> and <code>base</code>. If the
node name is different than the VM name, then specify it.</p>

<pre><code>% knife nukular guineapig base guineapig.int.example.com
</code></pre>

<p>Note that the plugin has <em>zero</em> error handling or any other sensible
things. You may want to modify it before you use it. Or not, these are
just test systems after all.</p>

<h2>Full example</h2>

<p>Minus the output from the commands, here is the full output of testing
the Opscode apache2 cookbook on my guinea pig. Assume that all the
required things from my Chef Repository have been uploaded to the Chef
Server and the knife configuration is correct. Also, the <code>chef-full</code>
bootstrap template specified here is a customized version of the
template in the
<a href="https://github.com/opscode/chef/blob/master/chef/lib/chef/knife/bootstrap/chef-full.erb">Chef source master branch template</a>
that has <code>ntpdate -u pool.ntp.org</code> in it.</p>

<p><code>
% fission status
% fission snapshot create guineapig testing-apache2
% knife bootstrap 10.1.1.129 -x root -P vanilla \
  -r 'recipe[apache2]' -d chef-full
% knife nukular guineapig testing-apache2 guineapig.int.housepub.org
</code></p>

<p>That&rsquo;s it. I hope you find this helpful!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Specify Chef Run List at Command Line to Vagrant Up]]></title>
    <link href="http://jtimberman.housepub.org/blog/2011/07/17/specify-chef-run-list-at-command-line-to-vagrant-up/"/>
    <updated>2011-07-17T00:00:00-06:00</updated>
    <id>http://jtimberman.housepub.org/blog/2011/07/17/specify-chef-run-list-at-command-line-to-vagrant-up</id>
    <content type="html"><![CDATA[<p>I wanted to dynamically set my run list for testing with Vagrant without editing the Vagrantfile. Since the Vagrantfile is just Ruby, and the run list is an array, I can split a string into an array and use it.</p>


<p><script src="https://gist.github.com/1088459.js"></script></p>


<p>If I don't specify the run list, it will still configure the node with my base Ubuntu configuration. Then bring up a Vagrant box with a comma separated string of items in the run list.</p>


<div class="CodeRay">
  <div class="code"><pre>% CHEF_RUN_LIST=&quot;role[ubuntu],recipe[apache2]&quot; vagrant up</pre></div>
</div>

]]></content>
  </entry>
  
</feed>
