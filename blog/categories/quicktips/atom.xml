<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: quicktips | jtimberman's Code Blog]]></title>
  <link href="http://jtimberman.housepub.org/blog/categories/quicktips/atom.xml" rel="self"/>
  <link href="http://jtimberman.housepub.org/"/>
  <updated>2015-03-20T09:51:29-06:00</updated>
  <id>http://jtimberman.housepub.org/</id>
  <author>
    <name><![CDATA[Joshua Timberman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Quick Tip: Create a Provisioner Node]]></title>
    <link href="http://jtimberman.housepub.org/blog/2015/02/09/quick-tip-create-a-provisioner-node/"/>
    <updated>2015-02-09T20:50:12-07:00</updated>
    <id>http://jtimberman.housepub.org/blog/2015/02/09/quick-tip-create-a-provisioner-node</id>
    <content type="html"><![CDATA[<p>This quick tip is brought to you by my preparation for my ChefConf talk about using Chef Provisioning to build a Chef Server Cluster, which is based on my blog post about the same. In the blog post I used chef-zero as my Chef Server, but for the talk I&rsquo;m using Hosted Chef.</p>

<p>In order for the Chef Provisioning recipe to work the provisioning node &ndash; the node that runs chef-client &ndash; needs to have the appropriate permissions to manage objects on the Chef Server. This is easy with chef-zero &ndash; there are no ACLs at all. However in Hosted Chef, like any regular Chef Server, the ACLs don&rsquo;t allow nodes' API clients to modify other nodes, or API clients.</p>

<p>Fortunately we can do all the work necessary using knife, with the <a href="https://github.com/chef/knife-acl">knife-acl</a> plugin. In this quick tip, I&rsquo;ll create a group for provisioning nodes, and give that group the proper permissions for the Chef Provisioning recipe to create the machines' nodes and clients.</p>

<p>First of all, I&rsquo;m using ChefDK, and it&rsquo;s my Ruby environment too, so install the gem:</p>

<p><code>sh
chef gem install knife-acl
</code></p>

<p>Next, use the <code>knife group</code> subcommand to create the new group. Groups are a number of users and/or API clients. By default, an organization on Hosted Chef will have <code>admins</code>, <code>billing-admins</code>, <code>clients</code>, and <code>users</code>. Let&rsquo;s create <code>provisioners</code> now.</p>

<p><code>sh
knife group create provisioners
</code></p>

<p>The Role-based access control (RBAC) system in the Chef Server allows us to assign read, create, update, grant, and delete permissions to various objects in the organization. Containers are a special holder of other types of objects, in this case we need to add permissions for the clients and nodes containers. This is what allows the Chef Provisioning recipe&rsquo;s <code>machine</code> resources to have their Chef objects created.</p>

<p>```sh
for i in read create update grant delete
do
  knife acl add containers clients $i group provisioners
done</p>

<p>for i in read create update grant delete
do
  knife acl add containers nodes $i group provisioners
done
```</p>

<p>Next, we need the API client that will be used by the Chef Provisioning node to authenticate with the Chef Server, and the node needs to be created as well. By default the client will automatically have permissions for the node object that has the same name.</p>

<p><code>sh
knife client create -d chefconf-provisioner &gt; ~/.chef/chefconf-provisioner.pem
knife node create -d chefconf-provisioner
</code></p>

<p>Finally, we need to put the new API client into the provisioners group that was created earlier. First we need to get a mapping of the actors in the organization. Then we can add the client to the group.</p>

<p><code>sh
knife actor map
knife group add actor provisioners chefconf-provisioner
</code></p>

<p>The <code>knife actor map</code> command will generate a YAML file like this:</p>

<h2>```yaml</h2>

<p>:user_map:
  :users:</p>

<pre><code>jtimberman: 12345678901234567890123456780123
</code></pre>

<p>  :usags:</p>

<pre><code>12345678901234567890123456780123: jtimberman
</code></pre>

<p>:clients:
  chefconf-provisioner: chefconf-provisioner
  jtimberman-chefconf-validator: jtimberman-chefconf-validator
```</p>

<p>This maps users to their USAG and stores a list of clients. More information about this is in the <a href="https://github.com/chef/knife-acl/blob/master/README.md">knife-acl README</a></p>

<p>At this point, we have a node, with the private key in <code>~/.chef</code> that can be used with the Chef Server to use Chef Provisioning&rsquo;s <code>machine</code> resource. We can also perform additional tasks that require having a node object, such as create secrets as Chef Vault items:</p>

<p><code>sh
knife vault create secrets dnsimple -M client -J data_bags/secrets/dnsimple.json -A jtimberman -S 'name:chefconf-provisioner'
</code></p>

<p>The entire series of commands is below.</p>

<p>```sh
chef gem install knife-acl
knife group create provisioners</p>

<p>for i in read create update grant delete
do
  knife acl add containers clients $i group provisioners
done</p>

<p>for i in read create update grant delete
do
  knife acl add containers nodes $i group provisioners
done</p>

<p>knife client create -d chefconf-provisioner > ~/.chef/chefconf-provisioner.pem
knife node create -d chefconf-provisioner
knife actor map
knife group add actor provisioners chefconf-provisioner</p>

<p>knife vault create secrets dnsimple -M client -J data_bags/secrets/dnsimple.json -A jtimberman -S &lsquo;name:chefconf-provisioner&rsquo;
```</p>

<p>Hopefully this helps you out with your use of Chef Provisioning, and a non-zero Chef server. If you have further questions, find me at ChefConf!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick Tip: Define Resources to Notifiy in LWRPs]]></title>
    <link href="http://jtimberman.housepub.org/blog/2015/01/17/quick-tip-define-resources-to-notifiy-in-lwrps/"/>
    <updated>2015-01-17T22:37:06-07:00</updated>
    <id>http://jtimberman.housepub.org/blog/2015/01/17/quick-tip-define-resources-to-notifiy-in-lwrps</id>
    <content type="html"><![CDATA[<p>In this quick tip, I&rsquo;ll explain why you may need to create resources to notify in a provider, even if the resource exists in a recipe, when using <code>use_inline_resources</code> in Chef&rsquo;s <a href="http://docs.chef.io/lwrp.html">LWRP DSL</a>.</p>

<p>I&rsquo;ll use an example cookbook, <code>notif</code>, to illustrate. First, I&rsquo;ve created <code>cookbooks/notif/resources/default.rb</code>, with the following content.</p>

<p><code>ruby
actions :write
default_action :write
</code></p>

<p>Then, I have written <code>cookbooks/notif/providers/default.rb</code> like this:</p>

<p>```ruby
use_inline_resources</p>

<p>action :write do
  log &lsquo;notifer&rsquo; do</p>

<pre><code>notifies :create, 'file[notified]'
</code></pre>

<p>  end
end
```</p>

<p>Then the default recipe, where I&rsquo;ll use the resource automatically generated from the resource directory, <code>notif</code>.</p>

<p>```ruby
file &lsquo;notified&rsquo; do
  content &lsquo;something&rsquo;
  action :nothing
end</p>

<p>notif &lsquo;doer&rsquo;
```</p>

<p>When I run Chef, I&rsquo;ll get an error like this:</p>

<p>```
 Recipe: notif::default
   * file[notified] action nothing (skipped due to action :nothing)
   * notif[doer] action write</p>

<pre><code> ================================================================================
 Error executing action `write` on resource 'notif[doer]'
 ================================================================================

 Chef::Exceptions::ResourceNotFound
 ----------------------------------
 resource log[notifer] is configured to notify resource file[notified] with action create, but file[notified] cannot be found in the resource collection. log[notifer] is defined in /tmp/kitchen/cookbooks/notif/providers/default.rb:4:in `block in class_from_file'

 Resource Declaration:
 ---------------------
 # In /tmp/kitchen/cookbooks/notif/recipes/default.rb

  12: notif 'doer'

 Compiled Resource:
</code></pre>

<hr />

<pre><code> # Declared in /tmp/kitchen/cookbooks/notif/recipes/default.rb:12:in `from_file'

 notif("doer") do
   action :write
   retries 0
   retry_delay 2
   default_guard_interpreter :default
   declared_type :notif

   recipe_name "default"
 end
</code></pre>

<p>```</p>

<p>To fix this, I define the <code>file</code> resource in the provider:</p>

<p>```ruby
use_inline_resources</p>

<p>action :write do
  log &lsquo;notifer&rsquo; do</p>

<pre><code>notifies :create, 'file[notified]'
</code></pre>

<p>  end</p>

<p>  file &lsquo;notified&rsquo; do</p>

<pre><code>content new_resource.name
</code></pre>

<p>  end
end
```</p>

<p>Then when I run Chef, it will converge and notify the file resource to be configured.</p>

<p>```
Recipe: notif::default
  * file[notified] action nothing (skipped due to action :nothing)
  * notif[doer] action write</p>

<pre><code>* log[notifer] action write

* file[notified] action create
  - create new file notified
  - update content in file notified from none to 935e8e
  --- notified       2015-01-18 05:47:49.186399317 +0000
  +++ ./.notified20150118-15795-om5fiw       2015-01-18 05:47:49.186399317 +0000
  @@ -1 +1,2 @@
  +doer
* file[notified] action create (up to date)
</code></pre>

<p>Running handlers:
Running handlers complete
Chef Client finished, &frac34; resources updated in 1.298990565 seconds
```</p>

<h2>Why does this happen?</h2>

<p>The reason for this is because <code>use_inline_resources</code> tells Chef that in this provider, we&rsquo;re using inline resources that will be added to their own run context, with their own resource collection. We don&rsquo;t have access to the resource collection from the recipe. Even though the <code>file[notified]</code> resource exists from the recipe, it doesn&rsquo;t actually get inherited in the provider&rsquo;s run context, raising the error we saw before.</p>

<p>We can turn off <code>use_inline_resources</code> by removing it, and the custom resource will be configured:</p>

<p>```ruby
action :write do
  log &lsquo;notifer&rsquo; do</p>

<pre><code>notifies :create, 'file[notified]'
</code></pre>

<p>  end
end
```</p>

<p>Then run Chef:</p>

<p>```
Recipe: notif::default
  * file[notified] action nothing (skipped due to action :nothing)
  * notif[doer] action write (up to date)
  * log[notifer] action write
  * file[notified] action create</p>

<pre><code>- update content in file notified from 935e8e to 3fc9b6
--- notified 2015-01-18 05:47:49.186399317 +0000
+++ ./.notified20150118-16159-r18q7z 2015-01-18 05:50:57.832140405 +0000
@@ -1,2 +1,2 @@
-doer
+something
</code></pre>

<p>```</p>

<p>Notice that the <code>file[notified]</code> resource wasn&rsquo;t updated at the start of the run, when it was encountered in the recipe, but it was when notified by the log resource in the provider action, changing the content.</p>

<h2>Use inline compile mode!</h2>

<p>The <code>use_inline_resources</code> method in the lightweight provider DSL is strongly recommended. It makes it easier to send notifications from the custom resource itself to other resources in the recipe&rsquo;s resource collection. Read more about the <a href="http://docs.chef.io/lwrp.html#inline-compile-mode">inline compile mode</a> in the Chef docs.</p>

<p>Also, define the resources that you need to notify when you&rsquo;re doing this in your provider&rsquo;s actions. A common example is within a provider that writes configuration for a service, and needs to tell that service to restart.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick Tip: Testing Conditionals in ChefSpec]]></title>
    <link href="http://jtimberman.housepub.org/blog/2015/01/12/quick-tip-testing-conditionals-in-chefspec/"/>
    <updated>2015-01-12T14:07:06-07:00</updated>
    <id>http://jtimberman.housepub.org/blog/2015/01/12/quick-tip-testing-conditionals-in-chefspec</id>
    <content type="html"><![CDATA[<p>This tip is brought to you by the <a href="https://supermarket.chef.io/cookbooks/homebrew">homebrew</a> cookbook.</p>

<p><a href="http://sethvargo.github.io/chefspec/">ChefSpec</a> is a great way to create tests for Chef recipes to catch regressions. Sometimes recipes end up having branching conditional logic that can have very different outcomes based on external factors &ndash; attributes, existing system state, or cross-platform support.</p>

<p>The homebrew cookbook only supports OS X, so we don&rsquo;t have cross-platform support to test there. However, its default recipe has four conditionals to test. You can read the entire <a href="https://github.com/opscode-cookbooks/homebrew/blob/master/spec/recipes/default_spec.rb">default_spec.rb</a> for full context, I&rsquo;m going to focus on just one aspect here:</p>

<ul>
<li>Installing homebrew should only happen if the <code>brew</code> binary does not exist.</li>
</ul>


<p>This is a common use case in Chef recipes. The best way to go about converging your node to the desired state involves running some arbitrary command. In this case, it&rsquo;s the installation of Homebrew itself. Normally for installations we want to use an idempotent, convergent resource like <code>package</code>. However, since homebrew is to be our package management system, we have to do something else. As it turns out the homebrew project provides an installation script and that script will install a binary, <code>/usr/local/bin/brew</code>. We will assume that if Chef converged on a node after running the script, and the <code>brew</code> binary exists, then we don&rsquo;t need to attempt reinstallation. There&rsquo;s more robust ways to go about it (e.g., running <code>brew</code> gives some desired output), but this works for example purposes today.</p>

<p>From <a href="https://github.com/opscode-cookbooks/homebrew/blob/master/recipes/default.rb">the recipe</a>, here&rsquo;s the resource:</p>

<p><code>ruby
execute 'install homebrew' do
  command homebrew_go
  user node['homebrew']['owner'] || homebrew_owner
  not_if { ::File.exist? '/usr/local/bin/brew' }
end
</code></p>

<p><code>command</code> is a script, called <code>homebrew_go</code>, which is a local variable set to a path in <code>Chef::Config[:file_cache_path]</code>. It is retrieved in the recipe with <code>remote_file</code>. The resource used to have <code>execute homebrew_go</code>, but when ChefSpec runs, it does so in a random temporary directory, which we cannot predict the name.</p>

<p>The astute observer will note that the <code>user</code> parameter has another conditional (designated by the <code>||</code>). That&rsquo;s actually the subject of another post. In this post, I&rsquo;m concerned only with testing the guard, <code>not_if</code>.</p>

<p>The <code>not_if</code> is a Ruby block, which means the Ruby code is evaluated inline during the Chef run. How we go about testing that is the subject of this post.</p>

<p>First, we need to mock the return result of sending the <code>#exist?</code> method to the <code>File</code> class. There are two reasons. First, we want to control the conditional so we can write a test for each outcome. Second, someone running the test (like me) might have already installed homebrew on their local system (which I have), and so <code>/usr/local/bin/brew</code> will exist. To do this, in our context, we have a <code>before</code> block that stubs the return to false:</p>

<p><code>ruby
before(:each) do
  allow_any_instance_of(Chef::Resource).to receive(:homebrew_owner).and_return('vagrant')
  allow_any_instance_of(Chef::Recipe).to receive(:homebrew_owner).and_return('vagrant')
  allow(File).to receive(:exist?).and_return(false)
  stub_command('which git').and_return(true)
end
</code></p>

<p>There&rsquo;s some other mocked values here. I&rsquo;ll talk about the <code>vagrant</code> user for <code>homebrew_owner</code> in a moment, though again, that&rsquo;s the subject of another post.</p>

<p>The actual spec will test that the installation script will actually get executed when we run chef, and as the <code>vagrant</code> user.</p>

<p>```ruby
it &lsquo;runs homebrew installation as the default user&rsquo; do
  expect(chef_run).to run_execute(&lsquo;install homebrew&rsquo;).with(</p>

<pre><code>:user =&gt; 'vagrant'
</code></pre>

<p>  )
end
```</p>

<p>When rspec runs, we see this is the case:</p>

<p>```
homebrew::default
  default user</p>

<pre><code>runs homebrew installation as the default user
</code></pre>

<p>```</p>

<p>If I didn&rsquo;t mock the user, it would be <code>jtimberman</code>, as that is the user that is running Chef via rspec/ChefSpec. The test would fail. If you&rsquo;re looking at the full file, there&rsquo;s some other details we&rsquo;re going to look at shortly. If I didn&rsquo;t mock the return for <code>File.exist?</code>, the execute wouldn&rsquo;t run at all.</p>

<p>To test what happens when <code>/usr/local/bin/brew</code> exists, I set up a new context in rspec, and create a new <code>before</code> block.</p>

<p>```ruby
context &lsquo;/usr/local/bin/brew exists&rsquo; do
  before(:each) do</p>

<pre><code>allow(File).to receive(:exist?).and_return(true)
stub_command('which git').and_return(true)
</code></pre>

<p>  end</p>

<p>  it &lsquo;does not run homebrew installation&rsquo; do</p>

<pre><code>expect(chef_run).to_not run_execute('install homebrew')
</code></pre>

<p>  end
end
```</p>

<p>We don&rsquo;t need the <code>vagrant</code> mocks earlier, but we do need to stub <code>File.exist?</code>. This test would pass on my system without it, but not on, e.g., a Linux system that doesn&rsquo;t have homebrew.</p>

<p>Then running rspec, we see:</p>

<p>```
homebrew::default
  /usr/local/bin/brew exists</p>

<pre><code>does not run homebrew installation
</code></pre>

<p>  default user</p>

<pre><code>runs homebrew installation as the default user
</code></pre>

<p>```</p>

<p>In a coming post, I will walk through the conditionals related to the <code>homebrew_owner</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick Tip: Serverspec spec_helper in Test Kitchen]]></title>
    <link href="http://jtimberman.housepub.org/blog/2014/12/31/quick-tip-serverspec-spec-helper-in-test-kitchen/"/>
    <updated>2014-12-31T16:01:23-07:00</updated>
    <id>http://jtimberman.housepub.org/blog/2014/12/31/quick-tip-serverspec-spec-helper-in-test-kitchen</id>
    <content type="html"><![CDATA[<p>Recently, I&rsquo;ve started refactoring some <a href="https://supermarket.chef.io/cookbooks/daemontools">old</a> <a href="https://supermarket.chef.io/cookbooks/djbdns">cookbooks</a> <a href="https://supermarket.chef.io/cookbooks/ucspi-tcp">I wrote</a> ages ago. I&rsquo;m adding Serverspec coverage that can be run with <code>kitchen verify</code>. In this <a href="/blog/categories/quicktips">quicktip</a>, I&rsquo;ll describe how to create a <code>spec_helper</code> that can be used in all the specs. This is a convention used by <a href="http://pivotallabs.com/spec-helper/">many</a> in the Ruby community to add configuration for RSpec.</p>

<p>For Chef, we can run integration tests after convergence using <a href="http://kitchen.ci">Test Kitchen</a> using Serverspec. To do that, we need to require Serverspec, and then set its backend. In some cookbooks, the author/developer may have written <code>spec_helper</code> files in the various <code>test/integration/SUITE/serverspec/</code> directories, but this will use a single shared file for them all. Let&rsquo;s get started.</p>

<p>In the <code>.kitchen.yml</code>, add the <code>data_path</code> configuration directive in the provisioner.</p>

<p><code>yaml
provisioner:
  name: chef_zero
  data_path: test/shared
</code></p>

<p>Then, create the <code>test/shared</code> directory in the cookbook, and create the <code>spec_helper.rb</code> in it.</p>

<p><code>sh
mkdir test/shared
$EDITOR test/shared/spec_helper.rb
</code></p>

<p>Minimally, it should look like this:</p>

<p>```ruby
require &lsquo;serverspec&rsquo;</p>

<p>set :backend, :exec
```</p>

<p>Then in your specs, for example <code>test/integration/default/serverspec/default_spec.rb</code>, require the <code>spec_helper</code>. On the instances under test, the file will be copied to <code>/tmp/kitchen/data/spec_helper.rb</code>.</p>

<p><code>ruby
require_relative '../../../kitchen/data/spec_helper'
</code></p>

<p>That&rsquo;s it, now when running <code>kitchen test</code>, or <code>kitchen verify</code> on a converged instance, the helper will be used.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick Tip: Chef 12 Homebrew User Mixin]]></title>
    <link href="http://jtimberman.housepub.org/blog/2014/12/29/chef-12-homebrew-user-mixin/"/>
    <updated>2014-12-29T08:56:01-07:00</updated>
    <id>http://jtimberman.housepub.org/blog/2014/12/29/chef-12-homebrew-user-mixin</id>
    <content type="html"><![CDATA[<p>OS X is an interesting operating system. It is a Unix, but is primarily used for workstations. As such, many system settings can, and should, be done as a non-privileged user. Some tasks, however, require administrative privileges. OS X uses <code>sudo</code> to escalate privileges. This is done by a nice GUI pop-up requesting the user password when done through another GUI element. However, one must use <code>sudo $COMMAND</code> when working at the Terminal.</p>

<p>The <a href="http://brew.sh">Homebrew</a> package manager tries to do everything as a non-privileged user. The <a href="https://raw.githubusercontent.com/Homebrew/install/master/install">installation script</a> will invoke some commands with <code>sudo</code> &ndash; namely to create and set the correct permissions on <code>/usr/local</code> (its default installation location). Once that is complete, <code>brew install</code> will not require privileged access for installing packages. In fact, the <a href="https://github.com/Homebrew/homebrew/blob/b19d3afccef0ddc31820f1cb7d1a5316017e29df/share/doc/homebrew/FAQ.md#why-does-homebrew-say-sudo-is-bad-">Homebrew project recommends</a> never using <code>sudo</code> with the <code>brew</code> commands.</p>

<p>In Chef 12 the default provider for the <code>package</code> resource is <code>homebrew</code>. This originally came from the <a href="https://supermarket.chef.io/cookbooks/homebrew">homebrew cookbook</a>. In order to not use <code>sudo</code> when managing packages, there&rsquo;s a helper method (mixin) that attempts to determine what non-privileged user should run the <code>brew install</code> command. This is also <a href="https://github.com/opscode/chef/blob/4cb27331d81b394b816278e2bed6b3395b54b9c9/lib/chef/mixin/homebrew_user.rb">ported to Chef 12</a>. The method can also take an argument that specifies a particular user that should run the <code>brew</code> command.</p>

<p>When managing an OS X system with Chef, it is often easier to just run <code>chef-client</code> as <code>root</code>, rather than be around when <code>sudo</code> prompts for a password. This means that we need a way to execute other commands for managing OS X as a non-privileged user. We can reuse the mixin to do this. I&rsquo;ll demonstrate this using plain old Ruby with <code>pry</code>, which is installed in ChefDK, and I&rsquo;ll start it up with <code>sudo</code>. Then, I&rsquo;ll show a short recipe with <code>chef-apply</code>.</p>

<p><code>
% which pry
/opt/chefdk/embedded/bin/pry
% sudo pry
</code></p>

<p>Paste in the following Ruby code:</p>

<p>```ruby
require &lsquo;chef&rsquo;
include Chef::Mixin::HomebrewUser
include Chef::Mixin::ShellOut</p>

<p>find_homebrew_uid #=> 501
```</p>

<p>The method <code>find_homebrew_uid</code> is the helper we want. As we can see, rather than returning <code>0</code> (for <code>root</code>), it returns <code>501</code>, which is the UID of the <code>jtimberman</code> user on my system. To prove that I&rsquo;m executing in a process owned by <code>root</code>:</p>

<p><code>ruby
Process.uid #=&gt; 0
</code></p>

<p>Or, I can shell out to the <code>whoami</code> command using Chef&rsquo;s <code>shell_out</code> method &ndash; which is the same method Chef would use to run <code>brew install</code>.</p>

<p><code>ruby
shell_out('whoami').stdout #=&gt; "root\n"
</code></p>

<p>The <code>shell_out</code> method can take a <code>:user</code> attribute:</p>

<p><code>ruby
shell_out('whoami', :user =&gt; find_homebrew_uid).stdout #=&gt; "jtimberman\n"
</code></p>

<p>So this can be used to install packages with <code>brew</code>, and is exactly what Chef 12 does.</p>

<p><code>ruby
shell_out('brew install coreutils', :user =&gt; find_homebrew_uid)
</code></p>

<p>Or, it can be used to run <code>defaults(1)</code> settings that require running as a specific user, rather than <code>root</code></p>

<p>```ruby</p>

<h1>Turn off iPhoto face detection, please</h1>

<p>shell_out(&lsquo;defaults write com.apple.iPhoto PKFaceDetectionEnabled 0&rsquo;,</p>

<pre><code>      :user =&gt; find_homebrew_uid)
</code></pre>

<p>```</p>

<p>```sh</p>

<h1>before&hellip;</h1>

<p>jtimberman@localhost% defaults read com.apple.iPhoto PKFaceDetectionEnabled
1</p>

<h1>after!</h1>

<p>jtimberman@localhost% defaults read com.apple.iPhoto PKFaceDetectionEnabled
0
```</p>

<p>Putting this together in a Chef recipe that gets run by <code>root</code>, we can disable face detection in iPhoto like this:</p>

<p>```ruby
Chef::Resource::Execute.send(:include, Chef::Mixin::HomebrewUser)</p>

<p>execute &lsquo;defaults write com.apple.iPhoto PKFaceDetectionEnabled 0&rsquo; do
  user find_homebrew_uid
end
```</p>

<p>The first line makes the method available on all <code>execute</code> resources. To make the method available to all resources, use <code>Chef::Resource.send</code>, and to make it available across everything in all recipes, use <code>Chef::Recipe.send</code>. Otherwise we would get a <code>NoMethodError</code> exception.</p>

<p>The <code>execute</code> resource takes a <code>user</code> attribute, so we use the <code>find_homebrew_uid</code> method here to set the user. And we can observe the same results as above:</p>

<p><code>
jtimberman@localhost% defaults write com.apple.iPhoto PKFaceDetectionEnabled 1
jtimberman@localhost% defaults read com.apple.iPhoto PKFaceDetectionEnabled
1
jtimberman@localhost% sudo chef-apply nofaces.rb
Recipe: (chef-apply cookbook)::(chef-apply recipe)
* execute[defaults write com.apple.iPhoto PKFaceDetectionEnabled 0] action run
- execute defaults write com.apple.iPhoto PKFaceDetectionEnabled 0
jtimberman@localhost% defaults read com.apple.iPhoto PKFaceDetectionEnabled
0
</code></p>

<p>Those who have read the workstation management posts on this blog in the past may be aware that I have a <a href="https://supermarket.chef.io/cookbooks/mac_os_x">cookbook</a> that can manage OS X &ldquo;<code>defaults(1)</code>&rdquo; settings. I <a href="https://github.com/chef-osx/mac_os_x/issues/21">plan to make updates</a> to the resource in that cookbook that will leverage this method.</p>
]]></content>
  </entry>
  
</feed>
