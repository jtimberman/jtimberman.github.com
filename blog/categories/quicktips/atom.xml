<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: quicktips | jtimberman's Code Blog]]></title>
  <link href="http://jtimberman.housepub.org/blog/categories/quicktips/atom.xml" rel="self"/>
  <link href="http://jtimberman.housepub.org/"/>
  <updated>2015-09-03T08:21:19-06:00</updated>
  <id>http://jtimberman.housepub.org/</id>
  <author>
    <name><![CDATA[Joshua Timberman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Quick Tip: Alternative Chef Shell with Pry]]></title>
    <link href="http://jtimberman.housepub.org/blog/2015/09/01/quick-tip-alternative-chef-shell-with-pry/"/>
    <updated>2015-09-01T08:19:17-06:00</updated>
    <id>http://jtimberman.housepub.org/blog/2015/09/01/quick-tip-alternative-chef-shell-with-pry</id>
    <content type="html"><![CDATA[<p>This quick tip brought to you by the letters &ldquo;p,&rdquo; &ldquo;r,&rdquo; and &ldquo;y.&rdquo;</p>

<p>You can start up a pry session in the context of a Chef recipe easily by using <code>chef-apply</code>. The <code>pry</code> gem is bundled with the Chef omnibus package, so it&rsquo;s immediately available.</p>

<p><code>
chef-apply -e 'require "pry"; binding.pry'
</code></p>

<p>This will result in a prompt like this:</p>

<p><code>
2.1.6 (#&lt;Chef::Recipe&gt;):0 &gt;
</code></p>

<p>This is a recipe! Use <code>pry</code>&rsquo;s <code>ls</code> command:</p>

<p>```
2.1.6 (#&lt;Chef::Recipe>):0 > ls
Chef::EncryptedDataBagItem::CheckEncrypted#methods: encrypted?
Chef::DSL::DataQuery#methods: data_bag  data_bag_item  search
Chef::DSL::PlatformIntrospection#methods: platform?  platform_family?  value_for_platform  value_for_platform_family
Chef::DSL::IncludeRecipe#methods: include_recipe  load_recipe  require_recipe
<strong><em> SNIP </em></strong></p>

<p>2.1.6 (#&lt;Chef::Recipe>):0 > cd node
2.1.6 (node[localhost.example.com]):1 > ls
<strong><em> SNIP </em></strong>
2.1.6 (node[localhost.example.com]):1 > exit
2.1.6 (#&lt;Chef::Recipe>):0 >
```</p>

<p>Write a resource:</p>

<p><code>
2.1.6 (#&lt;Chef::Recipe&gt;):0 &gt; file "/tmp/hello_world" do
2.1.6 (#&lt;Chef::Recipe&gt;):0 *   content "I'm in pry!"
2.1.6 (#&lt;Chef::Recipe&gt;):0 * end
</code></p>

<p>This will return the <code>file[/tmp/hello_world]</code> resource. It doesn&rsquo;t run Chef, but we can do that in one of two ways: exit pry, or send the create action to the resource.</p>

<p>```
2.1.6 (#&lt;Chef::Recipe>):0 > resources(&ldquo;file[/tmp/hello_world]&rdquo;).run_action :create
Recipe: (chef-apply cookbook)::(chef-apply recipe)
  * file[/tmp/hello_world] action create</p>

<pre><code>- create new file /tmp/hello_world
- update content in file /tmp/hello_world from none to 3a5417
--- /tmp/hello_world    2015-09-01 08:35:18.000000000 -0600
+++ /tmp/.hello_world20150901-42665-11bwurx 2015-09-01 08:35:18.000000000 -0600
@@ -1 +1,2 @@
</code></pre>

<p>```</p>

<p>If we write multiple resources, we&rsquo;d have to send that action to every one of them. Exiting pry will work, but then we are, of course, no longer in the pry session. This is not ideal, but hey, it&rsquo;s not like we&rsquo;re in <code>chef-shell</code>.</p>

<p>The <code>chef-apply</code> program runs in &ldquo;solo mode.&rdquo;</p>

<p><code>
2.1.6 (#&lt;Chef::Recipe&gt;):0 &gt; Chef::Config.solo
=&gt; true
</code></p>

<p>However, it may be useful to debug things through the Chef Server API. We will want to do two things. First, load a config file like <code>.chef/knife.rb</code>. We can verify the Chef Server we want is configured by checking <code>Chef::Config[:chef_server_url]</code>.</p>

<p><code>
2.1.6 (#&lt;Chef::Recipe&gt;):0 &gt; Chef::Config[:chef_server_url]
=&gt; "https://localhost:443"
2.1.6 (#&lt;Chef::Recipe&gt;):0 &gt; Chef::Config.from_file('.chef/knife.rb')
=&gt; "client"
2.1.6 (#&lt;Chef::Recipe&gt;):0 &gt; Chef::Config[:chef_server_url]
=&gt; "https://api.opscode.com/organizations/joshtest"
</code></p>

<p>Cool. Now let&rsquo;s borrow <code>chef-shell</code>&rsquo;s helper methods for interacting with the API.</p>

<p><code>ruby
require 'chef/shell/ext'
Chef::Shell::Extensions.extend_context_object(self)
</code></p>

<p>And now we can use, for example, <code>api.get</code> or <code>nodes.all</code>.</p>

<p><code>
2.1.6 (#&lt;Chef::Recipe&gt;):0 &gt; api.get('/users')
=&gt; [{"user"=&gt;{"username"=&gt;"joshtest"}}, {"user"=&gt;{"username"=&gt;"jtimberman"}}]
</code></p>

<p>Of course, we can get a lot of this functionality by starting up <code>chef-shell</code> and loading <code>pry</code>, but I think this was more fun :&ndash;).</p>

<p>Learn more about <a href="http://pryrepl.org/">pry</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick Tip: Stubbing Library Helpers in ChefSpec]]></title>
    <link href="http://jtimberman.housepub.org/blog/2015/05/30/quick-tip-stubbing-library-helpers-in-chefspec/"/>
    <updated>2015-05-30T08:48:47-06:00</updated>
    <id>http://jtimberman.housepub.org/blog/2015/05/30/quick-tip-stubbing-library-helpers-in-chefspec</id>
    <content type="html"><![CDATA[<p>I&rsquo;m currently updating my <a href="https://supermarket.chef.io/cookbooks/vagrant">vagrant cookbook</a>, and adding <a href="https://sethvargo.github.io/chefspec">ChefSpec</a> coverage. Each of the different platform recipes results in slightly different resources to download the package file and install it. To support this, I have <a href="https://github.com/jtimberman/vagrant-cookbook/blob/master/libraries/helpers.rb">helper methods</a> that calculate the download URI, the package name, and the SHA256 checksum based on the version of Vagrant (<code>node['vagrant']['version']</code>), and the platform (<code>node['os']</code>, <code>node['platform_family']</code>).</p>

<p>The outcomes I want to test are that for a given platform: the correct recipe is included, the correct file is downloaded, and the correct package resource installs the downloaded file. Those tests look like this (using Ubuntu/Debian example first):</p>

<p>```ruby
it &lsquo;includes the debian platform family recipe&rsquo; do
  expect(chef_run).to include_recipe(&lsquo;vagrant::debian&rsquo;)
end</p>

<p>it &lsquo;downloads the package from the calculated URI&rsquo; do
  expect(chef_run).to create_remote_file(&lsquo;/var/tmp/vagrant.deb&rsquo;).with(</p>

<pre><code>source: 'https://dl.bintray.com/mitchellh/vagrant/vagrant_1.88.88_x86_64.deb'
</code></pre>

<p>  )
end</p>

<p>it &lsquo;installs the downloaded package&rsquo; do
  expect(chef_run).to install_dpkg_package(&lsquo;vagrant&rsquo;).with(</p>

<pre><code>source: '/var/tmp/vagrant.deb'
</code></pre>

<p>  )
end
```</p>

<p>I&rsquo;ve set the version attribute in the <code>chef_run</code> block for the ChefSpec run to <code>1.88.88</code> to ensure that it doesn&rsquo;t use the value set in the attributes file, and then I can test this specifically in the source for the calculated URI, even if the attribute changes &ndash; hopefully Vagrant doesn&rsquo;t have a 1.88.88 version some day ;).</p>

<p>When I run <code>rspec spec</code>, I get exceptions, however.</p>

<p>```
1) vagrant::default debian includes the debian platform family recipe
   Failure/Error: end.converge(described_recipe)
   OpenURI::HTTPError:</p>

<pre><code> 404 Not Found
</code></pre>

<p>```</p>

<p>This is because in the <code>attributes/default.rb</code>, the checksum is retrieved using the <code>vagrant_sha256sum</code> method:</p>

<p><code>ruby
default['vagrant']['checksum'] = vagrant_sha256sum(node['vagrant']['version'])
</code></p>

<p>The exception is happening when Chef loads the attributes file, and because the version is not valid. The solution here is to stub out the return value from <code>vagrant_sha256sum</code>. This can be anything at all really, because that specific attribute is to make sure we don&rsquo;t have to re-download the package to <a href="http://docs.chef.io/resource_remote_file.html#attributes">compare its checksum</a> on later Chef runs. In this cookbook, the helper methods are not namespaced under a module, they&rsquo;re bare methods in <code>libraries.helpers.rb</code>. This <a href="https://github.com/sethvargo/chefspec/issues/562">poses some</a> <a href="https://github.com/sethvargo/chefspec/issues/549">challenges</a> <a href="https://github.com/sethvargo/chefspec/issues/273">when trying</a> <a href="https://github.com/sethvargo/chefspec/issues/138">to stub</a> <a href="https://github.com/sethvargo/chefspec/issues/253">them</a> in ChefSpec. I won&rsquo;t rehash all the ways I attempted to get this to work, and instead focus on the final solution that got the tests passing:</p>

<p><code>ruby
before(:each) do
  allow_any_instance_of(Chef::Node).to receive(:vagrant_sha256sum).and_return('')
end
</code></p>

<p>When Chef loads cookbook attributes files, it is evaluating them in the context of a <code>Chef::Node</code>, so those library helper methods are sent to the <code>Chef::Node</code> object. Similarly, if this were inside a recipe, I would use <code>Chef::Recipe</code>, and if it were inside a resource (e.g., <code>package</code>), <code>Chef::Resource</code>.</p>

<p>I put this <code>before</code> block at the <code>describe 'vagrant::default'</code> level, not within any <code>context</code> blocks, so it will be done for each of the various per-platform tests. The results in my <code>debian</code> context are now:</p>

<p>```
% rspec spec &mdash;color -fd</p>

<p>vagrant::default
  debian</p>

<pre><code>includes the debian platform family recipe
downloads the package from the calculated URI
installs the downloaded package
</code></pre>

<p>Finished in 7.04 seconds (files took 7.93 seconds to load)
3 examples, 0 failures
```</p>

<p>Six issues have been filed against ChefSpec about this. Hopefully this can result in fewer inquiries.</p>

<p>Happy testing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick Tip: Policyfile Run Lists]]></title>
    <link href="http://jtimberman.housepub.org/blog/2015/05/16/quick-tip-policyfile-run-lists/"/>
    <updated>2015-05-16T21:52:17-06:00</updated>
    <id>http://jtimberman.housepub.org/blog/2015/05/16/quick-tip-policyfile-run-lists</id>
    <content type="html"><![CDATA[<p>As I indicated on <a href="https://twitter.com/jtimberman/status/599779453456097280">Twitter earlier tonight</a>, I&rsquo;m working with the new Policyfile feature of <a href="https://github.com/chef/chef-dk/blob/master/POLICYFILE_README.md">ChefDK</a>. While converting my personal systems' repository to use Policyfile instead of roles, I found myself writing this Policyfile:</p>

<p>```ruby
name &lsquo;home_server&rsquo;
default_source :community
run_list(</p>

<pre><code>     'build-essential',
     'packages',
     'users',
     'sudo',
     'runit',
     'ntp',
     'openssh',
     'postfix'
    )
</code></pre>

<p>cookbook &lsquo;build-essential&rsquo;
cookbook &lsquo;packages&rsquo;, git: &lsquo;<a href="https://github.com/mattray/packages-cookbook">https://github.com/mattray/packages-cookbook</a>&rsquo;, branch: &lsquo;multipackage&rsquo;
cookbook &lsquo;users&rsquo;, path: &lsquo;../housepub-chef-repo/cookbooks/users&rsquo;
cookbook &lsquo;sudo&rsquo;
cookbook &lsquo;runit&rsquo;
cookbook &lsquo;ntp&rsquo;
cookbook &lsquo;openssh&rsquo;
cookbook &lsquo;postfix&rsquo;
```</p>

<p>No big deal, but I found the repetition&hellip; redundant. Several of these cookbooks are fine floating on the latest version from Supermarket &ndash; everything but <code>packages</code> and <code>users</code>. So I thought, &ldquo;wouldn&rsquo;t it be great if entries in the run list were automatically added as dependencies?&rdquo;</p>

<p>Then, I added <code>chef-client-runit</code> to the run list, but I didn&rsquo;t add it as a <code>cookbook</code> entry, performed the <code>chef update</code>, and reran my <code>chef provision</code> command, and wound up with <code>chef-client-runit</code> being converged.</p>

<p>To illustrate this with a really simple example, I confirmed with <code>zsh</code>:</p>

<pre><code>% cd ~/Development/sandbox/test
% chef generate policyfile
</code></pre>

<p>Then edit the <code>Policyfile.rb</code>:</p>

<p><code>ruby
name "example_application"
default_source :community
run_list "zsh"
</code></p>

<p>Note that there is no <code>cookbook</code> line here.</p>

<pre><code>% chef install
Building policy example_application
Expanded run list: recipe[zsh]
Caching Cookbooks...
Using      zsh 1.0.1

Lockfile written to /Users/jtimberman/Development/sandbox/test/Policyfile.lock.json
</code></pre>

<p>And if we examine the <code>Policyfile.lock.json</code>, we see:</p>

<p>```json
{
  &ldquo;revision_id&rdquo;: &ldquo;e8b5b48d35f4a8efcd037ef6c9cc8e34f901561ffef160bd0a57ca1b612a1179&rdquo;,
  &ldquo;name&rdquo;: &ldquo;example_application&rdquo;,
  &ldquo;run_list&rdquo;: [</p>

<pre><code>"recipe[zsh::default]"
</code></pre>

<p>  ],
  &ldquo;cookbook_locks&rdquo;: {</p>

<pre><code>"zsh": {
  "version": "1.0.1",
  "identifier": "b512ef33af29b8d34ad7e4e9b6ad38d42dea4945",
  "dotted_decimal_identifier": "50967789358229944.59473511204894381.62483954551109",
  "cache_key": "zsh-1.0.1-supermarket.chef.io",
  "origin": "https://supermarket.chef.io/api/v1/cookbooks/zsh/versions/1.0.1/download",
  "source_options": {
    "artifactserver": "https://supermarket.chef.io/api/v1/cookbooks/zsh/versions/1.0.1/download",
    "version": "1.0.1"
  }
}
</code></pre>

<p>  } <SNIP>
```</p>

<p>Yay! Shoutout to <a href="https://twitter.com/kallistec">Dan DeLeo</a> for preemptively implementing features I didn&rsquo;t even know I wanted yet :&ndash;).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick Tip: ChefDK Provision]]></title>
    <link href="http://jtimberman.housepub.org/blog/2015/05/15/quick-tip-chefdk-provision/"/>
    <updated>2015-05-15T16:18:03-06:00</updated>
    <id>http://jtimberman.housepub.org/blog/2015/05/15/quick-tip-chefdk-provision</id>
    <content type="html"><![CDATA[<p>Earlier today, <a href="https://www.chef.io/blog/2015/05/15/chefdk-0-6-0-released/">ChefDK 0.6.0 was released</a>. In this post, I will illustrate a fairly simple walkthrough using Amazon EC2, based on information in the <a href="https://github.com/chef/chef-dk/blob/master/PROVISION_README.md#basic-example">document</a>. This example will include Policyfile use, too. Let&rsquo;s get started.</p>

<p>First, install ChefDK 0.6.0. You can get it from the <a href="downloads.chef.io/chef-dk">Chef Downloads page</a>.</p>

<p>Next, setup <a href="https://jtimberman.housepub.org/blog/2013/10/19/managing-multiple-aws-account-credentials/">AWS credentials</a>. Ensure that they are exported to the current shell environment.</p>

<pre><code>AWS_ACCESS_KEY_ID=secrets
AWS_SECRET_ACCESS_KEY=secrets
AWS_DEFAULT_REGION=us-east-1
AWS_SSH_KEY=your_ssh_key_name
AWS_ACCESS_KEY=secrets
AWS_SECRET_KEY=secrets
</code></pre>

<p>I&rsquo;m going to use Hosted Chef as my Chef Server. I already have my user API key and configuration in <code>~/.chef</code>, and I&rsquo;m going to rely on the automatic configuration detection in the <code>chef</code> command for that.</p>

<p>Generate a new repository using the <code>chef generate</code> command. Further commands run from this directory.</p>

<pre><code>chef generate repo chefdk-provision-demo
cd chefdk-provision-demo
</code></pre>

<p>Generate a <code>provision</code> cookbook. This is the required name, and it must be in the current directory.</p>

<pre><code>chef generate cookbook provision
</code></pre>

<p>Edit the default recipe, <code>$EDITOR provision/recipes/default.rb</code>.</p>

<p>```ruby
context = ChefDK::ProvisioningData.context
with_driver &lsquo;aws::us-west-2&rsquo;
options = {
  ssh_username: &lsquo;admin&rsquo;,
  use_private_ip_for_ssh: false,
  bootstrap_options: {</p>

<pre><code>key_name: 'jtimberman',
image_id: 'ami-0d5b6c3d',
instance_type: 'm3.medium',
</code></pre>

<p>  },
  convergence_options: context.convergence_options,
}
machine context.node_name do
  machine_options options
  action context.action
  converge true
end
```</p>

<p>To break this down, first we get the ChefDK provisioning context that will pass in options to <code>chef-provisioning</code>. Then we tell <code>chef-provisioning</code> to use the AWS driver, and in the <code>us-west-2</code> region. The options hash is used to setup the instance. We&rsquo;re using <a href="https://wiki.debian.org/Cloud/AmazonEC2Image/Jessie">Debian 8</a>, which uses the <code>admin</code> user to log in, an SSH key that exists in the AWS region, the actual AMI, and finally the instance type. Then, we&rsquo;re going to set the convergence options automatically from ChefDK. This is the important part that will ensure the node has the right run list.</p>

<p>Generate a <code>Policyfile.rb</code>.</p>

<pre><code>chef generate policyfile
</code></pre>

<p>And edit its content, <code>$EDITOR Policyfile.rb</code>.</p>

<p><code>ruby
name            "chefdk-provision-demo"
default_source  :community
run_list        "recipe[libuuid-user]"
cookbook        "libuuid-user"
</code></p>

<p>Here we&rsquo;re simply getting the <a href="https://supermarket.chef.io/cookbooks/libuuid">libuuid-user cookbook from Supermarket</a> and applying the default recipe to the nodes that have this policy.</p>

<p>The next step is to install the Policyfile. This generates the Policyfile.lock.json, and downloads the cookbooks to the cache, <code>~/.chefdk/cache/cookbooks</code>. If this isn&rsquo;t run, <code>chef</code> will complain, with a reminder to run it.</p>

<pre><code>chef install
</code></pre>

<p>Finally, we can provision a testing system with this policy:</p>

<pre><code>chef provision testing --sync -n debian-libuuid
</code></pre>

<p>This will result in output similar to this:</p>

<pre><code>Uploading policy to policy group testing
Uploaded libuuid-user 1.0.1 (c3220a49)
Compiling Cookbooks...
Recipe: provision::default
  * machine[debian-libuuid] action converge
    - Create debian-libuuid with AMI ami-0d5b6c3d in us-west-2
    - create node debian-libuuid at https://chef-api.example.com/organizations/testing
    -   add normal.tags = nil
    -   add normal.chef_provisioning = {"hash" =&gt; "of options"}
    - waiting for debian-libuuid (i-251f1cec on aws::us-west-2) to be connectable (transport up and running) ...
    - been waiting 60/120 -- sleeping 10 seconds for debian-libuuid (i-251f1cec on aws::us-west-2) to be connectable ...
    - debian-libuuid is now connectable        - generate private key (2048 bits)
    - create directory /etc/chef on debian-libuuid
    - write file /etc/chef/client.pem on debian-libuuid
    - create client debian-libuuid at clients
    -   add public_key = "-----BEGIN PUBLIC KEY-----\n..."
    - Add debian-libuuid to client read ACLs
    - Add debian-libuuid to client update ACLs
    - create directory /etc/chef/ohai/hints on debian-libuuid
    - write file /etc/chef/ohai/hints/ec2.json on debian-libuuid
    - write file /etc/chef/client.rb on debian-libuuid
    - write file /tmp/chef-install.sh on debian-libuuid
    - run 'bash -c ' bash /tmp/chef-install.sh'' on debian-libuuid
    [debian-libuuid] Starting Chef Client, version 12.3.0
                     [2015-05-15T22:42:43+00:00] WARN: Using experimental Policyfile feature
                     resolving cookbooks for run list: ["libuuid-user::default@1.0.1 (c3220a4)", "libuuid-user::verify@1.0.1 (c3220a4)"]
                     Synchronizing Cookbooks:
                       - libuuid-user
                     Compiling Cookbooks...
                     Converging 1 resources
                     Recipe: libuuid-user::default
                       * user[libuuid] action create
                       - create user libuuid

                     Running handlers:
                     Running handlers complete
                     Chef Client finished, 1/1 resources updated in 5.29666495 seconds
    - run 'chef-client -l auto' on debian-libuuid
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick Tip: Create a Provisioner Node]]></title>
    <link href="http://jtimberman.housepub.org/blog/2015/02/09/quick-tip-create-a-provisioner-node/"/>
    <updated>2015-02-09T20:50:12-07:00</updated>
    <id>http://jtimberman.housepub.org/blog/2015/02/09/quick-tip-create-a-provisioner-node</id>
    <content type="html"><![CDATA[<p>This quick tip is brought to you by my preparation for my ChefConf talk about using Chef Provisioning to build a Chef Server Cluster, which is based on my blog post about the same. In the blog post I used chef-zero as my Chef Server, but for the talk I&rsquo;m using Hosted Chef.</p>

<p>In order for the Chef Provisioning recipe to work the provisioning node &ndash; the node that runs chef-client &ndash; needs to have the appropriate permissions to manage objects on the Chef Server. This is easy with chef-zero &ndash; there are no ACLs at all. However in Hosted Chef, like any regular Chef Server, the ACLs don&rsquo;t allow nodes' API clients to modify other nodes, or API clients.</p>

<p>Fortunately we can do all the work necessary using knife, with the <a href="https://github.com/chef/knife-acl">knife-acl</a> plugin. In this quick tip, I&rsquo;ll create a group for provisioning nodes, and give that group the proper permissions for the Chef Provisioning recipe to create the machines' nodes and clients.</p>

<p>First of all, I&rsquo;m using ChefDK, and it&rsquo;s my Ruby environment too, so install the gem:</p>

<p><code>sh
chef gem install knife-acl
</code></p>

<p>Next, use the <code>knife group</code> subcommand to create the new group. Groups are a number of users and/or API clients. By default, an organization on Hosted Chef will have <code>admins</code>, <code>billing-admins</code>, <code>clients</code>, and <code>users</code>. Let&rsquo;s create <code>provisioners</code> now.</p>

<p><code>sh
knife group create provisioners
</code></p>

<p>The Role-based access control (RBAC) system in the Chef Server allows us to assign read, create, update, grant, and delete permissions to various objects in the organization. Containers are a special holder of other types of objects, in this case we need to add permissions for the clients and nodes containers. This is what allows the Chef Provisioning recipe&rsquo;s <code>machine</code> resources to have their Chef objects created.</p>

<p>```sh
for i in read create update grant delete
do
  knife acl add containers clients $i group provisioners
done</p>

<p>for i in read create update grant delete
do
  knife acl add containers nodes $i group provisioners
done
```</p>

<p>Next, we need the API client that will be used by the Chef Provisioning node to authenticate with the Chef Server, and the node needs to be created as well. By default the client will automatically have permissions for the node object that has the same name.</p>

<p><code>sh
knife client create -d chefconf-provisioner &gt; ~/.chef/chefconf-provisioner.pem
knife node create -d chefconf-provisioner
</code></p>

<p>Finally, we need to put the new API client into the provisioners group that was created earlier. First we need to get a mapping of the actors in the organization. Then we can add the client to the group.</p>

<p><code>sh
knife actor map
knife group add actor provisioners chefconf-provisioner
</code></p>

<p>The <code>knife actor map</code> command will generate a YAML file like this:</p>

<h2>```yaml</h2>

<p>:user_map:
  :users:</p>

<pre><code>jtimberman: 12345678901234567890123456780123
</code></pre>

<p>  :usags:</p>

<pre><code>12345678901234567890123456780123: jtimberman
</code></pre>

<p>:clients:
  chefconf-provisioner: chefconf-provisioner
  jtimberman-chefconf-validator: jtimberman-chefconf-validator
```</p>

<p>This maps users to their USAG and stores a list of clients. More information about this is in the <a href="https://github.com/chef/knife-acl/blob/master/README.md">knife-acl README</a></p>

<p>At this point, we have a node, with the private key in <code>~/.chef</code> that can be used with the Chef Server to use Chef Provisioning&rsquo;s <code>machine</code> resource. We can also perform additional tasks that require having a node object, such as create secrets as Chef Vault items:</p>

<p><code>sh
knife vault create secrets dnsimple -M client -J data_bags/secrets/dnsimple.json -A jtimberman -S 'name:chefconf-provisioner'
</code></p>

<p>The entire series of commands is below.</p>

<p>```sh
chef gem install knife-acl
knife group create provisioners</p>

<p>for i in read create update grant delete
do
  knife acl add containers clients $i group provisioners
done</p>

<p>for i in read create update grant delete
do
  knife acl add containers nodes $i group provisioners
done</p>

<p>knife client create -d chefconf-provisioner > ~/.chef/chefconf-provisioner.pem
knife node create -d chefconf-provisioner
knife actor map
knife group add actor provisioners chefconf-provisioner</p>

<p>knife vault create secrets dnsimple -M client -J data_bags/secrets/dnsimple.json -A jtimberman -S &lsquo;name:chefconf-provisioner&rsquo;
```</p>

<p>Hopefully this helps you out with your use of Chef Provisioning, and a non-zero Chef server. If you have further questions, find me at ChefConf!</p>
]]></content>
  </entry>
  
</feed>
