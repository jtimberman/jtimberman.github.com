<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: quicktips | jtimberman's Code Blog]]></title>
  <link href="http://jtimberman.housepub.org/blog/categories/quicktips/atom.xml" rel="self"/>
  <link href="http://jtimberman.housepub.org/"/>
  <updated>2014-12-29T11:43:11-07:00</updated>
  <id>http://jtimberman.housepub.org/</id>
  <author>
    <name><![CDATA[Joshua Timberman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Quick Tip: Chef 12 Homebrew User Mixin]]></title>
    <link href="http://jtimberman.housepub.org/blog/2014/12/29/chef-12-homebrew-user-mixin/"/>
    <updated>2014-12-29T08:56:01-07:00</updated>
    <id>http://jtimberman.housepub.org/blog/2014/12/29/chef-12-homebrew-user-mixin</id>
    <content type="html"><![CDATA[<p>OS X is an interesting operating system. It is a Unix, but is primarily used for workstations. As such, many system settings can, and should, be done as a non-privileged user. Some tasks, however, require administrative privileges. OS X uses <code>sudo</code> to escalate privileges. This is done by a nice GUI pop-up requesting the user password when done through another GUI element. However, one must use <code>sudo $COMMAND</code> when working at the Terminal.</p>

<p>The <a href="http://brew.sh">Homebrew</a> package manager tries to do everything as a non-privileged user. The <a href="https://raw.githubusercontent.com/Homebrew/install/master/install">installation script</a> will invoke some commands with <code>sudo</code> &ndash; namely to create and set the correct permissions on <code>/usr/local</code> (its default installation location). Once that is complete, <code>brew install</code> will not require privileged access for installing packages. In fact, the <a href="https://github.com/Homebrew/homebrew/blob/b19d3afccef0ddc31820f1cb7d1a5316017e29df/share/doc/homebrew/FAQ.md#why-does-homebrew-say-sudo-is-bad-">Homebrew project recommends</a> never using <code>sudo</code> with the <code>brew</code> commands.</p>

<p>In Chef 12 the default provider for the <code>package</code> resource is <code>homebrew</code>. This originally came from the <a href="https://supermarket.chef.io/cookbooks/homebrew">homebrew cookbook</a>. In order to not use <code>sudo</code> when managing packages, there&rsquo;s a helper method (mixin) that attempts to determine what non-privileged user should run the <code>brew install</code> command. This is also <a href="https://github.com/opscode/chef/blob/4cb27331d81b394b816278e2bed6b3395b54b9c9/lib/chef/mixin/homebrew_user.rb">ported to Chef 12</a>. The method can also take an argument that specifies a particular user that should run the <code>brew</code> command.</p>

<p>When managing an OS X system with Chef, it is often easier to just run <code>chef-client</code> as <code>root</code>, rather than be around when <code>sudo</code> prompts for a password. This means that we need a way to execute other commands for managing OS X as a non-privileged user. We can reuse the mixin to do this. I&rsquo;ll demonstrate this using plain old Ruby with <code>pry</code>, which is installed in ChefDK, and I&rsquo;ll start it up with <code>sudo</code>. Then, I&rsquo;ll show a short recipe with <code>chef-apply</code>.</p>

<p><code>
% which pry
/opt/chefdk/embedded/bin/pry
% sudo pry
</code></p>

<p>Paste in the following Ruby code:</p>

<p>```ruby
require &lsquo;chef&rsquo;
include Chef::Mixin::HomebrewUser
include Chef::Mixin::ShellOut</p>

<p>find_homebrew_uid #=> 501
```</p>

<p>The method <code>find_homebrew_uid</code> is the helper we want. As we can see, rather than returning <code>0</code> (for <code>root</code>), it returns <code>501</code>, which is the UID of the <code>jtimberman</code> user on my system. To prove that I&rsquo;m executing in a process owned by <code>root</code>:</p>

<p><code>ruby
Process.uid #=&gt; 0
</code></p>

<p>Or, I can shell out to the <code>whoami</code> command using Chef&rsquo;s <code>shell_out</code> method &ndash; which is the same method Chef would use to run <code>brew install</code>.</p>

<p><code>ruby
shell_out('whoami').stdout #=&gt; "root\n"
</code></p>

<p>The <code>shell_out</code> method can take a <code>:user</code> attribute:</p>

<p><code>ruby
shell_out('whoami', :user =&gt; find_homebrew_uid).stdout #=&gt; "jtimberman\n"
</code></p>

<p>So this can be used to install packages with <code>brew</code>, and is exactly what Chef 12 does.</p>

<p><code>ruby
shell_out('brew install coreutils', :user =&gt; find_homebrew_uid)
</code></p>

<p>Or, it can be used to run <code>defaults(1)</code> settings that require running as a specific user, rather than <code>root</code></p>

<p>```ruby</p>

<h1>Turn off iPhoto face detection, please</h1>

<p>shell_out(&lsquo;defaults write com.apple.iPhoto PKFaceDetectionEnabled 0&rsquo;,</p>

<pre><code>      :user =&gt; find_homebrew_uid)
</code></pre>

<p>```</p>

<p>```sh</p>

<h1>before&hellip;</h1>

<p>jtimberman@localhost% defaults read com.apple.iPhoto PKFaceDetectionEnabled
1</p>

<h1>after!</h1>

<p>jtimberman@localhost% defaults read com.apple.iPhoto PKFaceDetectionEnabled
0
```</p>

<p>Putting this together in a Chef recipe that gets run by <code>root</code>, we can disable face detection in iPhoto like this:</p>

<p>```ruby
Chef::Resource::Execute.send(:include, Chef::Mixin::HomebrewUser)</p>

<p>execute &lsquo;defaults write com.apple.iPhoto PKFaceDetectionEnabled 0&rsquo; do
  user find_homebrew_uid
end
```</p>

<p>The first line makes the method available on all <code>execute</code> resources. To make the method available to all resources, use <code>Chef::Resource.send</code>, and to make it available across everything in all recipes, use <code>Chef::Recipe.send</code>. Otherwise we would get a <code>NoMethodError</code> exception.</p>

<p>The <code>execute</code> resource takes a <code>user</code> attribute, so we use the <code>find_homebrew_uid</code> method here to set the user. And we can observe the same results as above:</p>

<p><code>
jtimberman@localhost% defaults write com.apple.iPhoto PKFaceDetectionEnabled 1
jtimberman@localhost% defaults read com.apple.iPhoto PKFaceDetectionEnabled
1
jtimberman@localhost% sudo chef-apply nofaces.rb
Recipe: (chef-apply cookbook)::(chef-apply recipe)
* execute[defaults write com.apple.iPhoto PKFaceDetectionEnabled 0] action run
- execute defaults write com.apple.iPhoto PKFaceDetectionEnabled 0
jtimberman@localhost% defaults read com.apple.iPhoto PKFaceDetectionEnabled
0
</code></p>

<p>Those who have read the workstation management posts on this blog in the past may be aware that I have a <a href="https://supermarket.chef.io/cookbooks/mac_os_x">cookbook</a> that can manage OS X &ldquo;<code>defaults(1)</code>&rdquo; settings. I <a href="https://github.com/chef-osx/mac_os_x/issues/21">plan to make updates</a> to the resource in that cookbook that will leverage this method.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick Tip: Deleting Attributes]]></title>
    <link href="http://jtimberman.housepub.org/blog/2014/12/24/quicktip-delete-attributes/"/>
    <updated>2014-12-24T10:00:40-07:00</updated>
    <id>http://jtimberman.housepub.org/blog/2014/12/24/quicktip-delete-attributes</id>
    <content type="html"><![CDATA[<p>I have a new goal for 2015, and that is to write at least one &ldquo;Quick Tip&rdquo; per week about Chef. I&rsquo;ve added the category &ldquo;<a href="/blog/categories/quicktips">quicktips</a>&rdquo; to make these easier to find.</p>

<p>In this quick tip, I want to talk about a new feature of Chef 12. The new feature is the ability to remove an attribute from all levels (default, normal, override) on a node so it doesn&rsquo;t get saved back to the Chef Server. This was brought up in <a href="https://github.com/opscode/chef-rfc/blob/master/rfc023-chef-12-attributes-changes.md#global-level-removals">Chef RFC 23</a>. The reason I don&rsquo;t want to save the attribute in question back to the server is that it is a secret that I have in a <a href="https://github.com/Nordstrom/chef-vault">Chef Vault item</a>.</p>

<p>I&rsquo;m using <a href="https://www.datadoghq.com">Datadog</a> for my home systems, and the wonderful folks at Datadog have a <a href="https://supermarket.chef.io/cookbooks/datadog">cookbook</a> to set it up. The documentation requires that you set two attributes to authenticate, the API key, and the application key:</p>

<p><code>ruby
node.default['datadog']['api_key'] = 'Secrets In Plain Text Attributes??'
node.default['datadog']['application_key'] = 'It is probably fine.'
</code></p>

<p>I prefer to use chef-vault because <a href="http://jtimberman.housepub.org/blog/2013/09/10/managing-secrets-with-chef-vault/">I think it&rsquo;s the best way</a> to manage shared secrets in Chef recipes. I still need to set the attributes for Datadog&rsquo;s recipe to work, however. In order to accomplish the goal here, I will use a custom cookbook, <code>housepub-datadog</code>. It has one recipe that looks like this:</p>

<p>```ruby
include_recipe &lsquo;chef-vault&rsquo;</p>

<p>node.default[&lsquo;datadog&rsquo;][&lsquo;api_key&rsquo;] = chef_vault_item(:secrets, &lsquo;datadog&rsquo;)[&lsquo;data&rsquo;][&lsquo;api_key&rsquo;]
node.default[&lsquo;datadog&rsquo;][&lsquo;application_key&rsquo;] = chef_vault_item(:secrets, &lsquo;datadog&rsquo;)[&lsquo;data&rsquo;][&lsquo;chef&rsquo;]</p>

<p>include_recipe &lsquo;datadog::dd-agent&rsquo;</p>

<p>ruby_block &lsquo;smash-datadog-auth-attributes&rsquo; do
  block do</p>

<pre><code>node.rm('datadog', 'api_key')
node.rm('datadog', 'application_key')
</code></pre>

<p>  end
  subscribes :create, &lsquo;template[/etc/dd-agent/datadog.conf]&rsquo;, :immediately
end
```</p>

<p>Let&rsquo;s take a closer look at the recipe.</p>

<p><code>ruby
include_recipe 'chef-vault'
</code></p>

<p>Here, the <code>chef-vault</code> recipe is included to ensure everything works, and I have a dependency on <code>chef-vault</code> in my cookbook&rsquo;s metadata. Next, we see the attributes set:</p>

<p><code>ruby
node.default['datadog']['api_key'] = chef_vault_item(:secrets, 'datadog')['data']['api_key']
node.default['datadog']['application_key'] = chef_vault_item(:secrets, 'datadog')['data']['chef']
</code></p>

<p>The <code>secrets/datadog</code> item looks like this in plaintext:</p>

<p>```json
{
  &ldquo;id&rdquo;: &ldquo;datadog&rdquo;,
  &ldquo;data&rdquo;: {</p>

<pre><code>"api_key": "My datadog API key",
"chef": "Application key for the 'chef' application"
</code></pre>

<p>  }
}
```</p>

<p>When Chef runs, it will load the vault-encrypted data bag item, and populate the attributes that will be used in the template. This template comes from the <code>datadog::dd-agent</code> recipe, which is included next. The template from that recipe looks like this:</p>

<p>```ruby
template &lsquo;/etc/dd-agent/datadog.conf&rsquo; do
  owner &lsquo;root&rsquo;
  group &lsquo;root&rsquo;
  mode 0644
  variables(</p>

<pre><code>:api_key =&gt; node['datadog']['api_key'],
:dd_url =&gt; node['datadog']['url']
</code></pre>

<p>  )
end
```</p>

<p>Now, for the grand finale of this post, I delete the attributes that were set using a <code>ruby_block</code> resource. The timing here is important, because these attributes must be deleted after Chef has converged the template. This does get updated every run, because the ruby block is not convergent, and this is okay because the attributes are updated every run, too. I could write additional logic to make this convergent, but I&rsquo;m okay with the behavior. The <code>subscribes</code> ensures that as soon as the template is written, the node object is updated to remove the attributes. Otherwise, this happens next after the <code>dd-agent</code> recipe.</p>

<p>```ruby
ruby_block &lsquo;smash-datadog-auth-attributes&rsquo; do
  block do</p>

<pre><code>node.rm('datadog', 'api_key')
node.rm('datadog', 'application_key')
</code></pre>

<p>  end
  subscribes :create, &lsquo;template[/etc/dd-agent/datadog.conf]&rsquo;, :immediately
end
```</p>

<p>Let&rsquo;s see this in action:</p>

<p>```
managed-node$ chef-client
&hellip;
Recipe: housepub-datadog::default
  * ruby_block[smash-datadog-auth-attributes] action run</p>

<pre><code>- execute the ruby block smash-datadog-auth-attributes
</code></pre>

<p>&hellip;
workstation% knife node show managed-node -a datadog.api_key -a datadog.application_key
managed-node:
  datadog.api_key:
  datadog.application_key:
```</p>

<p><strong>Bonus quick tip!</strong> <code>knife node show</code> can take the <code>-a</code> option multiple times to display more attributes. I just discovered this in writing this post, and I don&rsquo;t know when it was added. For sure in Chef 12.0.3, so you should just upgrade anyway ;).</p>

<p><em>Update</em> This <a href="https://github.com/opscode/chef/commit/4133160972a9972a9a062579504faa40eaa4c8db">feature was added</a> by <a href="https://twitter.com/RanjibDey">Awesome Chef Ranjib Dey</a>.</p>
]]></content>
  </entry>
  
</feed>
