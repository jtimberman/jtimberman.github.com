<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: osx | jtimberman's Code Blog]]></title>
  <link href="http://jtimberman.housepub.org/blog/categories/osx/atom.xml" rel="self"/>
  <link href="http://jtimberman.housepub.org/"/>
  <updated>2014-12-25T14:18:11-07:00</updated>
  <id>http://jtimberman.housepub.org/</id>
  <author>
    <name><![CDATA[Joshua Timberman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OS X Workstation Management with Chef]]></title>
    <link href="http://jtimberman.housepub.org/blog/2012/07/29/os-x-workstation-management-with-chef/"/>
    <updated>2012-07-29T12:36:00-06:00</updated>
    <id>http://jtimberman.housepub.org/blog/2012/07/29/os-x-workstation-management-with-chef</id>
    <content type="html"><![CDATA[<p><strong>Update: This post is old and outdated. I&rsquo;ll have another post in 2015 about workstation management with Chef.</strong></p>

<p>I have written
<a href="/blog/2011/04/03/managing-my-workstations-with-chef/">twice</a>
<a href="/blog/2011/09/04/update-to-managing-my-workstations/">before</a> about
managing my OS X workstations with Chef. The first post has one of my
highest hit counts of any blog post, so it is certainly a topic of
interest to people.</p>

<p>This post is a rewrite of the original, and now has an
<a href="https://github.com/jtimberman/workstation-chef-repo">accompanying Chef Repository</a>
where all the code I talk about is available.</p>

<h2>Background</h2>

<p>The current incarnation of this repository lives in the more general
private Chef Repository I use for my home network, since I manage more
than just workstations with Chef. I have used the main recipe
(workstation::default) with great success on several Mac OS X systems:
Macbook Pro, iMac, and Macbook Air running various versions between
10.6 and 10.8. I recently used it to configure a replacement Macbook
Pro for work, and then again after upgrading to
<a href="/blog/2012/07/27/mountain-lion-upgrade/">Mountain Lion</a>.</p>

<h2>The Setup</h2>

<p>Also known as &ldquo;bootstrapping Chef&rdquo;, the system needs to be set up to
run Chef.</p>

<ul>
<li>Opscode Hosted Chef is my Chef Server</li>
<li>I run everything as a non-privileged user</li>
</ul>


<h3>Installation</h3>

<p>I use the Opscode
<a href="http://opscode.com/chef/install">full-stack installer</a> on all my
systems, including OS X, because it includes everything Chef needs,
including Ruby.</p>

<p>Whether you&rsquo;re unpacking a brand new Mac, or using an existing system,
use this command:</p>

<p><code>sh
curl -L https://opscode.com/chef/install.sh | sudo bash
</code></p>

<p>Symbolic links are created for Chef&rsquo;s binaries in <code>/usr/bin</code>.</p>

<p><strong>Mountain Lion Note</strong>: I did this on Lion before upgrading to
  Mountain Lion. Apple removed X11 from Mountain Lion, and the
  installer opens an xterm, so I don&rsquo;t know how/if this works the
  same on a brand new Mountain Lion system.</p>

<h3>Configuration</h3>

<p>Next, create a configuration file for the Chef Server, and copy the
validation key into place. If this is a new Mac, you&rsquo;ll need to get
your validation key copied to the system.</p>

<p><code>sh
sudo mkdir -p /etc/chef
sudo vi /etc/chef/client.rb
cp ~/Downloads/ORGNAME-validation.pem /etc/chef/validation.pem
</code></p>

<p>I am using Opscode Hosted Chef, and this is my <code>/etc/chef/client.rb</code>.
The path options are so Chef writes its files in a location my user
has write access.</p>

<p><code>ruby
base_dir = "/Users/USERNAME/.chef"
chef_server_url         'https://api.opscode.com/organizations/ORGNAME'
validation_client_name  'ORGNAME-validator'
checksum_path           "#{base_dir}/checksum"
file_cache_path         "#{base_dir}/cache"
file_backup_path        "#{base_dir}/backup"
cache_options({:path =&gt; "#{base_dir}/cache/checksums", :skip_expires =&gt; true})
</code></p>

<h2>The Repository</h2>

<p>I have made
<a href="https://github.com/jtimberman/workstation-chef-repo">the repository available on GitHub</a>.</p>

<p><code>sh
git clone git://github.com/jtimberman/workstation-chef-repo.git
</code></p>

<p>Normally, systems that are configured with Chef wouldn&rsquo;t have the Chef
Repository on them. For the purpose of this post, clone the
repository to the local system. Presumably, one might do further
development to it.</p>

<p>Before we upload it and run Chef, let&rsquo;s explore what is included.</p>

<h2>Data Bags</h2>

<p>The repository contains two data bags with a single item each. One is
for the local user, the other is for the workstation setup.</p>

<p>The USERNAME should be changed to the local user that is being
configured on the workstation. To ensure that the correct value is
used, run the following and use the value returned.</p>

<p><code>
% ruby -retc -e 'puts Etc.getlogin'
jtimberman
</code></p>

<p>Thus, I use <code>jtimberman</code> for my systems.</p>

<p>The user data bag item is used in two cookbooks, users and
workstation. This is described below under Cookbooks.</p>

<p>The workstation data bag item contains various data about the
workstation itself, software that should be installed, property list
files dropped off, etc. The JSON file in the repository contains several
examples. Modify this as required for your own system.</p>

<h2>Roles</h2>

<p>There are three roles.</p>

<h3>base</h3>

<p>This is the role I apply on <em>all</em> my systems, not just workstations.
Aside from the contents of the role file in the repository, I also set
attributes across my systems for a variety of other purposes like
postfix, munin, ntp and so forth. For the workstation setup purposes,
it contains the attributes I use for installing Ruby under Rbenv, and
the gems I want available on all my systems that aren&rsquo;t project
specific (I use <a href="http://gembundler.com">bundler</a> for those).</p>

<p>``` ruby
name &ldquo;base&rdquo;
description &ldquo;Base role for all nodes&rdquo;
override_attributes(
  &ldquo;ruby_build&rdquo; => {</p>

<pre><code>"git_ref" =&gt; "v20120524",
"upgrade" =&gt; true,
"install_pkgs" =&gt; []
</code></pre>

<p>  },
  &ldquo;rbenv&rdquo; => {</p>

<pre><code>"install_pkgs" =&gt; [],
"user_installs" =&gt; [
  {
    "user" =&gt; "USERNAME",
    "rubies" =&gt; ["1.9.3-p194"],
    "global" =&gt; "1.9.3-p194",
    "gems" =&gt; {
      "1.9.3-p194" =&gt; [
        {"name" =&gt; "bundler", "version" =&gt; "1.1.1"},
        {"name" =&gt; "git-up"},
      ]
    }
  }
]
</code></pre>

<p>  }
)
```</p>

<p>Edit the list of gems as required for your preferences. The ones
included in the role are what I find useful or required for my day to
day work on Chef and Chef-related projects (like
<a href="https://github.com/opscode-cookbooks">opscode-cookbooks</a>).</p>

<p>The base role does not have a run list. It is included instead by OS
specific roles that I apply to Ubuntu or OS X systems respectively. As
this is a post for my OS X workstations, let&rsquo;s look at that role next.</p>

<h3>mac_os_x</h3>

<p>The <code>mac_os_x</code> role is applied on all my OS X systems. Of note, it
includes the base role, and the homebrew recipe. The homebrew cookbook
includes a package resource provider that replaces the Chef default
for OS X, macports, with homebrew.</p>

<p><code>ruby
name "mac_os_x"
description "Role applied to all Mac OS X systems."
run_list(
  "role[base]",
  "recipe[build-essential]",
  "recipe[homebrew]"
)
</code></p>

<p>This role probably doesn&rsquo;t need to be edited.</p>

<h3>workstation</h3>

<p>This is the role of interest, which contains the workstation specific
run list and attributes.</p>

<p>The role itself is very long, so I won&rsquo;t include it here. You can view it
<a href="https://github.com/jtimberman/workstation-chef-repo/tree/master/roles/workstation.rb">in the repository</a>.</p>

<p>Do note that <code>recipe[mac_os_x::firewall]</code> requires root access, and
will prompt for the sudo password (and pause the whole run until entered).</p>

<p>Edit the <code>mac_os_x</code> settings as required for your own preferences.
Edit other attributes as required for software you wish to use or
install.</p>

<h2>Cookbooks</h2>

<p>The repository uses a number of cookbooks, most of which are published
on the Chef Community site as well. I&rsquo;m not going to describe all the
cookbooks in this post, just the ones that are most relevant for
workstation setup.</p>

<h3>Development Essentials</h3>

<p>These are:</p>

<ul>
<li>build-essential</li>
<li>homebrew</li>
<li>git</li>
<li>ruby_build</li>
<li>rbenv</li>
</ul>


<p>On OS X, <code>build-essential</code> will install
<a href="https://github.com/kennethreitz/osx-gcc-installer">Kenneth Reitz&rsquo;s OS X GCC installer</a>
&ndash; XCode is <em>not required</em>. Of course, you may have other reasons why
  you want to have XCode, and that is outside the scope of this
  repository. If so, remove the build-essential recipe from the roles.</p>

<p>The homebrew cookbook uses
<a href="http://mxcl.github.com/homebrew/">Homebrew</a> as the default package
provider on OS X. The default recipe will install Homebrew, Git with homebrew, and
ensure that the formulae are updated.</p>

<p><strong>IMPORTANT NOTE</strong> Homebrew recently &ldquo;broke&rdquo;
  (<a href="https://github.com/mxcl/homebrew/issues/13299">in my opinion</a>) the
  output of <code>brew info</code>. I manually patched <a href="https://github.com/mxcl/homebrew/pull/13300/files">my local copy of Library/Homebrew/cmd/info.rb</a> after discovering
  this halfway through setup of my new system.</p>

<p>The git cookbook installs git using
<a href="https://code.google.com/p/git-osx-installer/">the Git OS X installer</a>,
and the git binary will be <code>/usr/bin/git</code>. This is redundant with git
installed from homebrew, but at some point I had issues and I don&rsquo;t
remember if they were resolved. If you wish to use git from homebrew,
use <code>/usr/local/bin/git</code> instead.</p>

<p>The ruby_build and rbenv cookbooks are by Fletcher Nichol, and are
quite excellent for installing per-user Rubies of a specific version,
and gems using the <code>rbenv_gem</code> LWRP. The <code>base</code> role has the
attributes set up for how I like this, YMMV.</p>

<h3>users</h3>

<p>I use an older, modified version of Opscode&rsquo;s <code>users</code> cookbook, pre
<code>users_manage</code> LWRP. The recipe adds capability for distributing
arbitrary files, such as dotfiles for users. To use this, create a
&ldquo;files&rdquo; section of the users data bag item. The USERNAME.json item
includes examples of this. Each file needs to be copied to
<code>cookbooks/users/files/default/USERNAME/</code> as the source file name used
in the data bag item.</p>

<h3>workstation</h3>

<p>The workstation cookbook has a recipe that does all the work of
reading the workstation data bag item and setting up the system per
the data available.</p>

<p>The README.md in the cookbook contains detailed information about its
use, and the data bag item already has the structure to get started.</p>

<p>If the <code>plists</code> array is used, then each plist file should be copied
into the <code>files/default/</code> directory.</p>

<h3>mac_os_x</h3>

<p>My <a href="http://community.opscode.com/cookbooks/mac_os_x">mac_os_x</a>
cookbook has two LWRPs that I use elsewhere in this repository:</p>

<ul>
<li><code>mac_os_x_plist</code> &ndash; drops off property list (plist) files in <code>~/Library/Preferences</code></li>
<li><code>mac_os_x_userdefaults</code> &ndash; writes OS X user settings with the <code>defaults(1)</code> system</li>
</ul>


<p>The plist files used by <code>mac_os_x_plist</code> should be added in the
<code>files/default</code> directory of the cookbook where the resource is used
in a recipe.</p>

<p>The <code>mac_os_x::settings</code> recipe will read the
<code>node['mac_os_x']['settings']</code> attribute for user defaults to apply.</p>

<p>See the <code>mac_os_x</code> cookbook&rsquo;s README for more information.</p>

<h3>Applications</h3>

<p>The following are application specific cookbooks that I use:</p>

<ul>
<li>iterm2</li>
<li>virtualbox</li>
<li>ghmac</li>
<li>1password</li>
<li>xquartz</li>
</ul>


<p>The iTerm2 cookbook will set up iTerm 2 and optionally add tmux
integration. I
<a href="/blog/2012/01/28/iterm2-with-tmux/">wrote about this awhile back</a>.</p>

<p>We use <a href="http://vagrantup.com">Vagrant</a> extensively at Opscode, which
requires VirtualBox. This recipe will install it per the attributes
set in the workstation role.</p>

<p>Install <a href="http://mac.github.com">GitHub for Mac</a> with the ghmac
cookbook. Local setup for it is on your own.</p>

<p>I have 1password in here because I used to install it from the zip
file, but I may remove this at some point since I install it from the
Mac App Store now.</p>

<p>Note that the versions of these apps may be old, but they have
Sparkle.framework or can otherwise update themselves to newer versions
easily. Click the buttons, it&rsquo;s cool.</p>

<p>I don&rsquo;t have a recipe for managing application installation through
the Mac App Store. It&rsquo;s really not that hard to fire up the app and
click the &ldquo;Install&rdquo; button next to the apps you want though.
Seriously, it would take longer to figure out a command-line or API
way to do this, if it&rsquo;s even possible. Just click the button.</p>

<h3>Others</h3>

<p>The other cookbooks in the repository are there as dependencies and
may or may not be used specifically.</p>

<h2>Upload Repository, Run Chef</h2>

<p>Once it is cloned, all the components need to be uploaded to the Chef
Server with Knife. As that is installed with Chef, it will be
available. The knife config file and user key do need to be copied to
<code>.chef</code> in the chef-repo. If necessary, download them from Opscode
Hosted Chef (or your Chef Server).</p>

<p><code>sh
cd workstation-chef-repo
mkdir .chef
cp ~/Downloads/knife.rb .chef
cp ~/Downloads/USERNAME.pem .chef
</code></p>

<p>Make your changes to the data bags and roles. I&rsquo;ll wait here.</p>

<p>Then, upload everything.</p>

<p><code>sh
knife data bag create users
knife data bag create apps
knife data bag from file users USERNAME.json
knife data bag from file apps workstation.json
knife role from file base.rb mac_os_x.rb workstation.rb
knife cookbook upload -a
</code></p>

<p>Finally, run Chef!
<code>
% whoami
jtimberman
% chef-client
INFO: *** Chef 10.12.0 ***
... loads of output, hooray ...
INFO: Chef Run complete in 45.116912 seconds
</code></p>

<h2>FAQ</h2>

<p>These aren&rsquo;t necessarily questions anyone asked, but a more preemptive
FAQ :).</p>

<h3>This seems heavyweight, why all this effort?</h3>

<p>As a sysadmin, I want to do something once and automate it afterward.
That includes all the stuff I need to do to have a useful, usable work
environment. This means that when I get a new computer, or have to
wipe and reinstall (rare, but happens), I can get back to a productive
environment very quickly.</p>

<p>I have three OS X systems I use regularly (work laptop, personal
laptop, family iMac). Having them in a Chef Server gives me access to
information about these systems easily with knife.</p>

<p>Also, this post is focused specifically on OS X, however this setup
works pretty much as is on Linux. I simply don&rsquo;t use Linux as a
desktop OS, but I do have &ldquo;workstation-like&rdquo; systems that I SSH into,
and this is generally fine for those.</p>

<h3>Why Chef Server? Why not Chef Solo?</h3>

<p>Honestly, I don&rsquo;t actually use Chef Solo except as a way to setup a
<a href="http://wiki.opscode.com/display/chef/Installing+Chef+Server+using+Chef+Solo">Chef Server</a>.
Since I use Chef Client/Chef Server so often, it is second nature for
me to do it. You&rsquo;re free to adapt this to work with Solo.</p>

<h3>Will you support Windows with this repository?</h3>

<p>No. I don&rsquo;t use Windows as a workstation/desktop anymore.</p>

<p>It might just work on Windows though. It did once, but I haven&rsquo;t tried
in a few months.</p>

<h3>I want to make this moar awesome, will you merge my pull request?</h3>

<p>Thank you. I appreciate that you want to help me, or other members of
the community. However I consider this pretty much &ldquo;feature complete&rdquo;,
as it meets all my needs, and I don&rsquo;t plan to merge any pull requests.</p>

<p>For individual cookbooks, they have their own repositories linked from
their pages on the Chef Community site.</p>

<h3>Why do you have redundancy or inconsistent use?</h3>

<p>Such as plist file location, dmg installation, etc.</p>

<p>Because: Reasons. This codebase has been developed over ~2 years. It
works for me.</p>

<h3>How can I get help?</h3>

<p>You can <a href="mailto:opensource@housepub.org">email me</a>. However, as I said
before this is a free time project, so I might not respond right away.
If you&rsquo;re an Opscode Hosted or Private Chef customer, please contact
<a href="http://www.opscode.com/support/">Opscode support</a>. Finally, community
based support is available through our
<a href="http://community.opscode.com">community resources</a>.</p>

<h1>Further resources</h1>

<p>If this is a topic of interest to you, I&rsquo;d also like to point out a
few similar projects that may be interesting. They have inspired me
and things I have implemented in my own setup, so thank you Ben, Corey
and Matthew and Brian at Pivotal!</p>

<ul>
<li><a href="https://github.com/bleything/bootstrap">Ben Bleything&rsquo;s OS X Bootstrap</a></li>
<li><a href="http://www.atmos.org/cinderella/">Corey Donohoe&rsquo;s Cinderella</a></li>
<li><a href="https://github.com/pivotal/pivotal_workstation/">Pivotal Labs workstation setup</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mountain Lion Upgrade]]></title>
    <link href="http://jtimberman.housepub.org/blog/2012/07/27/mountain-lion-upgrade/"/>
    <updated>2012-07-27T16:25:00-06:00</updated>
    <id>http://jtimberman.housepub.org/blog/2012/07/27/mountain-lion-upgrade</id>
    <content type="html"><![CDATA[<p>I upgraded my work laptop to Mountain Lion today. It was not as smooth
as previous OS X upgrades have been for me, despite my efforts in
managing my workstation(s) with Chef.</p>

<p>I received a replacement laptop for the one that was damaged at
ChefConf a couple weeks ago (champagne spill &ndash; long story, maybe for
another blog post). As this is a new laptop, it is eligible for the
free Mountain Lion upgrade. So on ML release day, I submitted my
information to Apple for the redemption code, which I received this
morning. As I&rsquo;m actually on vacation this week, I thought there was no
better time to upgrade.</p>

<p>You may recall that I have managed my
<a href="/blog/2011/04/03/managing-my-workstations-with-chef/">workstations</a>
<a href="/blog/2011/09/04/update-to-managing-my-workstations/">with Chef</a> for
quite some time. This has been all well and good so far, though the
Mountain Lion installation didn&rsquo;t seem to like something in my
preferences along the way.</p>

<p>After the installation finished and the system rebooted, I logged in,
expecting to be greeted with my already configured system. This was
not the case, however! My desktop was that light grey of the OS X boot
screen, and the Dock was not running at all. I put on my
<a href="http://sysadminday.com">sysadmin hat</a> (like I ever take it off?!),
and started debugging. I found the issue pretty quickly.</p>

<p>```
Jul 27 08:42:35 champagne.local Dock[423]: &ndash;[<strong>NSCFBoolean isEqualToString:]: unrecognized selector sent to instance 0x7fff75d0fab0
Jul 27 08:42:35 champagne.local Dock[423]: *** Terminating app due to uncaught exception &lsquo;NSInvalidArgumentException&rsquo;, reason: &lsquo;&ndash;[</strong>NSCFBoolean isEqualToString:]: unrecognized selector sent to instance 0x7fff75d0fab0&rsquo;</p>

<pre><code>    *** First throw call stack:
    (
            0   CoreFoundation                      0x00007fff8fca9716 __exceptionPreprocess + 198
            1   libobjc.A.dylib                     0x00007fff8dc63470 objc_exception_throw + 43
            2   CoreFoundation                      0x00007fff8fd3fd5a -[NSObject(NSObject) doesNotRecognizeSelector:] + 186
            3   CoreFoundation                      0x00007fff8fc97c3e ___forwarding___ + 414
            4   CoreFoundation                      0x00007fff8fc97a28 _CF_forwarding_prep_0 + 232
            5   Dock                                0x000000010da92786 Dock + 681862
            6   Dock                                0x000000010d9f10b2 Dock + 20658
            7   Dock                                0x000000010dab9aed Dock + 842477
            8   libdyld.dylib                       0x00007fff852c17e1 start + 0
    )
</code></pre>

<p>Jul 27 08:42:35 champagne com.apple.launchd.peruser.501[267] (com.apple.Dock.agent[423]): Job appears to have crashed: Abort trap: 6
Jul 27 08:42:35 champagne com.apple.launchd.peruser.501[267] (com.apple.Dock.agent): Throttling respawn: Will start in 1 seconds
Jul 27 08:42:35 champagne.local ReportCrash[302]: Saved crash report for Dock[423] version 1.8 (1168) to /Users/jtimberman/Library/Logs/DiagnosticReports/Dock_2012-07-27-084235_champagne.crash
```</p>

<p>This happened every second, constantly crashing and restarting, and
generating a new crash report. What is the problem? Well, let&rsquo;s look
at one of the reports:</p>

<p>```
Process:         Dock [21816]
Path:            /System/Library/CoreServices/Dock.app/Contents/MacOS/Dock
Identifier:      Dock
Version:         1.8 (1168)
Code Type:       X86-64 (Native)
Parent Process:  launchd [1039]
User ID:         501</p>

<p>Date/Time:       2012-07-27 11:26:58.819 -0600
OS Version:      Mac OS X 10.8 (12A269)
Report Version:  10</p>

<p>Crashed Thread:  0  Dispatch queue: com.apple.main-thread</p>

<p>Exception Type:  EXC_CRASH (SIGABRT)
Exception Codes: 0x0000000000000000, 0x0000000000000000</p>

<p>Application Specific Information:
*** Terminating app due to uncaught exception &lsquo;NSInvalidArgumentException&rsquo;, reason: &lsquo;&ndash;[__NSCFBoolean isEqualToString:]: unrecognized selector sent to instance 0x7fff7b2a2ab0&rsquo;
abort() called
terminate called throwing an exception</p>

<p>Application Specific Backtrace 1:
0   CoreFoundation                      0x00007fff8cd77716 <strong>exceptionPreprocess + 198
1   libobjc.A.dylib                     0x00007fff8e6df470 objc_exception_throw + 43
2   CoreFoundation                      0x00007fff8ce0dd5a &ndash;[NSObject(NSObject) doesNotRecognizeSelector:] + 186
3   CoreFoundation                      0x00007fff8cd65c3e </strong><em>forwarding</em><em>_ + 414
4   CoreFoundation                      0x00007fff8cd65a28 </em>CF_forwarding_prep_0 + 232
5   Dock                                0x000000010d1b6786 Dock + 681862
6   Dock                                0x000000010d1150b2 Dock + 20658
7   Dock                                0x000000010d1ddaed Dock + 842477
8   libdyld.dylib                       0x00007fff8d7827e1 start + 0
```</p>

<p>I&rsquo;ll spare you the detail of the rest of the file. Suffice to say, it
is less informative than one might want for troubleshooting the issue.
I (foolishly) spent about an hour and a half trying to get to the root
of the problem. I found out that the problem was isolated to my own
user, and something between <code>~/Library/Preferences</code> and
<code>~/Library/Application Support</code>. I&rsquo;m not sure what the problem was &ndash; I
eventually decided to just do this:</p>

<p><code>
sudo rm -rf ~/Library/Preferences ~/Library/Application\ Support
</code></p>

<p>Then I logged back in, and everything was well. I have a back up from
before the upgrade (Yay, TimeMachine!), so I wasn&rsquo;t concerned with
losing anything important, and I knew that Chef would bring back most
of my settings anyway.</p>

<p>The first thing I did was, of course, <code>/usr/bin/chef-client</code>. This
worked great. Until the Dock was restarted as part of my recipes. The
symptom was the same as before &ndash; the desktop went light grey, the dock
wasn&rsquo;t running and launchd was respawning it contnually, with the same
errors from above.</p>

<p>I decided to have some quality time with my configuration and get to
the bottom of the problem. I went through all the settings I modify
through <code>recipe[mac_os_x::settings]</code> attributes, and did a careful
comparison of manual settings through the OS X system preferences, and
the files changed in <code>~/Library/Preferences</code>.</p>

<p><strong>Side note</strong>: This handy hint comes from
  <a href="http://twitter.com/bleything">Ben Bleything</a>:</p>

<p><code>
cd ~/Library/Preferences
git init
git add .
git commit -m 'initial commit'
</code></p>

<p>Then, make a change in system preferences, you can use <code>git status</code> to
see what plist files are updated. Of course, most of the plist files
are binary so you can&rsquo;t really diff them, but the filename will
indicate which domain to use with the <code>defaults(1)</code> command. Handy,
thanks Ben! <strong>End side note.</strong></p>

<p>Anyway, it took some time, but I tuned all my configuration for the
things I wanted to ensure happened on any new system, and nothing
else. I believe what happened is that some setting I had is no longer
supported on Mountain Lion and its presence makes Dock.app grumpy, but
that is purely speculation. The end result now, though, is that I have
a pretty sane set of configuration that is automatically applied in a
more data driven way, and I&rsquo;m not using settings that I don&rsquo;t know
100% what they do.</p>

<p>That aside, Mountain Lion is nice so far. The GCC Installer for 10.7
seems to be working just fine, though I haven&rsquo;t tried installing a new
Ruby under it yet. I am looking forward to wider use and adoption of
the Notification Center as a replacement for Growl.</p>

<p>I hope this post is helpful in some way. Unfortunately I don&rsquo;t have an
answer to the Dock crash problem itself, but I have now remedied the
issue for my own use. I&rsquo;m going to write a new post about how I&rsquo;m
managing my workstations, to bring the
<a href="/blog/2011/04/03/managing-my-workstations-with-chef/">information posted</a>
<a href="/blog/2011/09/04/update-to-managing-my-workstations/">previously up to date</a>,
so stay tuned.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode Command Line Tools]]></title>
    <link href="http://jtimberman.housepub.org/blog/2012/02/26/xcode-command-line-tools/"/>
    <updated>2012-02-26T00:07:00-07:00</updated>
    <id>http://jtimberman.housepub.org/blog/2012/02/26/xcode-command-line-tools</id>
    <content type="html"><![CDATA[<p>Recently, Apple did the most awesome thing for non-Xcode developers.</p>

<p>They made the development tools available as a
<a href="https://developer.apple.com/library/ios/#documentation/DeveloperTools/Conceptual/WhatsNewXcode/Articles/xcode_4_3.html">standalone package!</a></p>

<p>This is awesome news for those of us who only have<sup>Whad</sup> Xcode
installed to install RubyGems that compile native extensions, or for
installing software with Homebrew, MacPorts or similar.. You can
download them by logging into the
<a href="https://developer.apple.com/downloads">Developer Download</a> site.</p>

<p>This appears to be work started by
<a href="http://kennethreitz.com/xcode-gcc-and-homebrew.html">Kenneth Reitz</a>
with his
<a href="https://github.com/kennethreitz/osx-gcc-installer/">OSX GCC Installer</a>
project. I did try that project out, but ran into issues I didn&rsquo;t
resolve right away, so I reverted to using Xcode proper. However with
the package from Apple I don&rsquo;t seem to have any issues so far.</p>

<p>If you already have Xcode installed, you may want to remove it first.</p>

<p><code>sh
sudo /Developer-3.2.6/Library/uninstall-devtools
sudo /Developer/Library/uninstall-devtools --mode=all /thx
</code></p>

<p>My understanding is that you can remove the <code>/Developer*</code>
director(y|ies) when complete. I had ollllld Xcode on the system where
I first did this.</p>

<p>Next, download and install the package from Apple. It&rsquo;s about 170M and
takes only a couple minutes to install; sorry I don&rsquo;t have a Chef
recipe for this ;).</p>

<p>I did run into an issue with Homebrew where it wasn&rsquo;t finding the
right gcc binary. I had to run the following commands to fix
<a href="https://github.com/mxcl/homebrew/issues/10245">that issue</a>.</p>

<p><code>sh
sudo xcode-select -switch /usr/bin
sudo ln -sf /usr/bin/llvm-gcc-4.2 /usr/bin/gcc-4.2
</code></p>

<p>You wouldn&rsquo;t think that something like an 8G installation would matter
in 2012. However, disk space is a precious commodity on MacBook Airs
and systems that have SSDs as the root volume. This is very welcome
change for me, especially since it means that future Mac OS X
installations do not require a large download before I can start doing
things that get my
<a href="http://jtimberman.housepub.org/blog/2011/04/03/managing-my-workstations-with-chef/">system ready to use</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Disable AirDrop in Mac OS X Lion]]></title>
    <link href="http://jtimberman.housepub.org/blog/2012/02/25/disable-airdrop-lion/"/>
    <updated>2012-02-25T23:20:00-07:00</updated>
    <id>http://jtimberman.housepub.org/blog/2012/02/25/disable-airdrop-lion</id>
    <content type="html"><![CDATA[<p>Mac OS X Lion introduced a new nifty feature called AirDrop. This
allows users on a local network to drag and drop files to each other
with Finder.</p>

<p>While it seems that this would be useful, there are security
implications. After looking through
<a href="https://www.google.com/?q=disable+airdrop#sclient=psy&amp;hl=en&amp;site=&amp;source=hp&amp;q=disable+airdrop&amp;pbx=1&amp;oq=disable+airdrop&amp;aq=f&amp;aqi=&amp;aql=&amp;gs_sm=3&amp;gs_upl=0l0l0l884l0l0l0l0l0l0l0l0ll0l0&amp;bav=on.2,or.r_gc.r_pw.,cf.osb&amp;fp=2c07cc10bcee84ff&amp;biw=1440&amp;bih=786">Google Search Results</a>
on the topic, I found some un-helpful information in a <a href="http://forums.macrumors.com/showthread.php?t=1191359">random forum</a>
post (unsurprising). A little more
<a href="http://derflounder.wordpress.com/2011/10/07/disabling-airdrop-from-the-command-line/">review of the search results</a>
resulted in finding the actual <code>defaults(1)</code> command to do so:</p>

<pre><code>defaults write com.apple.NetworkBrowser DisableAirDrop -bool YES
</code></pre>

<p>Naturally, I put this in a Chef recipe and applied it on all my Macs
post haste:</p>

<p>```ruby
  mac_os_x_userdefaults &ldquo;Disable AirDrop&rdquo; do</p>

<pre><code>domain "com.apple.NetworkBrowser"
key "DisableAirDrop"
value true
type "bool"
</code></pre>

<p>  end
```</p>

<p>The resource above is available in my <a href="http://ckbk.it/mac_os_x">mac_os_x cookbook</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chef Report Handler for Growl]]></title>
    <link href="http://jtimberman.housepub.org/blog/2012/01/02/chef-report-handler-for-growl/"/>
    <updated>2012-01-02T20:37:00-07:00</updated>
    <id>http://jtimberman.housepub.org/blog/2012/01/02/chef-report-handler-for-growl</id>
    <content type="html"><![CDATA[<p>A few weeks ago, I listened to the
<a href="http://thechangelog.com/post/11317828888/episode-0-6-8-growl-and-open-source-in-the-app-store-wit">Changelog Podcast</a>
episode featuring Chris Forsythe, lead of the Growl project. I
actually don&rsquo;t<sup>Wdidn</sup>&rsquo;t use Growl for a long time, because I really
disliked notifications of any kind, as they are distracting. However,
I do appreciate the project, and supporting them by purchasing Growl
on the App Store seemed totally reasonable.</p>

<p>Of course, buying the app means it was installed on the spot. I always
resisted it in the past because it was bundled with so many apps, but
I don&rsquo;t want unsolicited software to show up on my computer. Now, it
seemed a bit more natural, and I made a few configuration tweaks (I
should put those into Chef&hellip;). I&rsquo;m actually happy to use it now,
especially since it has a nice network accessible API.</p>

<h1>Growlnotify</h1>

<p>Shortly after I started using Growl on my work system, I looked into
ways I could get notifications fired off from the command-line after
long running processes finished. In particular, I wanted to get a
notification that <code>knife ec2 server create</code> was done. I found the
<code>growlnotify</code> program, which is available via
<a href="https://github.com/mxcl/homebrew">homebrew</a>. This is quite a nifty
tool, and I set it to use immediately, doing things like this:</p>

<p><code>sh
knife ec2 server create \
  -f m1.small -I $lucid_small -x ubuntu \
  -r 'role[base],role[webserver]' &amp;&amp; \
growlnotify -m "Finished launching 1 instance" || \
growlnotify -m "failed to launch instance"
</code></p>

<p>I could kick off the server creation, switch focus to another
workspace, and then know via growl if the instance was created.</p>

<h1>Chef Handler</h1>

<p>As many know, I
<a href="http://jtimberman.housepub.org/blog/2011/04/03/managing-my-workstations-with-chef/">manage my workstations with Chef</a>.
Chef has a pretty cool
<a href="http://wiki.opscode.com/display/chef/Exception+and+Report+Handlers">exception and report handler API</a>
that has a lot of flexibility. I thought it would be fun to throw
together a simple report handler that would send a growl notification
after a Chef run. In this case, it will report the elapsed time of the
run if it was successful, or report an exception if it failed.</p>

<p>Using the handler is pretty straightforward. Install the
<code>chef-handler-growl</code> Gem, then configure chef-client (or solo).</p>

<p><code>ruby
require "chef/handler/growl"
report_handlers &lt;&lt; Chef::Handler::Growl.new
exception_handlers &lt;&lt; Chef::Handler::Growl.new
</code></p>

<p>Then run Chef, and see something like this:</p>

<p><img src="https://img.skitch.com/20120103-emxnsfht3557xjcp4rshxcufka.png" alt="Chef Handler Growl" /></p>

<p>The handler is available as a
<a href="http://rubygems.org/gems/chef-handler-growl">RubyGem</a>. You can also
view the <a href="https://github.com/jtimberman/chef-handler-growl">source</a>. I
created issues on the GitHub project for the two items on the roadmap, too.</p>
]]></content>
  </entry>
  
</feed>
