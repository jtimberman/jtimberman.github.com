<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: chef,workflow | jtimberman's Code Blog]]></title>
  <link href="http://jtimberman.housepub.org/blog/categories/chef-workflow/atom.xml" rel="self"/>
  <link href="http://jtimberman.housepub.org/"/>
  <updated>2014-09-03T08:40:13-06:00</updated>
  <id>http://jtimberman.housepub.org/</id>
  <author>
    <name><![CDATA[Joshua Timberman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Local-only Knife Configuration]]></title>
    <link href="http://jtimberman.housepub.org/blog/2013/02/01/local-only-knife-configuration/"/>
    <updated>2013-02-01T10:57:00-07:00</updated>
    <id>http://jtimberman.housepub.org/blog/2013/02/01/local-only-knife-configuration</id>
    <content type="html"><![CDATA[<p>In this post I want to discuss briefly an approach to setting up a
shared Knife configuration file for teams using the same Chef
Repository, while supporting customized configuration.</p>

<h2>Background</h2>

<p>Most infrastructures managed by Chef have multiple people working on
them. Recently, several people in the Ruby community started working
together on migrating <a href="http://rubygems.org">RubyGems</a> to
<a href="https://github.com/rubygems/rubygems-aws">Amazon EC2</a>.</p>

<p>The repository has a shared <code>.chef/knife.rb</code> which sets some local
paths where cookbooks and roles are located. In addition to this, I
wanted to test building the infrastructure using a Chef Server and my
own EC2 account.</p>

<h2>The Approach</h2>

<p>At Opscode, we believe in leveraging internal DSLs. The
<code>.chef/knife.rb</code> (and Chef&rsquo;s <code>client.rb</code> or <code>solo.rb</code>, etc) is no
exception. While you can have a fairly simple configuration like this:</p>

<p><code>ruby
node_name        "jtimberman"
client_key       "/home/jtimberman/.chef/jtimberman.pem"
chef_server_url  "https://api.opscode.com/organizations/my_organization"
cookbook_path    "cookbooks"
</code></p>

<p>You can also have something like this:</p>

<p><code>ruby
log_level     :info
log_location  STDOUT
node_name     ENV["NODE_NAME"] || "solo"
client_key    File.expand_path("../solo.pem", __FILE__)
cache_type    "BasicFile"
cache_options(path: File.expand_path("../checksums", __FILE__))
cookbook_path [ File.expand_path("../../chef/cookbooks", __FILE__) ]
if ::File.exist?(File.expand_path("../knife.local.rb", __FILE__))
  Chef::Config.from_file(File.expand_path("../knife.local.rb", __FILE__))
end
</code></p>

<p>This is the <code>knife.rb</code> included in the
<a href="https://github.com/rubygems/rubygems-aws">RubyGems-AWS repo</a>.</p>

<p>The main part of interest here is the last three lines.</p>

<p><code>ruby
if ::File.exist?(File.expand_path("../knife.local.rb", __FILE__))
  Chef::Config.from_file(File.expand_path("../knife.local.rb", __FILE__))
end
</code></p>

<p>This says &ldquo;if a file <code>knife.local.rb</code> exists, then load its
configuration. The <code>Chef::Config</code> class is what Chef uses for
configuration files, and the <code>#from_file</code> method will load the
specified file.</p>

<p>In this case, the content of my <code>knife.local.rb</code> is:</p>

<p><code>ruby
node_name                "jtimberman"
client_key               "/Users/jtimberman/.chef/jtimberman.pem"
validation_client_name   "ORGNAME-validator"
validation_key           "/Users/jtimberman/.chef/ORGNAME-validator.pem"
chef_server_url          "https://api.opscode.com/organizations/ORGNAME"
cookbook_path [
  File.expand_path("../../chef/cookbooks", __FILE__),
  File.expand_path("../../chef/site-cookbooks", __FILE__)
]
knife[:aws_access_key_id]      = "Some access key I like"
knife[:aws_secret_access_key]  = "The matching secret access key"
</code></p>

<p>Here I&rsquo;m setting my Opscode Hosted Chef credentials and server. I also
set the <code>cookbook_path</code> to include the site-cookbooks directory (this
should probably go in the regular knife.rb). Finally, I set the knife
configuration options for my AWS EC2 account.</p>

<p>The configuration is parsed top-down, so the options here that overlap
the <code>knife.rb</code> will be used instead.</p>

<h2>In the Repository</h2>

<p>In the repository, commit only the <code>.chef/knife.rb</code> and not the
<code>.chef/knife.local.rb</code>. I recommend adding the local file to the
.gitignore or VCS equivalent.</p>

<p><code>
% echo .chef/knife.local.rb &gt;&gt; .gitignore
% git add .chef/knife.rb .gitignore
% git commit -m 'keep general knife.rb, local config is ignored'
</code></p>

<h2>Conclusion</h2>

<p>There are many approaches to solving the issue of having shared Knife
configuration for multiple people in a single repository. The real
benefit here is that the configuration file is Ruby, which provides a
lot of flexibility. Of course, when using someone else&rsquo;s configuration
examples, one should always read the code and understand it first :&ndash;).</p>
]]></content>
  </entry>
  
</feed>
