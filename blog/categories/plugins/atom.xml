<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: plugins | jtimberman's Code Blog]]></title>
  <link href="http://jtimberman.housepub.org/blog/categories/plugins/atom.xml" rel="self"/>
  <link href="http://jtimberman.housepub.org/"/>
  <updated>2015-01-17T23:01:55-07:00</updated>
  <id>http://jtimberman.housepub.org/</id>
  <author>
    <name><![CDATA[Joshua Timberman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Chef Reporting API and Resource Updates]]></title>
    <link href="http://jtimberman.housepub.org/blog/2014/10/07/chef-reporting-api-and-resource-updates/"/>
    <updated>2014-10-07T06:18:34-06:00</updated>
    <id>http://jtimberman.housepub.org/blog/2014/10/07/chef-reporting-api-and-resource-updates</id>
    <content type="html"><![CDATA[<p>Have you ever wanted to find a list of nodes that updated a specific resource in a period of time? Such as &ldquo;show me all the nodes in production that had an application service restart in the last hour&rdquo;? Or, &ldquo;which nodes have updated their apt cache recently?&rdquo; For example,</p>

<p><code>
% knife report resource 'role:supermarket-app AND chef_environment:supermarket-prod' execute 'apt-get update'
execute[apt-get update] changed in the following runs:
app-supermarket1.example.com 2230cf30-6d95-4e43-be18-211137eaf802 @ 2014-10-07T14:07:03Z
app-supermarket2.example.com c5e4d7bf-95a6-4385-9d8e-c6f5617ed79b @ 2014-10-07T14:14:04Z
app-supermarket3.example.com c4c4b4bb-91b6-4f73-9876-b24b093c7f1e @ 2014-10-07T14:09:54Z
app-supermarket4.example.com 3eb09034-7539-4a3c-af6d-5b01d35bc63f @ 2014-10-07T13:31:56Z
app-supermarket5.example.com aa48c1d3-da91-4031-a43d-582a577cbf2d @ 2014-10-07T13:35:15Z
Use `knife runs show` with the run UUID to get more info
</code></p>

<p>I have released a new knife plugin to do that, but first some background.</p>

<p>At CHEF, we run the community&rsquo;s cookbook site, <a href="https://supermarket.getchef.com">Supermarket</a>. We monitor the systems that run the site with <a href="http://sensuapp.org">Sensu</a>. The current infrastructure runs instances on Amazon Web Services EC2, with an Elastic Load Balancer (ELB) in front of them. As a corrective action for a <a href="https://www.getchef.com/blog/2014/07/10/supermarket-intermittent-unresponsiveness-postmortem/">Supermarket outage</a>, CHEF&rsquo;s operations team added a new check for elevated HTTP 500 responses from the application servers behind the ELB. One thing we found was that when Supermarket was deployed, and the <code>unicorn</code> server restarted, we would see elevated 500&rsquo;s, but the site often wouldn&rsquo;t actually be impacted.</p>

<p>The Sensu check is run from a &ldquo;relay&rdquo; node. That is, it isn&rsquo;t run on the application servers or the Sensu server &ndash; it&rsquo;s run out of band since it&rsquo;s for the ELB. One might imagine we could have similar checks for other services that aren&rsquo;t run on &ldquo;managed nodes,&rdquo; but that&rsquo;s neither here nor there. The issue is that we get an alert message that looks like this:</p>

<p><code>
Sensu Alerts     ALERT - [i-d1dfd5d9/check-elb-backend-500] - CheckELBMetrics CRITICAL: supermarket-elb; Sum of HTTPCode_Backend_5XX is 2538.0. (expected lower than 30.0); (HTTPCode_Backend_5XX '2538.0' within 300 seconds between 2014-08-19 13:33:36 +0000 to 2014-08-19 13:38:36 +0000) [Playbook].
</code></p>

<p>The first part, <code>[i-d1dfd5d9/check-elb-backend-500]</code> is the node name and the check that alerted. The node name here is the monitoring relay that runs the check, not the actual node or nodes where Supermarket was deployed and restarted. This is where Chef Reporting comes into play. In Chef Reporting, we can view information about recent Chef client runs, which gives us a graph like this.</p>

<p><img src="/images/reporting-graph.png"></p>

<p>If we go look at the reports in the Chef Manage console, we can drill down to something like this.</p>

<p><img src="/images/reporting-resources.png"></p>

<p>This shows that unicorn was restarted in this run. That&rsquo;s great, but if I&rsquo;m getting this alert at a time when I&rsquo;m not particularly coherent (e.g, 2AM), I want a command in a playbook that I can run to get more information quickly without having to log into the webui and click around imprecisely. CHEF publishes a <code>knife-reporting</code> gem that has a couple handy sub-commands to retrieve this run data. For example, we can list runs.</p>

<p>```
% knife runs list
node_name:  i-3022aa3b
run_id:     9eccd8f6-876b-4a57-87ac-0b3e7b7ef1e7
start_time: 2014-08-21T17:03:56Z
status:     started</p>

<p>node_name:  i-a09424a8
run_id:     f2b7871a-149b-4fd3-abdc-d74a838d719a
start_time: 2014-08-21T17:00:23Z
status:     success
```</p>

<p>Or, we can display a specific run.</p>

<p>```
% knife runs show eecb04fb-11df-438a-8e81-dd610eb66616
run_detail:
  data:
  end_time:          2014-08-20T17:50:12Z
  node_name:         i-9f22aa94
  run_id:            eecb04fb-11df-438a-8e81-dd610eb66616
  run_list:          [&ldquo;role[base]&rdquo;,&ldquo;role[supermarket-app]&rdquo;]
  start_time:        2014-08-20T17:45:37Z
  status:            success
  total_res_count:   261
  updated_res_count: 17
run_resources:
  cookbook_name:    supermarket
  cookbook_version: 2.7.2
  duration:         209
  final_state:</p>

<pre><code>enabled: false
running: true
</code></pre>

<p>  id:               unicorn
  initial_state:</p>

<pre><code>enabled: false
running: true
</code></pre>

<p>  name:             unicorn
  result:           restart
  type:             service
  uri:              <a href="https://api.opscode.com/organizations/supermarket/reports/org/runs/eecb04fb-11df-438a-8e81-dd610eb66616/15">https://api.opscode.com/organizations/supermarket/reports/org/runs/eecb04fb-11df-438a-8e81-dd610eb66616/15</a>
```</p>

<p>This is handy, but a little limited. What if I want to display only the runs containing the <code>service[unicorn]</code> resource?</p>

<p>That&rsquo;s where my <code>knife-report-resource</code> plugin helps. At first, it was very much specific to finding unicorn restarts on Supermarket app servers. However, I wanted to make it more general purpose as I think people would want to be able to find when arbitrary resources were updated. This is how it works:</p>

<ol>
<li>Query the Chef Server for a particular set of nodes. For example, <code>'role:supermarket-app AND chef_environment:supermarket-prod'</code>.</li>
<li>Get all the Chef client runs for a specified time period up until the current time. By default, it starts from one hour ago, but we can pass an ISO8601 timestamp.</li>
<li>Iterate over all the runs looking for runs by the nodes that were returned by the search query, gathering the specified resource type and name.</li>
<li>Display some nice output with the node&rsquo;s FQDN, the run&rsquo;s UUID, and a timestamp.</li>
</ol>


<p>From the earlier example:</p>

<p><code>
% knife report resource 'role:supermarket-app AND chef_environment:supermarket-prod' execute 'apt-get update'
execute[apt-get update] changed in the following runs:
app-supermarket1.example.com 2230cf30-6d95-4e43-be18-211137eaf802 @ 2014-10-07T14:07:03Z
app-supermarket2.example.com c5e4d7bf-95a6-4385-9d8e-c6f5617ed79b @ 2014-10-07T14:14:04Z
app-supermarket3.example.com c4c4b4bb-91b6-4f73-9876-b24b093c7f1e @ 2014-10-07T14:09:54Z
app-supermarket4.example.com 3eb09034-7539-4a3c-af6d-5b01d35bc63f @ 2014-10-07T13:31:56Z
app-supermarket5.example.com aa48c1d3-da91-4031-a43d-582a577cbf2d @ 2014-10-07T13:35:15Z
Use `knife runs show` with the run UUID to get more info
</code></p>

<p>Then, we can drill down further into one of these runs with the <code>knife-reporting</code> plugin.</p>

<p>```
% knife runs show 2230cf30-6d95-4e43-be18-211137eaf802
run_detail:
  data:
  end_time:          2014-10-07T14:07:03Z
  node_name:         i-d7fed0df
  run_id:            2230cf30-6d95-4e43-be18-211137eaf802
  run_list:          [&ldquo;role[base]&rdquo;,&ldquo;role[supermarket-app]&rdquo;]
  start_time:        2014-10-07T14:03:59Z
  status:            success
  total_res_count:   271
  updated_res_count: 12
run_resources:
  cookbook_name:    chef-client
  cookbook_version: 3.6.0
  duration:         99
  final_state:</p>

<pre><code>enabled: true
running: false
</code></pre>

<p>  id:               chef-client
  initial_state:</p>

<pre><code>enabled: true
running: true
</code></pre>

<p>  name:             chef-client
  result:           enable
  type:             runit_service
  uri:              <a href="https://api.opscode.com/organizations/supermarket/reports/org/runs/2230cf30-6d95-4e43-be18-211137eaf802/0">https://api.opscode.com/organizations/supermarket/reports/org/runs/2230cf30-6d95-4e43-be18-211137eaf802/0</a>
&hellip;
  cookbook_name:    supermarket
  cookbook_version: 2.11.0
  duration:         8506
  final_state:
  id:               apt-get update
  initial_state:
  name:             apt-get update
  result:           run
  type:             execute
  uri:              <a href="https://api.opscode.com/organizations/supermarket/reports/org/runs/2230cf30-6d95-4e43-be18-211137eaf802/5">https://api.opscode.com/organizations/supermarket/reports/org/runs/2230cf30-6d95-4e43-be18-211137eaf802/5</a>
```</p>

<p>Hopefully you find this plugin useful! It is a RubyGem, and is available on RubyGems.org, and the source is available on GitHub.</p>

<ul>
<li><a href="https://supermarket.getchef.com/tools/knife-report-resource">Supermarket tool page</a></li>
<li><a href="https://rubygems.org/gems/knife-report-resource">RubyGem page</a></li>
<li><a href="https://github.com/jtimberman/knife-report-resource">GitHub repository</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Last Check-in Time for Nodes]]></title>
    <link href="http://jtimberman.housepub.org/blog/2013/02/16/last-check-in-time-for-nodes/"/>
    <updated>2013-02-16T20:14:00-07:00</updated>
    <id>http://jtimberman.housepub.org/blog/2013/02/16/last-check-in-time-for-nodes</id>
    <content type="html"><![CDATA[<p>This one liner uses the knife exec sub-command to iterate over all the
node objects on the Chef Server, and print out their <code>ohai_time</code>
attribute in a human readable format.</p>

<p><code>
knife exec -E 'nodes.all {|n| puts "#{n.name} #{Time.at(n[:ohai_time])}"}'
</code></p>

<p>Let&rsquo;s break this up a little.</p>

<p><code>
knife exec -E
</code></p>

<p>The exec plugin for knife executes a script or the given string of
Ruby code in the same context as <code>chef-shell</code> (or <code>shef</code> in Chef 10
and earlier) if you start it up in it&rsquo;s &ldquo;main&rdquo; context. Since it is
knife, it will also use your <code>.chef/knife.rb</code> settings, so it knows
about your user, key and Chef Server.</p>

<p><code>
nodes.all
</code></p>

<p>The <code>chef-shell</code> main context has helper methods to access the
corresponding endpoints in the Chef Server API. Clearly we&rsquo;re working
with &ldquo;nodes&rdquo; here, and the <code>#all</code> method returns all the node objects
from the Chef Server. This differs from search in that there&rsquo;s a
commit delay between the time when data is saved to the server, and
the data is indexed by Solr. This is usually a few seconds, but
depending on various factors like the hardware you&rsquo;re using, how many
nodes are converging, etc, it can take longer.</p>

<p>Anyway, we can pass a block to nodes.all and do something with each
node object. The example above is a oneliner, so let&rsquo;s make it more
readable.</p>

<p><code>ruby
nodes.all do |n|
  puts "#{n.name} #{Time.at(n[:ohai_time])}"
end
</code></p>

<p>We&rsquo;re simply going to use <code>n</code> as the iterator for each node object,
and we&rsquo;ll print a string about the node. The <code>#{}</code>&rsquo;s in the string to
print with puts is Ruby string interpolation. That is, everything
inside the braces is a Ruby expression. First, the <code>Chef::Node</code> object
has a method, <code>#name</code>, that returns the node&rsquo;s name. This is usually
the FQDN, but depending on your configuration (<code>node_name</code> in
<code>/etc/chef/client.rb</code> or using the <code>-N</code> option for <code>chef-client</code>), it
could be something else. Then, we&rsquo;re going to use the node&rsquo;s
<code>ohai_time</code> attribute. Every time Chef runs and it gathers data about
the node with Ohai, it generates the <code>ohai_time</code> attribute, which is
the Unix epoch of the timestamp when Ohai ran. When Chef saves the
node data at the end of the run, we know approximately the last time
the node ran Chef. In this particular string, we&rsquo;re converting the
Unix epoch, like <code>1358962351.444405</code> to a human readable timestamp
like <code>2013-01-23 10:32:31 -0700</code>.</p>

<p>Of course, you can get similar data from the Chef Server by using
<code>knife status</code>:</p>

<p><code>
knife status
</code></p>

<p>The <code>ohai_time</code> attribute will be displayed as a relative time, e.g.,
&ldquo;585 hours ago.&rdquo; It will include some more data about the nodes like IP&rsquo;s. This
uses Chef&rsquo;s search feature, so you can also pass in a query:</p>

<p><code>
knife status "role:webserver"
</code></p>

<p>The <code>knife exec</code> example is simple, but you can get a lot more data
about the nodes than what <code>knife status</code> reports.</p>

<p>In either case, <code>ohai_time</code> isn&rsquo;t 100% accurate, since it is generated
at the beginning of the run, and depending on what you&rsquo;re doing with
Chef on your systems, it can take a long time before the node data is
saved. However, it&rsquo;s close enough for many use cases.</p>

<p>If more detailed or completely accurate information about the Chef run
is required for your purposes, you should use a
<a href="http://docs.opscode.com/chef/essentials_handlers.html">report handler</a>,
which does have more data about the run available, including whether
the run was successful or not.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Knife Plugins]]></title>
    <link href="http://jtimberman.housepub.org/blog/2012/11/29/some-knife-plugins/"/>
    <updated>2012-11-29T19:11:00-07:00</updated>
    <id>http://jtimberman.housepub.org/blog/2012/11/29/some-knife-plugins</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve shared my <code>~/.chef/plugins/knife</code> directory as a Git repository
on <a href="https://github.com/jtimberman/chef-plugins-knife">GitHub</a>. There&rsquo;s
only a few, but I hope you find them useful. They are licensed under
the Apache 2.0 software license, but please only use them for awesome.</p>

<h2>gem</h2>

<p>This plugin will install a gem into the Ruby environment that knife is
executing in. This is handy if you want to install knife plugins that
are gems.</p>

<p>If you have Ruby and Chef/Knife installed in an area where your user
can write:</p>

<p><code>
knife gem install knife-config
</code></p>

<p>If you&rsquo;re using an Omnibus package install of Chef, or otherwise
require root access to install:</p>

<p><code>
knife gem install knife-config
</code></p>

<p><strong>Note</strong> If you&rsquo;re trying to install a gem for <em>Chef</em> to use, you
  should put it in a <code>chef_gem</code> resource in a recipe.</p>

<h2>metadata</h2>

<p>This plugin prints out information from a cookbook&rsquo;s metadata. It
currently only works with <code>metadata.rb</code> files, and not <code>metadata.json</code>
files.</p>

<p>In a cookbook&rsquo;s directory, display the cookbook&rsquo;s dependencies:</p>

<p><code>
knife metadata dependencies
</code></p>

<p>Show the dependencies and supported platforms:</p>

<p><code>
knife metadata dependencies platforms
</code></p>

<p>Use the <code>-P</code> option to pass a path to a cookbook.</p>

<p><code>
knife metadata name dependencies -P ~/.berkshelf/cookbooks/rabbitmq-1.6.4
</code></p>

<h2>nukular</h2>

<p><a href="http://jtimberman.housepub.org/blog/2012/02/15/testing-with-fission/">I wrote on this blog about this plugin awhile ago</a>.</p>

<p>This plugin cleans up after running <code>chef-client</code> on a VMware Fusion machine.</p>

<p><code>
knife nukular guineapig base guineapig.int.example.com
</code></p>

<h2>plugin_create</h2>

<p>This creates a plugin scaffolding in <code>~/.chef/plugins/knife</code>. It will
join underscored words as CamelCaseClasses.</p>

<p>For example,</p>

<p><code>
knife plugin create awesometown
</code></p>

<p>Creates a plugin that is class <code>Awesometown</code> that can be executed with:</p>

<p><code>
knife awesometown
</code></p>

<p>Whereas this,</p>

<p><code>
knife plugin create awesome_town
</code></p>

<p>Creates a plugin that is class <code>AwesomeTown</code> that can be executed
with:</p>

<p><code>
knife plugin awesome town
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Knife Config Plugin]]></title>
    <link href="http://jtimberman.housepub.org/blog/2012/03/25/knife-config-plugin/"/>
    <updated>2012-03-25T14:47:00-06:00</updated>
    <id>http://jtimberman.housepub.org/blog/2012/03/25/knife-config-plugin</id>
    <content type="html"><![CDATA[<p>I created a plugin for knife that will display a specified option from
Chef&rsquo;s configuration object, <code>Chef::Config</code>. It operates with the
scope of the automatically detected
<a href="http://wiki.opscode.com/display/chef/Knife#Knife-ConfiguringYourSystemForKnife">knife configuration file</a>,
or by passing the <code>-c</code> option with a configuration file.</p>

<h2>Installation</h2>

<p>It&rsquo;s a gem.</p>

<p><code>
% gem install knife-config
</code></p>

<p>You can get the <a href="https://github.com/jtimberman/knife-config">source on GitHub</a>.</p>

<h2>Examples</h2>

<p>Without any options:</p>

<p><code>
% knife config
WARNING: No knife configuration file found
</code></p>

<p>If an config option were specified, its default value would be printed.</p>

<p>With a single option, <code>chef_server_url</code>, but no configuration file available:</p>

<p><code>
% knife config chef_server_url
WARNING: No knife configuration file found
chef_server_url:  http://localhost:4000
</code></p>

<p>In a &ldquo;Chef Repository&rdquo; with a <code>.chef/knife.rb</code>:</p>

<p><code>
% cd chef-repo
% knife config chef_server_url
chef_server_url:  https://api.opscode.com/organizations/MY_ORG
</code></p>

<p>With a few more options:</p>

<p><code>
% cd chef-repo
% knife config chef_server_url node_name validation_client_name
chef_server_url:  https://api.opscode.com/organizations/MY_ORG
node_name:        jtimberman
validation_client_name:  housepub-validator
</code></p>

<p>With a different config file (<code>/etc/chef/client.rb</code> on the same
system):</p>

<p><code>
% knife config node_name -c /etc/chef/client.rb
node_name:  imac.int.example.com
</code></p>

<p>With <code>--all</code>, to show all the options:</p>

<p><code>
% knife config --all
amqp_consumer_id:               default
amqp_host:                      0.0.0.0
amqp_pass:                      testing
amqp_port:                      5672
amqp_user:                      chef
amqp_vhost:                     /chef
authorized_openid_identifiers:
authorized_openid_providers:
cache_options:
  path:  /Users/jtimberman/.chef/checksums
cache_type:                     BasicFile
checksum_path:                  /var/chef/checksums
chef_server_url:                https://api.opscode.com/organizations/housepub
client_key:                     /Users/jtimberman/.chef/jtimberman.pem
client_registration_retries:    5
client_url:                     http://localhost:4042
[output truncated, trust me, it shows them all :)]
</code></p>

<p>Show the &ldquo;knife&rdquo; configuration, which includes things like cloud
provider authentication. This doesn&rsquo;t currently support showing
sub-keys (like <code>knife[aws_access_key_id]</code>).</p>

<p><code>
% knife config knife
knife:
  aws_access_key_id:      ZOMGAWS_KEY
  aws_secret_access_key:  ZOMGAWS_SECRET
</code></p>

<h2>Contributing</h2>

<p>If you&rsquo;d like to contribute, that&rsquo;s awesome! Please create a fork,
branch, and a pull request.
<a href="https://github.com/jtimberman/knife-config/issues">Reporting issues</a>
is helpful too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chef Report Handler for Growl]]></title>
    <link href="http://jtimberman.housepub.org/blog/2012/01/02/chef-report-handler-for-growl/"/>
    <updated>2012-01-02T20:37:00-07:00</updated>
    <id>http://jtimberman.housepub.org/blog/2012/01/02/chef-report-handler-for-growl</id>
    <content type="html"><![CDATA[<p>A few weeks ago, I listened to the
<a href="http://thechangelog.com/post/11317828888/episode-0-6-8-growl-and-open-source-in-the-app-store-wit">Changelog Podcast</a>
episode featuring Chris Forsythe, lead of the Growl project. I
actually don&rsquo;t<sup>Wdidn</sup>&rsquo;t use Growl for a long time, because I really
disliked notifications of any kind, as they are distracting. However,
I do appreciate the project, and supporting them by purchasing Growl
on the App Store seemed totally reasonable.</p>

<p>Of course, buying the app means it was installed on the spot. I always
resisted it in the past because it was bundled with so many apps, but
I don&rsquo;t want unsolicited software to show up on my computer. Now, it
seemed a bit more natural, and I made a few configuration tweaks (I
should put those into Chef&hellip;). I&rsquo;m actually happy to use it now,
especially since it has a nice network accessible API.</p>

<h1>Growlnotify</h1>

<p>Shortly after I started using Growl on my work system, I looked into
ways I could get notifications fired off from the command-line after
long running processes finished. In particular, I wanted to get a
notification that <code>knife ec2 server create</code> was done. I found the
<code>growlnotify</code> program, which is available via
<a href="https://github.com/mxcl/homebrew">homebrew</a>. This is quite a nifty
tool, and I set it to use immediately, doing things like this:</p>

<p><code>sh
knife ec2 server create \
  -f m1.small -I $lucid_small -x ubuntu \
  -r 'role[base],role[webserver]' &amp;&amp; \
growlnotify -m "Finished launching 1 instance" || \
growlnotify -m "failed to launch instance"
</code></p>

<p>I could kick off the server creation, switch focus to another
workspace, and then know via growl if the instance was created.</p>

<h1>Chef Handler</h1>

<p>As many know, I
<a href="http://jtimberman.housepub.org/blog/2011/04/03/managing-my-workstations-with-chef/">manage my workstations with Chef</a>.
Chef has a pretty cool
<a href="http://wiki.opscode.com/display/chef/Exception+and+Report+Handlers">exception and report handler API</a>
that has a lot of flexibility. I thought it would be fun to throw
together a simple report handler that would send a growl notification
after a Chef run. In this case, it will report the elapsed time of the
run if it was successful, or report an exception if it failed.</p>

<p>Using the handler is pretty straightforward. Install the
<code>chef-handler-growl</code> Gem, then configure chef-client (or solo).</p>

<p><code>ruby
require "chef/handler/growl"
report_handlers &lt;&lt; Chef::Handler::Growl.new
exception_handlers &lt;&lt; Chef::Handler::Growl.new
</code></p>

<p>Then run Chef, and see something like this:</p>

<p><img src="https://img.skitch.com/20120103-emxnsfht3557xjcp4rshxcufka.png" alt="Chef Handler Growl" /></p>

<p>The handler is available as a
<a href="http://rubygems.org/gems/chef-handler-growl">RubyGem</a>. You can also
view the <a href="https://github.com/jtimberman/chef-handler-growl">source</a>. I
created issues on the GitHub project for the two items on the roadmap, too.</p>
]]></content>
  </entry>
  
</feed>
