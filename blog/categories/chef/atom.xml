<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: chef | jtimberman's Code Blog]]></title>
  <link href="http://jtimberman.housepub.org/blog/categories/chef/atom.xml" rel="self"/>
  <link href="http://jtimberman.housepub.org/"/>
  <updated>2015-04-03T22:08:10-06:00</updated>
  <id>http://jtimberman.housepub.org/</id>
  <author>
    <name><![CDATA[Joshua Timberman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Chef Audit Mode Introduction]]></title>
    <link href="http://jtimberman.housepub.org/blog/2015/04/03/chef-audit-mode-introduction/"/>
    <updated>2015-04-03T20:48:23-06:00</updated>
    <id>http://jtimberman.housepub.org/blog/2015/04/03/chef-audit-mode-introduction</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve started working with the <a href="https://docs.chef.io/analytics.html#audit-mode">audit mode</a> feature of Chef introduced in version 12.1. Audit mode allows users to write custom rules (controls) in Chef recipes using new DSL helpers. In his talk, &ldquo;Compliance At Velocity,&rdquo; James Casey goes into more of the background and reasoning for this. For now, I wanted to share a few tips with users who may be experimenting with this feature on their own, too.</p>

<p>First, we need to update ChefDK to version 0.5.0 (rc 3 is current), as that includes a version of test kitchen that <a href="https://github.com/test-kitchen/test-kitchen/pull/652">allows us to configure audit mode</a> for chef-client.</p>

<p><code>
curl -L https://chef.io/chef/install.sh | sudo bash -s -- -P chefdk -p
</code></p>

<p>The <code>-p</code> option tells the script to use the prerelease version, as of this writing 0.5.0 is not released, but we have a release candidate.</p>

<p>Next, create a new cookbook for the audit mode tests.</p>

<p><code>
chef generate cookbook audit-test
cd audit-test
</code></p>

<p>Then, modify the audit-test cookbook&rsquo;s <code>.kitchen.yml</code>:</p>

<h2>```</h2>

<p>driver:
  name: vagrant</p>

<p>provisioner:
  name: chef_zero
  client_rb:</p>

<pre><code>audit_mode: :audit_only
</code></pre>

<p>platforms:
  &ndash; name: ubuntu-12.04
  &ndash; name: centos-6.5</p>

<p>suites:
  &ndash; name: default</p>

<pre><code>run_list:
  - recipe[audit-test::default]
attributes:
</code></pre>

<p>```</p>

<p>This is the generated <code>.kitchen.yml</code> with <code>client_rb</code> added to the provisioner config. Note that we must use the Ruby symbol syntax for the config value, <code>:audit_only</code>. The other valid values for <code>audit_mode</code> are <code>:enabled</code> and <code>:disabled</code>. This will be translated to an actual Ruby symbol in the generated config file (<code>/tmp/kitchen/client.rb</code>):</p>

<p><code>ruby
audit_mode :audit_only
</code></p>

<p>Next, let&rsquo;s write a control rule to test. Since we&rsquo;re using the default <code>.kitchen.yml</code>, which includes Ubuntu 12.04 and uses SSH to connect, we can assume that SSH is running, so port 22 is listening. Let&rsquo;s write a control that asserts this is true.</p>

<p>```ruby
control_group &lsquo;Blog Post Examples&rsquo; do
  control &lsquo;SSH&rsquo; do</p>

<pre><code>it 'should be listening on port 22' do
  expect(port(22)).to be_listening
end
</code></pre>

<p>  end
end
```</p>

<p>Now run <code>kitchen converge ubuntu</code> to run Chef, but not tear down the VM aftward &ndash; we&rsquo;ll use it again for another example. Here&rsquo;s the audit phase output from the Chef run:</p>

<pre><code>% kitchen converge ubuntu
Synchronizing Cookbooks:
  - audit-test
Compiling Cookbooks...
Starting audit phase

Blog Post Examples
  SSH
    should be listening on port 22

Finished in 0.10453 seconds (files took 0.37536 seconds to load)
1 example, 0 failures
Auditing complete
</code></pre>

<p>Cool! So we have asserted that the node complies with this control by default. But what does a failing control look like? Let&rsquo;s write one. Since we&rsquo;re working with SSH already, let&rsquo;s use the SSHd configuration. By default in the Vagrant base box we&rsquo;re using, root login is permitted, so this value is present:</p>

<p><code>
PermitRootLogin yes
</code></p>

<p>However, our security policy mandates that we set this to <code>no</code>, and we want to audit that.</p>

<p>```ruby
control_group &lsquo;Blog Post Examples&rsquo; do
  control &lsquo;SSH&rsquo; do</p>

<pre><code>it 'should be listening on port 22' do
  expect(port(22)).to be_listening
end

it 'disables root logins over ssh' do
  expect(file('/etc/ssh/sshd_config')).to contain('PermitRootLogin no')
end
</code></pre>

<p>  end
end
```</p>

<p>Rerun <code>kitchen converge ubuntu</code> and we see the validation fails.</p>

<pre><code>Starting audit phase

Blog Post Examples
  SSH
    should be listening on port 22
    disables root logins over ssh (FAILED - 1)

Failures:

  1) Blog Post Examples SSH disables root logins over ssh
     Failure/Error: expect(file('/etc/ssh/sshd_config')).to contain('PermitRootLogin no')
expected File "/etc/ssh/sshd_config" to contain "PermitRootLogin no"
     # /tmp/kitchen/cache/cookbooks/audit-test/recipes/default.rb:8:in `block (3 levels) in from_file'

Finished in 0.13067 seconds (files took 0.32089 seconds to load)
2 examples, 1 failure

Failed examples:

rspec  # Blog Post Examples SSH disables root logins over ssh
[2015-04-04T03:29:41+00:00] ERROR: Audit phase failed with error message: Audit phase found failures - 1/2 controls failed

Audit phase exception:
Audit phase found failures - 1/2 controls failed
</code></pre>

<p>When we have a failure, we&rsquo;ll have contextual information about the failure, including the line number in the recipe where itwas found, and a stack trace (cut from the output here), in case more information is required for debugging. To fix the test, we can simply edit the config file to have the desired setting, or we can manage the file with Chef to set the value accordingly. Either way, after updating the file, the validation will pass, and all will be well.</p>

<p>We can put as many <code>control_group</code> and <code>control</code> blocks with the <code>it</code> validation rules as required to audit our policy. If we have many validations, it can be difficult to follow with all the output if there are failures. Chef&rsquo;s audit mode is based on <a href="http://serverspec.org/">Serverspec</a>, which is based on <a href="http://rspec.info/">RSpec</a>. We can use the <code>filter_tag</code> configuration feature of RSpec to only run the <code>control</code> blocks or <code>it</code> statements that we&rsquo;re interested in debugging. To do this, we need an <code>RSpec.configuration</code> block within the <code>control_group</code> &ndash; due to the way that audit mode is implemented, we can&rsquo;t do it outside of <code>control_group</code>.</p>

<p>For example, we could debug our root login configuration:</p>

<p>```ruby
control_group &lsquo;Blog Post Examples&rsquo; do
  ::RSpec.configure do |c|</p>

<pre><code>c.filter_run focus: true
</code></pre>

<p>  end</p>

<p>  control &lsquo;SSH&rsquo; do</p>

<pre><code>it 'should be listening on port 22' do
  expect(port(22)).to be_listening
end

it 'disables root logins over ssh', focus: true do
  expect(file('/etc/ssh/sshd_config')).to contain('PermitRootLogin no')
end
</code></pre>

<p>  end
end
```</p>

<p>The key here is to pass the argument <code>focus: true</code> (or if you like hash rockets, <code>:focus =&gt; true</code>) on the <code>it</code> block. This could also be used on a <code>control</code> block:</p>

<p><code>ruby
control 'SSH', focus: true do
  it 'does stuff...'
end
</code></p>

<p>Then, when running <code>kitchen converge ubuntu</code>, we see only that validation:</p>

<pre><code>Starting audit phase

Blog Post Examples
  SSH
    disables root logins over ssh (FAILED - 1)

Failures:

  1) Blog Post Examples SSH disables root logins over ssh
     Failure/Error: expect(file('/etc/ssh/sshd_config')).to contain('PermitRootLogin no')
</code></pre>

<p>This example is simple enough that this isn&rsquo;t necessary, but if we were implementing audit mode checks for our entire security policy, that could be dozens or even hundreds of controls.</p>

<p>As of this writing, audit mode is still under development, and is considered an experimental feature. There will be further information, guides, and documentation about it coming to the Chef blog and docs site, and I&rsquo;ll have a post coming soon with something I&rsquo;m working on, so stay tuned!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Missing Transitive Dependencies]]></title>
    <link href="http://jtimberman.housepub.org/blog/2015/03/25/missing-transitive-dependencies/"/>
    <updated>2015-03-25T12:54:08-06:00</updated>
    <id>http://jtimberman.housepub.org/blog/2015/03/25/missing-transitive-dependencies</id>
    <content type="html"><![CDATA[<p>One of my home projects while I&rsquo;m on vacation this week is rebuilding my server with Fedora 21 (<a href="https://getfedora.org/en/server/">Server</a>). In order to do this, I needed to <a href="https://github.com/hw-cookbooks/runit/commit/c3d46bcf2c330e90aff8f1bb1e1701d57078cca8">add Fedora support</a> to the <a href="https://supermarket.chef.io/cookbooks/runit">runit</a> cookbook, since I use runit for a number of services on my system. That&rsquo;s really neither here nor there, as the topic of this blog post isn&rsquo;t specific to Fedora, nor runit.</p>

<p>The topic is actually about an issue with transitive dependencies and how Chef dependency resolution works.</p>

<p>Here&rsquo;s the scenario:</p>

<ol>
<li>I run chef on my node</li>
<li>The runit cookbook is synchronized</li>
<li>An older version of the runit cookbook is downloaded</li>
<li>The new changes I expected were not made</li>
<li>WTFs ensue</li>
</ol>


<p>So what happened?</p>

<p>The runit cookbook itself is updated to use Ian Meyer&rsquo;s Package Cloud repository &ndash; at least, the version I want to use is, which is on GitHub. When I submitted the PR for adding this repository for RHEL platforms, Ian had not yet added Fedora packages. That&rsquo;s okay because Fedora is not listed as supported in the cookbook. However, I wanted to use it, and figured folks in the community using Fedora Server might benefit too.</p>

<p>I digress. Ian pushed a Fedora package earlier today, so I added &ldquo;fedora&rdquo; to the various platform family conditionals, in the cookbook and opened the PR linked earlier. All was well in test kitchen. So I change my local repository&rsquo;s Berksfile:</p>

<p><code>ruby
cookbook 'runit', github: 'hw-cookbooks/runit', ref: 'jtimberman/fedora-21'
</code></p>

<p>Then a quick <code>berks update runit</code> and <code>berks upload runit</code>, and I was in business.</p>

<p>Or so I thought. Enter scenario listed above. The problem is, that when I did the <code>berks upload</code>, it only uploaded <code>runit</code>. However in the latest <code>runit</code> cookbook from that branch, it also adds a dependency on Computology&rsquo;s <a href="https://supermarket.chef.io/cookbooks/packagecloud">packagecloud</a> cookbook, since it uses that to add the repository. When the <code>runit</code> cookbook is specified on the <code>berks upload</code> command, it doesn&rsquo;t upload the transitive dependencies when the location is a git URI. This appears to be by design.</p>

<p>What happens in Chef is that the server solves the graph, seeing that the node needs the runit cookbook. But the latest version of the runit cookbook depends on packagecloud, which hasn&rsquo;t yet been uploaded. So the dependency solver looks for the latest version of the runit cookbook that meets the constraint (none), and doesn&rsquo;t have the packagecloud cookbook. Thus, I end up with runit version 1.5.18 on my node, but it fails to converge because it doesn&rsquo;t have the changes required for Fedora, which are in 1.5.20.</p>

<p>The simple solution here is to upload the packagecloud cookbook. This can be done with <code>berks upload packagecloud</code>, as it does exist in the Berksfile.lock and has been cached in the berkshelf. Alternatively, <code>berks upload</code> will also upload the cookbook, as that operates on all cookbooks in  the Berksfile.lock.</p>

<p>I hope this helps anyone who&rsquo;s faced this issue with transitive dependencies when working on a cookbook &ldquo;in development.&rdquo;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chef Gem Compile Time Compatibility]]></title>
    <link href="http://jtimberman.housepub.org/blog/2015/03/20/chef-gem-compile-time-compatibility/"/>
    <updated>2015-03-20T08:46:47-06:00</updated>
    <id>http://jtimberman.housepub.org/blog/2015/03/20/chef-gem-compile-time-compatibility</id>
    <content type="html"><![CDATA[<p>TL;DR, if you&rsquo;re using Chef 11 and <code>chef-sugar</code>, upgrade <code>chef-sugar</code> to version 3.0.1. If you cannot upgrade, use the following in your <code>chef_gem</code> resources in your recipes:</p>

<p><code>ruby
compile_time true if Chef::Resource::ChefGem.instance_methods(false).include?(:compile_time)
</code></p>

<p>As you may be aware, <a href="https://www.chef.io/blog/2015/03/03/chef-12-1-0-released/">Chef 12.1.0</a> introduces a change to the <code>chef_gem</code> resource that prints out warning messages like this:</p>

<pre><code>WARN: chef_gem[chef-vault] chef_gem compile_time installation is deprecated
WARN: chef_gem[chef-vault] Please set `compile_time false` on the resource to use the new behavior.
WARN: chef_gem[chef-vault] or set `compile_time true` on the resource if compile_time behavior is required.
</code></pre>

<p>These messages are just warnings, but if you&rsquo;re installing a lot of gems in your recipes, you may be annoyed by the output. As the warning indicates, you can set <code>compile_time true</code> property. This doesn&rsquo;t work on versions of Chef before 12.1, though:</p>

<pre><code>NoMethodError: undefined method `compile_time' for Chef::Resource::ChefGem
</code></pre>

<p>So, as a workaround, we can ask whether we respond to the <code>compile_time</code> method in the <code>chef_gem</code> resource:</p>

<p><code>ruby
chef_gem 'chef-vault' do
  compile_time false if respond_to?(:compile_time)
end
</code></p>

<p>This appears to get around the problem for most cases. However, if you&rsquo;re using <code>chef-sugar</code>, you&rsquo;ll note that until version 3.0.0, <code>chef-sugar</code> includes a <code>compile_time</code> DSL method that gets injected into <code>Chef::Resource</code> (and <code>Chef::Recipe</code>). This has been modified to <code>at_compile_time</code> in <code>chef-sugar</code> version 3.0.0 to work around Chef&rsquo;s introduction of a <code>compile_time</code> method in the <code>chef_gem</code> resource. The simple thing to do is make sure that your <code>chef-sugar</code> gem/cookbook are updated to v3.0.1. However if that isn&rsquo;t an option for some reason, you can use this conditional check:</p>

<p><code>ruby
chef_gem 'chef-vault' do
  compile_time true if Chef::Resource::ChefGem.instance_methods(false).include?(:compile_time)
end
</code></p>

<p>Hat tip to Anthony Scalisi, who added this in <a href="https://github.com/opscode-cookbooks/aws/pull/110">a pull request for the aws cookbook</a>. The <code>instance_methods</code> method comes from Ruby&rsquo;s <a href="http://ruby-doc.org/core-2.2.1/Module.html#method-i-instance_methods">Module class</a>. Per the documentation:</p>

<blockquote><p>Returns an array containing the names of the public and protected instance methods in the receiver. For a module, these are the public and protected methods; for a class, they are the instance (not singleton) methods. If the optional parameter is false, the methods of any ancestors are not included.</p></blockquote>

<p>If we look at this in, e.g., <code>chef-shell</code> under Chef 12.1.0:</p>

<p><code>
chef:recipe &gt; Chef::Resource::ChefGem.instance_methods(false)
 =&gt; [:gem_binary, :compile_time, :after_created]
</code></p>

<p>And in Chef 12.0.3 or 11.18.6:</p>

<p><code>
chef &gt; Chef::Resource::ChefGem.instance_methods(false)
 =&gt; [:gem_binary, :after_created]
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick Tip: Create a Provisioner Node]]></title>
    <link href="http://jtimberman.housepub.org/blog/2015/02/09/quick-tip-create-a-provisioner-node/"/>
    <updated>2015-02-09T20:50:12-07:00</updated>
    <id>http://jtimberman.housepub.org/blog/2015/02/09/quick-tip-create-a-provisioner-node</id>
    <content type="html"><![CDATA[<p>This quick tip is brought to you by my preparation for my ChefConf talk about using Chef Provisioning to build a Chef Server Cluster, which is based on my blog post about the same. In the blog post I used chef-zero as my Chef Server, but for the talk I&rsquo;m using Hosted Chef.</p>

<p>In order for the Chef Provisioning recipe to work the provisioning node &ndash; the node that runs chef-client &ndash; needs to have the appropriate permissions to manage objects on the Chef Server. This is easy with chef-zero &ndash; there are no ACLs at all. However in Hosted Chef, like any regular Chef Server, the ACLs don&rsquo;t allow nodes' API clients to modify other nodes, or API clients.</p>

<p>Fortunately we can do all the work necessary using knife, with the <a href="https://github.com/chef/knife-acl">knife-acl</a> plugin. In this quick tip, I&rsquo;ll create a group for provisioning nodes, and give that group the proper permissions for the Chef Provisioning recipe to create the machines' nodes and clients.</p>

<p>First of all, I&rsquo;m using ChefDK, and it&rsquo;s my Ruby environment too, so install the gem:</p>

<p><code>sh
chef gem install knife-acl
</code></p>

<p>Next, use the <code>knife group</code> subcommand to create the new group. Groups are a number of users and/or API clients. By default, an organization on Hosted Chef will have <code>admins</code>, <code>billing-admins</code>, <code>clients</code>, and <code>users</code>. Let&rsquo;s create <code>provisioners</code> now.</p>

<p><code>sh
knife group create provisioners
</code></p>

<p>The Role-based access control (RBAC) system in the Chef Server allows us to assign read, create, update, grant, and delete permissions to various objects in the organization. Containers are a special holder of other types of objects, in this case we need to add permissions for the clients and nodes containers. This is what allows the Chef Provisioning recipe&rsquo;s <code>machine</code> resources to have their Chef objects created.</p>

<p>```sh
for i in read create update grant delete
do
  knife acl add containers clients $i group provisioners
done</p>

<p>for i in read create update grant delete
do
  knife acl add containers nodes $i group provisioners
done
```</p>

<p>Next, we need the API client that will be used by the Chef Provisioning node to authenticate with the Chef Server, and the node needs to be created as well. By default the client will automatically have permissions for the node object that has the same name.</p>

<p><code>sh
knife client create -d chefconf-provisioner &gt; ~/.chef/chefconf-provisioner.pem
knife node create -d chefconf-provisioner
</code></p>

<p>Finally, we need to put the new API client into the provisioners group that was created earlier. First we need to get a mapping of the actors in the organization. Then we can add the client to the group.</p>

<p><code>sh
knife actor map
knife group add actor provisioners chefconf-provisioner
</code></p>

<p>The <code>knife actor map</code> command will generate a YAML file like this:</p>

<h2>```yaml</h2>

<p>:user_map:
  :users:</p>

<pre><code>jtimberman: 12345678901234567890123456780123
</code></pre>

<p>  :usags:</p>

<pre><code>12345678901234567890123456780123: jtimberman
</code></pre>

<p>:clients:
  chefconf-provisioner: chefconf-provisioner
  jtimberman-chefconf-validator: jtimberman-chefconf-validator
```</p>

<p>This maps users to their USAG and stores a list of clients. More information about this is in the <a href="https://github.com/chef/knife-acl/blob/master/README.md">knife-acl README</a></p>

<p>At this point, we have a node, with the private key in <code>~/.chef</code> that can be used with the Chef Server to use Chef Provisioning&rsquo;s <code>machine</code> resource. We can also perform additional tasks that require having a node object, such as create secrets as Chef Vault items:</p>

<p><code>sh
knife vault create secrets dnsimple -M client -J data_bags/secrets/dnsimple.json -A jtimberman -S 'name:chefconf-provisioner'
</code></p>

<p>The entire series of commands is below.</p>

<p>```sh
chef gem install knife-acl
knife group create provisioners</p>

<p>for i in read create update grant delete
do
  knife acl add containers clients $i group provisioners
done</p>

<p>for i in read create update grant delete
do
  knife acl add containers nodes $i group provisioners
done</p>

<p>knife client create -d chefconf-provisioner > ~/.chef/chefconf-provisioner.pem
knife node create -d chefconf-provisioner
knife actor map
knife group add actor provisioners chefconf-provisioner</p>

<p>knife vault create secrets dnsimple -M client -J data_bags/secrets/dnsimple.json -A jtimberman -S &lsquo;name:chefconf-provisioner&rsquo;
```</p>

<p>Hopefully this helps you out with your use of Chef Provisioning, and a non-zero Chef server. If you have further questions, find me at ChefConf!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick Tip: Define Resources to Notifiy in LWRPs]]></title>
    <link href="http://jtimberman.housepub.org/blog/2015/01/17/quick-tip-define-resources-to-notifiy-in-lwrps/"/>
    <updated>2015-01-17T22:37:06-07:00</updated>
    <id>http://jtimberman.housepub.org/blog/2015/01/17/quick-tip-define-resources-to-notifiy-in-lwrps</id>
    <content type="html"><![CDATA[<p>In this quick tip, I&rsquo;ll explain why you may need to create resources to notify in a provider, even if the resource exists in a recipe, when using <code>use_inline_resources</code> in Chef&rsquo;s <a href="http://docs.chef.io/lwrp.html">LWRP DSL</a>.</p>

<p>I&rsquo;ll use an example cookbook, <code>notif</code>, to illustrate. First, I&rsquo;ve created <code>cookbooks/notif/resources/default.rb</code>, with the following content.</p>

<p><code>ruby
actions :write
default_action :write
</code></p>

<p>Then, I have written <code>cookbooks/notif/providers/default.rb</code> like this:</p>

<p>```ruby
use_inline_resources</p>

<p>action :write do
  log &lsquo;notifer&rsquo; do</p>

<pre><code>notifies :create, 'file[notified]'
</code></pre>

<p>  end
end
```</p>

<p>Then the default recipe, where I&rsquo;ll use the resource automatically generated from the resource directory, <code>notif</code>.</p>

<p>```ruby
file &lsquo;notified&rsquo; do
  content &lsquo;something&rsquo;
  action :nothing
end</p>

<p>notif &lsquo;doer&rsquo;
```</p>

<p>When I run Chef, I&rsquo;ll get an error like this:</p>

<p>```
 Recipe: notif::default
   * file[notified] action nothing (skipped due to action :nothing)
   * notif[doer] action write</p>

<pre><code> ================================================================================
 Error executing action `write` on resource 'notif[doer]'
 ================================================================================

 Chef::Exceptions::ResourceNotFound
 ----------------------------------
 resource log[notifer] is configured to notify resource file[notified] with action create, but file[notified] cannot be found in the resource collection. log[notifer] is defined in /tmp/kitchen/cookbooks/notif/providers/default.rb:4:in `block in class_from_file'

 Resource Declaration:
 ---------------------
 # In /tmp/kitchen/cookbooks/notif/recipes/default.rb

  12: notif 'doer'

 Compiled Resource:
</code></pre>

<hr />

<pre><code> # Declared in /tmp/kitchen/cookbooks/notif/recipes/default.rb:12:in `from_file'

 notif("doer") do
   action :write
   retries 0
   retry_delay 2
   default_guard_interpreter :default
   declared_type :notif

   recipe_name "default"
 end
</code></pre>

<p>```</p>

<p>To fix this, I define the <code>file</code> resource in the provider:</p>

<p>```ruby
use_inline_resources</p>

<p>action :write do
  log &lsquo;notifer&rsquo; do</p>

<pre><code>notifies :create, 'file[notified]'
</code></pre>

<p>  end</p>

<p>  file &lsquo;notified&rsquo; do</p>

<pre><code>content new_resource.name
</code></pre>

<p>  end
end
```</p>

<p>Then when I run Chef, it will converge and notify the file resource to be configured.</p>

<p>```
Recipe: notif::default
  * file[notified] action nothing (skipped due to action :nothing)
  * notif[doer] action write</p>

<pre><code>* log[notifer] action write

* file[notified] action create
  - create new file notified
  - update content in file notified from none to 935e8e
  --- notified       2015-01-18 05:47:49.186399317 +0000
  +++ ./.notified20150118-15795-om5fiw       2015-01-18 05:47:49.186399317 +0000
  @@ -1 +1,2 @@
  +doer
* file[notified] action create (up to date)
</code></pre>

<p>Running handlers:
Running handlers complete
Chef Client finished, &frac34; resources updated in 1.298990565 seconds
```</p>

<h2>Why does this happen?</h2>

<p>The reason for this is because <code>use_inline_resources</code> tells Chef that in this provider, we&rsquo;re using inline resources that will be added to their own run context, with their own resource collection. We don&rsquo;t have access to the resource collection from the recipe. Even though the <code>file[notified]</code> resource exists from the recipe, it doesn&rsquo;t actually get inherited in the provider&rsquo;s run context, raising the error we saw before.</p>

<p>We can turn off <code>use_inline_resources</code> by removing it, and the custom resource will be configured:</p>

<p>```ruby
action :write do
  log &lsquo;notifer&rsquo; do</p>

<pre><code>notifies :create, 'file[notified]'
</code></pre>

<p>  end
end
```</p>

<p>Then run Chef:</p>

<p>```
Recipe: notif::default
  * file[notified] action nothing (skipped due to action :nothing)
  * notif[doer] action write (up to date)
  * log[notifer] action write
  * file[notified] action create</p>

<pre><code>- update content in file notified from 935e8e to 3fc9b6
--- notified 2015-01-18 05:47:49.186399317 +0000
+++ ./.notified20150118-16159-r18q7z 2015-01-18 05:50:57.832140405 +0000
@@ -1,2 +1,2 @@
-doer
+something
</code></pre>

<p>```</p>

<p>Notice that the <code>file[notified]</code> resource wasn&rsquo;t updated at the start of the run, when it was encountered in the recipe, but it was when notified by the log resource in the provider action, changing the content.</p>

<h2>Use inline compile mode!</h2>

<p>The <code>use_inline_resources</code> method in the lightweight provider DSL is strongly recommended. It makes it easier to send notifications from the custom resource itself to other resources in the recipe&rsquo;s resource collection. Read more about the <a href="http://docs.chef.io/lwrp.html#inline-compile-mode">inline compile mode</a> in the Chef docs.</p>

<p>Also, define the resources that you need to notify when you&rsquo;re doing this in your provider&rsquo;s actions. A common example is within a provider that writes configuration for a service, and needs to tell that service to restart.</p>
]]></content>
  </entry>
  
</feed>
