<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: chef | jtimberman's Code Blog]]></title>
  <link href="http://jtimberman.housepub.org/blog/categories/chef/atom.xml" rel="self"/>
  <link href="http://jtimberman.housepub.org/"/>
  <updated>2015-05-30T10:15:23-06:00</updated>
  <id>http://jtimberman.housepub.org/</id>
  <author>
    <name><![CDATA[Joshua Timberman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Quick Tip: Stubbing Library Helpers in ChefSpec]]></title>
    <link href="http://jtimberman.housepub.org/blog/2015/05/30/quick-tip-stubbing-library-helpers-in-chefspec/"/>
    <updated>2015-05-30T08:48:47-06:00</updated>
    <id>http://jtimberman.housepub.org/blog/2015/05/30/quick-tip-stubbing-library-helpers-in-chefspec</id>
    <content type="html"><![CDATA[<p>I&rsquo;m currently updating my <a href="https://supermarket.chef.io/cookbooks/vagrant">vagrant cookbook</a>, and adding <a href="https://sethvargo.github.io/chefspec">ChefSpec</a> coverage. Each of the different platform recipes results in slightly different resources to download the package file and install it. To support this, I have <a href="https://github.com/jtimberman/vagrant-cookbook/blob/master/libraries/helpers.rb">helper methods</a> that calculate the download URI, the package name, and the SHA256 checksum based on the version of Vagrant (<code>node['vagrant']['version']</code>), and the platform (<code>node['os']</code>, <code>node['platform_family']</code>).</p>

<p>The outcomes I want to test are that for a given platform: the correct recipe is included, the correct file is downloaded, and the correct package resource installs the downloaded file. Those tests look like this (using Ubuntu/Debian example first):</p>

<p>```ruby
it &lsquo;includes the debian platform family recipe&rsquo; do
  expect(chef_run).to include_recipe(&lsquo;vagrant::debian&rsquo;)
end</p>

<p>it &lsquo;downloads the package from the calculated URI&rsquo; do
  expect(chef_run).to create_remote_file(&lsquo;/var/tmp/vagrant.deb&rsquo;).with(</p>

<pre><code>source: 'https://dl.bintray.com/mitchellh/vagrant/vagrant_1.88.88_x86_64.deb'
</code></pre>

<p>  )
end</p>

<p>it &lsquo;installs the downloaded package&rsquo; do
  expect(chef_run).to install_dpkg_package(&lsquo;vagrant&rsquo;).with(</p>

<pre><code>source: '/var/tmp/vagrant.deb'
</code></pre>

<p>  )
end
```</p>

<p>I&rsquo;ve set the version attribute in the <code>chef_run</code> block for the ChefSpec run to <code>1.88.88</code> to ensure that it doesn&rsquo;t use the value set in the attributes file, and then I can test this specifically in the source for the calculated URI, even if the attribute changes &ndash; hopefully Vagrant doesn&rsquo;t have a 1.88.88 version some day ;).</p>

<p>When I run <code>rspec spec</code>, I get exceptions, however.</p>

<p>```
1) vagrant::default debian includes the debian platform family recipe
   Failure/Error: end.converge(described_recipe)
   OpenURI::HTTPError:</p>

<pre><code> 404 Not Found
</code></pre>

<p>```</p>

<p>This is because in the <code>attributes/default.rb</code>, the checksum is retrieved using the <code>vagrant_sha256sum</code> method:</p>

<p><code>ruby
default['vagrant']['checksum'] = vagrant_sha256sum(node['vagrant']['version'])
</code></p>

<p>The exception is happening when Chef loads the attributes file, and because the version is not valid. The solution here is to stub out the return value from <code>vagrant_sha256sum</code>. This can be anything at all really, because that specific attribute is to make sure we don&rsquo;t have to re-download the package to <a href="http://docs.chef.io/resource_remote_file.html#attributes">compare its checksum</a> on later Chef runs. In this cookbook, the helper methods are not namespaced under a module, they&rsquo;re bare methods in <code>libraries.helpers.rb</code>. This <a href="https://github.com/sethvargo/chefspec/issues/562">poses some</a> <a href="https://github.com/sethvargo/chefspec/issues/549">challenges</a> <a href="https://github.com/sethvargo/chefspec/issues/273">when trying</a> <a href="https://github.com/sethvargo/chefspec/issues/138">to stub</a> <a href="https://github.com/sethvargo/chefspec/issues/253">them</a> in ChefSpec. I won&rsquo;t rehash all the ways I attempted to get this to work, and instead focus on the final solution that got the tests passing:</p>

<p><code>ruby
before(:each) do
  allow_any_instance_of(Chef::Node).to receive(:vagrant_sha256sum).and_return('')
end
</code></p>

<p>When Chef loads cookbook attributes files, it is evaluating them in the context of a <code>Chef::Node</code>, so those library helper methods are sent to the <code>Chef::Node</code> object. Similarly, if this were inside a recipe, I would use <code>Chef::Recipe</code>, and if it were inside a resource (e.g., <code>package</code>), <code>Chef::Resource</code>.</p>

<p>I put this <code>before</code> block at the <code>describe 'vagrant::default'</code> level, not within any <code>context</code> blocks, so it will be done for each of the various per-platform tests. The results in my <code>debian</code> context are now:</p>

<p>```
% rspec spec &mdash;color -fd</p>

<p>vagrant::default
  debian</p>

<pre><code>includes the debian platform family recipe
downloads the package from the calculated URI
installs the downloaded package
</code></pre>

<p>Finished in 7.04 seconds (files took 7.93 seconds to load)
3 examples, 0 failures
```</p>

<p>Six issues have been filed against ChefSpec about this. Hopefully this can result in fewer inquiries.</p>

<p>Happy testing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick Tip: Policyfile Run Lists]]></title>
    <link href="http://jtimberman.housepub.org/blog/2015/05/16/quick-tip-policyfile-run-lists/"/>
    <updated>2015-05-16T21:52:17-06:00</updated>
    <id>http://jtimberman.housepub.org/blog/2015/05/16/quick-tip-policyfile-run-lists</id>
    <content type="html"><![CDATA[<p>As I indicated on <a href="https://twitter.com/jtimberman/status/599779453456097280">Twitter earlier tonight</a>, I&rsquo;m working with the new Policyfile feature of <a href="https://github.com/chef/chef-dk/blob/master/POLICYFILE_README.md">ChefDK</a>. While converting my personal systems' repository to use Policyfile instead of roles, I found myself writing this Policyfile:</p>

<p>```ruby
name &lsquo;home_server&rsquo;
default_source :community
run_list(</p>

<pre><code>     'build-essential',
     'packages',
     'users',
     'sudo',
     'runit',
     'ntp',
     'openssh',
     'postfix'
    )
</code></pre>

<p>cookbook &lsquo;build-essential&rsquo;
cookbook &lsquo;packages&rsquo;, git: &lsquo;<a href="https://github.com/mattray/packages-cookbook">https://github.com/mattray/packages-cookbook</a>&rsquo;, branch: &lsquo;multipackage&rsquo;
cookbook &lsquo;users&rsquo;, path: &lsquo;../housepub-chef-repo/cookbooks/users&rsquo;
cookbook &lsquo;sudo&rsquo;
cookbook &lsquo;runit&rsquo;
cookbook &lsquo;ntp&rsquo;
cookbook &lsquo;openssh&rsquo;
cookbook &lsquo;postfix&rsquo;
```</p>

<p>No big deal, but I found the repetition&hellip; redundant. Several of these cookbooks are fine floating on the latest version from Supermarket &ndash; everything but <code>packages</code> and <code>users</code>. So I thought, &ldquo;wouldn&rsquo;t it be great if entries in the run list were automatically added as dependencies?&rdquo;</p>

<p>Then, I added <code>chef-client-runit</code> to the run list, but I didn&rsquo;t add it as a <code>cookbook</code> entry, performed the <code>chef update</code>, and reran my <code>chef provision</code> command, and wound up with <code>chef-client-runit</code> being converged.</p>

<p>To illustrate this with a really simple example, I confirmed with <code>zsh</code>:</p>

<pre><code>% cd ~/Development/sandbox/test
% chef generate policyfile
</code></pre>

<p>Then edit the <code>Policyfile.rb</code>:</p>

<p><code>ruby
name "example_application"
default_source :community
run_list "zsh"
</code></p>

<p>Note that there is no <code>cookbook</code> line here.</p>

<pre><code>% chef install
Building policy example_application
Expanded run list: recipe[zsh]
Caching Cookbooks...
Using      zsh 1.0.1

Lockfile written to /Users/jtimberman/Development/sandbox/test/Policyfile.lock.json
</code></pre>

<p>And if we examine the <code>Policyfile.lock.json</code>, we see:</p>

<p>```json
{
  &ldquo;revision_id&rdquo;: &ldquo;e8b5b48d35f4a8efcd037ef6c9cc8e34f901561ffef160bd0a57ca1b612a1179&rdquo;,
  &ldquo;name&rdquo;: &ldquo;example_application&rdquo;,
  &ldquo;run_list&rdquo;: [</p>

<pre><code>"recipe[zsh::default]"
</code></pre>

<p>  ],
  &ldquo;cookbook_locks&rdquo;: {</p>

<pre><code>"zsh": {
  "version": "1.0.1",
  "identifier": "b512ef33af29b8d34ad7e4e9b6ad38d42dea4945",
  "dotted_decimal_identifier": "50967789358229944.59473511204894381.62483954551109",
  "cache_key": "zsh-1.0.1-supermarket.chef.io",
  "origin": "https://supermarket.chef.io/api/v1/cookbooks/zsh/versions/1.0.1/download",
  "source_options": {
    "artifactserver": "https://supermarket.chef.io/api/v1/cookbooks/zsh/versions/1.0.1/download",
    "version": "1.0.1"
  }
}
</code></pre>

<p>  } <SNIP>
```</p>

<p>Yay! Shoutout to <a href="https://twitter.com/kallistec">Dan DeLeo</a> for preemptively implementing features I didn&rsquo;t even know I wanted yet :&ndash;).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick Tip: ChefDK Provision]]></title>
    <link href="http://jtimberman.housepub.org/blog/2015/05/15/quick-tip-chefdk-provision/"/>
    <updated>2015-05-15T16:18:03-06:00</updated>
    <id>http://jtimberman.housepub.org/blog/2015/05/15/quick-tip-chefdk-provision</id>
    <content type="html"><![CDATA[<p>Earlier today, <a href="https://www.chef.io/blog/2015/05/15/chefdk-0-6-0-released/">ChefDK 0.6.0 was released</a>. In this post, I will illustrate a fairly simple walkthrough using Amazon EC2, based on information in the <a href="https://github.com/chef/chef-dk/blob/master/PROVISION_README.md#basic-example">document</a>. This example will include Policyfile use, too. Let&rsquo;s get started.</p>

<p>First, install ChefDK 0.6.0. You can get it from the <a href="downloads.chef.io/chef-dk">Chef Downloads page</a>.</p>

<p>Next, setup <a href="https://jtimberman.housepub.org/blog/2013/10/19/managing-multiple-aws-account-credentials/">AWS credentials</a>. Ensure that they are exported to the current shell environment.</p>

<pre><code>AWS_ACCESS_KEY_ID=secrets
AWS_SECRET_ACCESS_KEY=secrets
AWS_DEFAULT_REGION=us-east-1
AWS_SSH_KEY=your_ssh_key_name
AWS_ACCESS_KEY=secrets
AWS_SECRET_KEY=secrets
</code></pre>

<p>I&rsquo;m going to use Hosted Chef as my Chef Server. I already have my user API key and configuration in <code>~/.chef</code>, and I&rsquo;m going to rely on the automatic configuration detection in the <code>chef</code> command for that.</p>

<p>Generate a new repository using the <code>chef generate</code> command. Further commands run from this directory.</p>

<pre><code>chef generate repo chefdk-provision-demo
cd chefdk-provision-demo
</code></pre>

<p>Generate a <code>provision</code> cookbook. This is the required name, and it must be in the current directory.</p>

<pre><code>chef generate cookbook provision
</code></pre>

<p>Edit the default recipe, <code>$EDITOR provision/recipes/default.rb</code>.</p>

<p>```ruby
context = ChefDK::ProvisioningData.context
with_driver &lsquo;aws::us-west-2&rsquo;
options = {
  ssh_username: &lsquo;admin&rsquo;,
  use_private_ip_for_ssh: false,
  bootstrap_options: {</p>

<pre><code>key_name: 'jtimberman',
image_id: 'ami-0d5b6c3d',
instance_type: 'm3.medium',
</code></pre>

<p>  },
  convergence_options: context.convergence_options,
}
machine context.node_name do
  machine_options options
  action context.action
  converge true
end
```</p>

<p>To break this down, first we get the ChefDK provisioning context that will pass in options to <code>chef-provisioning</code>. Then we tell <code>chef-provisioning</code> to use the AWS driver, and in the <code>us-west-2</code> region. The options hash is used to setup the instance. We&rsquo;re using <a href="https://wiki.debian.org/Cloud/AmazonEC2Image/Jessie">Debian 8</a>, which uses the <code>admin</code> user to log in, an SSH key that exists in the AWS region, the actual AMI, and finally the instance type. Then, we&rsquo;re going to set the convergence options automatically from ChefDK. This is the important part that will ensure the node has the right run list.</p>

<p>Generate a <code>Policyfile.rb</code>.</p>

<pre><code>chef generate policyfile
</code></pre>

<p>And edit its content, <code>$EDITOR Policyfile.rb</code>.</p>

<p><code>ruby
name            "chefdk-provision-demo"
default_source  :community
run_list        "recipe[libuuid-user]"
cookbook        "libuuid-user"
</code></p>

<p>Here we&rsquo;re simply getting the <a href="https://supermarket.chef.io/cookbooks/libuuid">libuuid-user cookbook from Supermarket</a> and applying the default recipe to the nodes that have this policy.</p>

<p>The next step is to install the Policyfile. This generates the Policyfile.lock.json, and downloads the cookbooks to the cache, <code>~/.chefdk/cache/cookbooks</code>. If this isn&rsquo;t run, <code>chef</code> will complain, with a reminder to run it.</p>

<pre><code>chef install
</code></pre>

<p>Finally, we can provision a testing system with this policy:</p>

<pre><code>chef provision testing --sync -n debian-libuuid
</code></pre>

<p>This will result in output similar to this:</p>

<pre><code>Uploading policy to policy group testing
Uploaded libuuid-user 1.0.1 (c3220a49)
Compiling Cookbooks...
Recipe: provision::default
  * machine[debian-libuuid] action converge
    - Create debian-libuuid with AMI ami-0d5b6c3d in us-west-2
    - create node debian-libuuid at https://chef-api.example.com/organizations/testing
    -   add normal.tags = nil
    -   add normal.chef_provisioning = {"hash" =&gt; "of options"}
    - waiting for debian-libuuid (i-251f1cec on aws::us-west-2) to be connectable (transport up and running) ...
    - been waiting 60/120 -- sleeping 10 seconds for debian-libuuid (i-251f1cec on aws::us-west-2) to be connectable ...
    - debian-libuuid is now connectable        - generate private key (2048 bits)
    - create directory /etc/chef on debian-libuuid
    - write file /etc/chef/client.pem on debian-libuuid
    - create client debian-libuuid at clients
    -   add public_key = "-----BEGIN PUBLIC KEY-----\n..."
    - Add debian-libuuid to client read ACLs
    - Add debian-libuuid to client update ACLs
    - create directory /etc/chef/ohai/hints on debian-libuuid
    - write file /etc/chef/ohai/hints/ec2.json on debian-libuuid
    - write file /etc/chef/client.rb on debian-libuuid
    - write file /tmp/chef-install.sh on debian-libuuid
    - run 'bash -c ' bash /tmp/chef-install.sh'' on debian-libuuid
    [debian-libuuid] Starting Chef Client, version 12.3.0
                     [2015-05-15T22:42:43+00:00] WARN: Using experimental Policyfile feature
                     resolving cookbooks for run list: ["libuuid-user::default@1.0.1 (c3220a4)", "libuuid-user::verify@1.0.1 (c3220a4)"]
                     Synchronizing Cookbooks:
                       - libuuid-user
                     Compiling Cookbooks...
                     Converging 1 resources
                     Recipe: libuuid-user::default
                       * user[libuuid] action create
                       - create user libuuid

                     Running handlers:
                     Running handlers complete
                     Chef Client finished, 1/1 resources updated in 5.29666495 seconds
    - run 'chef-client -l auto' on debian-libuuid
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chef Audit Mode Introduction]]></title>
    <link href="http://jtimberman.housepub.org/blog/2015/04/03/chef-audit-mode-introduction/"/>
    <updated>2015-04-03T20:48:23-06:00</updated>
    <id>http://jtimberman.housepub.org/blog/2015/04/03/chef-audit-mode-introduction</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve started working with the <a href="https://docs.chef.io/analytics.html#audit-mode">audit mode</a> feature introduced in Chef version 12.1.0. Audit mode allows users to write custom rules (controls) in Chef recipes using new DSL helpers. In his <a href="https://www.youtube.com/watch?v=g-_SW3adPwU">ChefConf 2015 talk, &ldquo;Compliance At Velocity,&rdquo;</a> James Casey goes into more of the background and reasoning for this. For now, I wanted to share a few tips with users who may be experimenting with this feature on their own, too.</p>

<p>First, we need to update ChefDK to version 0.5.0, as that includes a version of test kitchen that <a href="https://github.com/test-kitchen/test-kitchen/pull/652">allows us to configure audit mode</a> for chef-client.</p>

<p><code>
curl -L https://chef.io/chef/install.sh | sudo bash -s -- -P chefdk
</code></p>

<p>Next, create a new cookbook for the audit mode tests.</p>

<p><code>
chef generate cookbook audit-test
cd audit-test
</code></p>

<p>Then, modify the audit-test cookbook&rsquo;s <code>.kitchen.yml</code>:</p>

<h2>```</h2>

<p>driver:
  name: vagrant</p>

<p>provisioner:
  name: chef_zero
  client_rb:</p>

<pre><code>audit_mode: :audit_only
</code></pre>

<p>platforms:
  &ndash; name: ubuntu-12.04
  &ndash; name: centos-6.5</p>

<p>suites:
  &ndash; name: default</p>

<pre><code>run_list:
  - recipe[audit-test::default]
attributes:
</code></pre>

<p>```</p>

<p>This is the generated <code>.kitchen.yml</code> with <code>client_rb</code> added to the provisioner config. Note that we must use the Ruby symbol syntax for the config value, <code>:audit_only</code>. The other valid values for <code>audit_mode</code> are <code>:enabled</code> and <code>:disabled</code>. This will be translated to an actual Ruby symbol in the generated config file (<code>/tmp/kitchen/client.rb</code>):</p>

<p><code>ruby
audit_mode :audit_only
</code></p>

<p>Next, let&rsquo;s write a control rule to test. Since we&rsquo;re using the default <code>.kitchen.yml</code>, which includes Ubuntu 12.04 and uses SSH to connect, we can assume that SSH is running, so port 22 is listening. The following control asserts this is true.</p>

<p>```ruby
control_group &lsquo;Blog Post Examples&rsquo; do
  control &lsquo;SSH&rsquo; do</p>

<pre><code>it 'should be listening on port 22' do
  expect(port(22)).to be_listening
end
</code></pre>

<p>  end
end
```</p>

<p>Now run <code>kitchen converge ubuntu</code> to run Chef, but not tear down the VM aftward &ndash; we&rsquo;ll use it again for another example. Here&rsquo;s the audit phase output from the Chef run:</p>

<pre><code>% kitchen converge ubuntu
Synchronizing Cookbooks:
  - audit-test
Compiling Cookbooks...
Starting audit phase

Blog Post Examples
  SSH
    should be listening on port 22

Finished in 0.10453 seconds (files took 0.37536 seconds to load)
1 example, 0 failures
Auditing complete
</code></pre>

<p>Cool! So we have asserted that the node complies with this control by default. But what does a failing control look like? Let&rsquo;s write one. Since we&rsquo;re working with SSH already, let&rsquo;s use the SSHd configuration. By default in the Vagrant base box we&rsquo;re using, root login is permitted, so this value is present:</p>

<p><code>
PermitRootLogin yes
</code></p>

<p>However, our security policy mandates that we set this to <code>no</code>, and we want to audit that.</p>

<p>```ruby
control_group &lsquo;Blog Post Examples&rsquo; do
  control &lsquo;SSH&rsquo; do</p>

<pre><code>it 'should be listening on port 22' do
  expect(port(22)).to be_listening
end

it 'disables root logins over ssh' do
  expect(file('/etc/ssh/sshd_config')).to contain('PermitRootLogin no')
end
</code></pre>

<p>  end
end
```</p>

<p>Rerun <code>kitchen converge ubuntu</code> and we see the validation fails.</p>

<pre><code>Starting audit phase

Blog Post Examples
  SSH
    should be listening on port 22
    disables root logins over ssh (FAILED - 1)

Failures:

  1) Blog Post Examples SSH disables root logins over ssh
     Failure/Error: expect(file('/etc/ssh/sshd_config')).to contain('PermitRootLogin no')
expected File "/etc/ssh/sshd_config" to contain "PermitRootLogin no"
     # /tmp/kitchen/cache/cookbooks/audit-test/recipes/default.rb:8:in `block (3 levels) in from_file'

Finished in 0.13067 seconds (files took 0.32089 seconds to load)
2 examples, 1 failure

Failed examples:

rspec  # Blog Post Examples SSH disables root logins over ssh
[2015-04-04T03:29:41+00:00] ERROR: Audit phase failed with error message: Audit phase found failures - 1/2 controls failed

Audit phase exception:
Audit phase found failures - 1/2 controls failed
</code></pre>

<p>When we have a failure, we&rsquo;ll have contextual information about the failure, including the line number in the recipe where itwas found, and a stack trace (cut from the output here), in case more information is required for debugging. To fix the test, we can simply edit the config file to have the desired setting, or we can manage the file with Chef to set the value accordingly. Either way, after updating the file, the validation will pass, and all will be well.</p>

<p>We can put as many <code>control_group</code> and <code>control</code> blocks with the <code>it</code> validation rules as required to audit our policy. If we have many validations, it can be difficult to follow with all the output if there are failures. Chef&rsquo;s audit mode is based on <a href="http://serverspec.org/">Serverspec</a>, which is based on <a href="http://rspec.info/">RSpec</a>. We can use the <code>filter_tag</code> configuration feature of RSpec to only run the <code>control</code> blocks or <code>it</code> statements that we&rsquo;re interested in debugging. To do this, we need an <code>RSpec.configuration</code> block within the <code>control_group</code> &ndash; due to the way that audit mode is implemented, we can&rsquo;t do it outside of <code>control_group</code>.</p>

<p>For example, we could debug our root login configuration:</p>

<p>```ruby
control_group &lsquo;Blog Post Examples&rsquo; do
  ::RSpec.configure do |c|</p>

<pre><code>c.filter_run focus: true
</code></pre>

<p>  end</p>

<p>  control &lsquo;SSH&rsquo; do</p>

<pre><code>it 'should be listening on port 22' do
  expect(port(22)).to be_listening
end

it 'disables root logins over ssh', focus: true do
  expect(file('/etc/ssh/sshd_config')).to contain('PermitRootLogin no')
end
</code></pre>

<p>  end
end
```</p>

<p>The key here is to pass the argument <code>focus: true</code> (or if you like hash rockets, <code>:focus =&gt; true</code>) on the <code>it</code> block. This could also be used on a <code>control</code> block:</p>

<p><code>ruby
control 'SSH', focus: true do
  it 'does stuff...'
end
</code></p>

<p>Then, when running <code>kitchen converge ubuntu</code>, we see only that validation:</p>

<pre><code>Starting audit phase

Blog Post Examples
  SSH
    disables root logins over ssh (FAILED - 1)

Failures:

  1) Blog Post Examples SSH disables root logins over ssh
     Failure/Error: expect(file('/etc/ssh/sshd_config')).to contain('PermitRootLogin no')
</code></pre>

<p>This example is simple enough that this isn&rsquo;t necessary, but if we were implementing audit mode checks for our entire security policy, that could be dozens or even hundreds of controls.</p>

<p>As of this writing, audit mode is still under development, and is considered an experimental feature. There will be further information, guides, and documentation about it coming to the Chef blog and docs site, and I&rsquo;ll have a post coming soon with something I&rsquo;m working on, so stay tuned!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Missing Transitive Dependencies]]></title>
    <link href="http://jtimberman.housepub.org/blog/2015/03/25/missing-transitive-dependencies/"/>
    <updated>2015-03-25T12:54:08-06:00</updated>
    <id>http://jtimberman.housepub.org/blog/2015/03/25/missing-transitive-dependencies</id>
    <content type="html"><![CDATA[<p>One of my home projects while I&rsquo;m on vacation this week is rebuilding my server with Fedora 21 (<a href="https://getfedora.org/en/server/">Server</a>). In order to do this, I needed to <a href="https://github.com/hw-cookbooks/runit/commit/c3d46bcf2c330e90aff8f1bb1e1701d57078cca8">add Fedora support</a> to the <a href="https://supermarket.chef.io/cookbooks/runit">runit</a> cookbook, since I use runit for a number of services on my system. That&rsquo;s really neither here nor there, as the topic of this blog post isn&rsquo;t specific to Fedora, nor runit.</p>

<p>The topic is actually about an issue with transitive dependencies and how Chef dependency resolution works.</p>

<p>Here&rsquo;s the scenario:</p>

<ol>
<li>I run chef on my node</li>
<li>The runit cookbook is synchronized</li>
<li>An older version of the runit cookbook is downloaded</li>
<li>The new changes I expected were not made</li>
<li>WTFs ensue</li>
</ol>


<p>So what happened?</p>

<p>The runit cookbook itself is updated to use Ian Meyer&rsquo;s Package Cloud repository &ndash; at least, the version I want to use is, which is on GitHub. When I submitted the PR for adding this repository for RHEL platforms, Ian had not yet added Fedora packages. That&rsquo;s okay because Fedora is not listed as supported in the cookbook. However, I wanted to use it, and figured folks in the community using Fedora Server might benefit too.</p>

<p>I digress. Ian pushed a Fedora package earlier today, so I added &ldquo;fedora&rdquo; to the various platform family conditionals, in the cookbook and opened the PR linked earlier. All was well in test kitchen. So I change my local repository&rsquo;s Berksfile:</p>

<p><code>ruby
cookbook 'runit', github: 'hw-cookbooks/runit', ref: 'jtimberman/fedora-21'
</code></p>

<p>Then a quick <code>berks update runit</code> and <code>berks upload runit</code>, and I was in business.</p>

<p>Or so I thought. Enter scenario listed above. The problem is, that when I did the <code>berks upload</code>, it only uploaded <code>runit</code>. However in the latest <code>runit</code> cookbook from that branch, it also adds a dependency on Computology&rsquo;s <a href="https://supermarket.chef.io/cookbooks/packagecloud">packagecloud</a> cookbook, since it uses that to add the repository. When the <code>runit</code> cookbook is specified on the <code>berks upload</code> command, it doesn&rsquo;t upload the transitive dependencies when the location is a git URI. This appears to be by design.</p>

<p>What happens in Chef is that the server solves the graph, seeing that the node needs the runit cookbook. But the latest version of the runit cookbook depends on packagecloud, which hasn&rsquo;t yet been uploaded. So the dependency solver looks for the latest version of the runit cookbook that meets the constraint (none), and doesn&rsquo;t have the packagecloud cookbook. Thus, I end up with runit version 1.5.18 on my node, but it fails to converge because it doesn&rsquo;t have the changes required for Fedora, which are in 1.5.20.</p>

<p>The simple solution here is to upload the packagecloud cookbook. This can be done with <code>berks upload packagecloud</code>, as it does exist in the Berksfile.lock and has been cached in the berkshelf. Alternatively, <code>berks upload</code> will also upload the cookbook, as that operates on all cookbooks in  the Berksfile.lock.</p>

<p>I hope this helps anyone who&rsquo;s faced this issue with transitive dependencies when working on a cookbook &ldquo;in development.&rdquo;</p>
]]></content>
  </entry>
  
</feed>
