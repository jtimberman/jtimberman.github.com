<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: chef | jtimberman's Code Blog]]></title>
  <link href="http://jtimberman.housepub.org/blog/categories/chef/atom.xml" rel="self"/>
  <link href="http://jtimberman.housepub.org/"/>
  <updated>2014-12-31T16:14:52-07:00</updated>
  <id>http://jtimberman.housepub.org/</id>
  <author>
    <name><![CDATA[Joshua Timberman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Quick Tip: Serverspec spec_helper in Test Kitchen]]></title>
    <link href="http://jtimberman.housepub.org/blog/2014/12/31/quick-tip-serverspec-spec-helper-in-test-kitchen/"/>
    <updated>2014-12-31T16:01:23-07:00</updated>
    <id>http://jtimberman.housepub.org/blog/2014/12/31/quick-tip-serverspec-spec-helper-in-test-kitchen</id>
    <content type="html"><![CDATA[<p>Recently, I&rsquo;ve started refactoring some <a href="https://supermarket.chef.io/cookbooks/daemontools">old</a> <a href="https://supermarket.chef.io/cookbooks/djbdns">cookbooks</a> <a href="https://supermarket.chef.io/cookbooks/ucspi-tcp">I wrote</a> ages ago. I&rsquo;m adding Serverspec coverage that can be run with <code>kitchen verify</code>. In this <a href="/blog/categories/quicktips">quicktip</a>, I&rsquo;ll describe how to create a <code>spec_helper</code> that can be used in all the specs. This is a convention used by <a href="http://pivotallabs.com/spec-helper/">many</a> in the Ruby community to add configuration for RSpec.</p>

<p>For Chef, we can run integration tests after convergence using <a href="http://kitchen.ci">Test Kitchen</a> using Serverspec. To do that, we need to require Serverspec, and then set its backend. In some cookbooks, the author/developer may have written <code>spec_helper</code> files in the various <code>test/integration/SUITE/serverspec/</code> directories, but this will use a single shared file for them all. Let&rsquo;s get started.</p>

<p>In the <code>.kitchen.yml</code>, add the <code>data_path</code> configuration directive in the provisioner.</p>

<p><code>yaml
provisioner:
  name: chef_zero
  data_path: test/shared
</code></p>

<p>Then, create the <code>test/shared</code> directory in the cookbook, and create the <code>spec_helper.rb</code> in it.</p>

<p><code>sh
mkdir test/shared
$EDITOR test/shared/spec_helper.rb
</code></p>

<p>Minimally, it should look like this:</p>

<p>```ruby
require &lsquo;serverspec&rsquo;</p>

<p>set :backend, :exec
```</p>

<p>Then in your specs, for example <code>test/integration/default/serverspec/default_spec.rb</code>, require the <code>spec_helper</code>. On the instances under test, the file will be copied to <code>/tmp/kitchen/data/spec_helper.rb</code>.</p>

<p><code>ruby
require_relative '../../../kitchen/data/spec_helper'
</code></p>

<p>That&rsquo;s it, now when running <code>kitchen test</code>, or <code>kitchen verify</code> on a converged instance, the helper will be used.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick Tip: Chef 12 Homebrew User Mixin]]></title>
    <link href="http://jtimberman.housepub.org/blog/2014/12/29/chef-12-homebrew-user-mixin/"/>
    <updated>2014-12-29T08:56:01-07:00</updated>
    <id>http://jtimberman.housepub.org/blog/2014/12/29/chef-12-homebrew-user-mixin</id>
    <content type="html"><![CDATA[<p>OS X is an interesting operating system. It is a Unix, but is primarily used for workstations. As such, many system settings can, and should, be done as a non-privileged user. Some tasks, however, require administrative privileges. OS X uses <code>sudo</code> to escalate privileges. This is done by a nice GUI pop-up requesting the user password when done through another GUI element. However, one must use <code>sudo $COMMAND</code> when working at the Terminal.</p>

<p>The <a href="http://brew.sh">Homebrew</a> package manager tries to do everything as a non-privileged user. The <a href="https://raw.githubusercontent.com/Homebrew/install/master/install">installation script</a> will invoke some commands with <code>sudo</code> &ndash; namely to create and set the correct permissions on <code>/usr/local</code> (its default installation location). Once that is complete, <code>brew install</code> will not require privileged access for installing packages. In fact, the <a href="https://github.com/Homebrew/homebrew/blob/b19d3afccef0ddc31820f1cb7d1a5316017e29df/share/doc/homebrew/FAQ.md#why-does-homebrew-say-sudo-is-bad-">Homebrew project recommends</a> never using <code>sudo</code> with the <code>brew</code> commands.</p>

<p>In Chef 12 the default provider for the <code>package</code> resource is <code>homebrew</code>. This originally came from the <a href="https://supermarket.chef.io/cookbooks/homebrew">homebrew cookbook</a>. In order to not use <code>sudo</code> when managing packages, there&rsquo;s a helper method (mixin) that attempts to determine what non-privileged user should run the <code>brew install</code> command. This is also <a href="https://github.com/opscode/chef/blob/4cb27331d81b394b816278e2bed6b3395b54b9c9/lib/chef/mixin/homebrew_user.rb">ported to Chef 12</a>. The method can also take an argument that specifies a particular user that should run the <code>brew</code> command.</p>

<p>When managing an OS X system with Chef, it is often easier to just run <code>chef-client</code> as <code>root</code>, rather than be around when <code>sudo</code> prompts for a password. This means that we need a way to execute other commands for managing OS X as a non-privileged user. We can reuse the mixin to do this. I&rsquo;ll demonstrate this using plain old Ruby with <code>pry</code>, which is installed in ChefDK, and I&rsquo;ll start it up with <code>sudo</code>. Then, I&rsquo;ll show a short recipe with <code>chef-apply</code>.</p>

<p><code>
% which pry
/opt/chefdk/embedded/bin/pry
% sudo pry
</code></p>

<p>Paste in the following Ruby code:</p>

<p>```ruby
require &lsquo;chef&rsquo;
include Chef::Mixin::HomebrewUser
include Chef::Mixin::ShellOut</p>

<p>find_homebrew_uid #=> 501
```</p>

<p>The method <code>find_homebrew_uid</code> is the helper we want. As we can see, rather than returning <code>0</code> (for <code>root</code>), it returns <code>501</code>, which is the UID of the <code>jtimberman</code> user on my system. To prove that I&rsquo;m executing in a process owned by <code>root</code>:</p>

<p><code>ruby
Process.uid #=&gt; 0
</code></p>

<p>Or, I can shell out to the <code>whoami</code> command using Chef&rsquo;s <code>shell_out</code> method &ndash; which is the same method Chef would use to run <code>brew install</code>.</p>

<p><code>ruby
shell_out('whoami').stdout #=&gt; "root\n"
</code></p>

<p>The <code>shell_out</code> method can take a <code>:user</code> attribute:</p>

<p><code>ruby
shell_out('whoami', :user =&gt; find_homebrew_uid).stdout #=&gt; "jtimberman\n"
</code></p>

<p>So this can be used to install packages with <code>brew</code>, and is exactly what Chef 12 does.</p>

<p><code>ruby
shell_out('brew install coreutils', :user =&gt; find_homebrew_uid)
</code></p>

<p>Or, it can be used to run <code>defaults(1)</code> settings that require running as a specific user, rather than <code>root</code></p>

<p>```ruby</p>

<h1>Turn off iPhoto face detection, please</h1>

<p>shell_out(&lsquo;defaults write com.apple.iPhoto PKFaceDetectionEnabled 0&rsquo;,</p>

<pre><code>      :user =&gt; find_homebrew_uid)
</code></pre>

<p>```</p>

<p>```sh</p>

<h1>before&hellip;</h1>

<p>jtimberman@localhost% defaults read com.apple.iPhoto PKFaceDetectionEnabled
1</p>

<h1>after!</h1>

<p>jtimberman@localhost% defaults read com.apple.iPhoto PKFaceDetectionEnabled
0
```</p>

<p>Putting this together in a Chef recipe that gets run by <code>root</code>, we can disable face detection in iPhoto like this:</p>

<p>```ruby
Chef::Resource::Execute.send(:include, Chef::Mixin::HomebrewUser)</p>

<p>execute &lsquo;defaults write com.apple.iPhoto PKFaceDetectionEnabled 0&rsquo; do
  user find_homebrew_uid
end
```</p>

<p>The first line makes the method available on all <code>execute</code> resources. To make the method available to all resources, use <code>Chef::Resource.send</code>, and to make it available across everything in all recipes, use <code>Chef::Recipe.send</code>. Otherwise we would get a <code>NoMethodError</code> exception.</p>

<p>The <code>execute</code> resource takes a <code>user</code> attribute, so we use the <code>find_homebrew_uid</code> method here to set the user. And we can observe the same results as above:</p>

<p><code>
jtimberman@localhost% defaults write com.apple.iPhoto PKFaceDetectionEnabled 1
jtimberman@localhost% defaults read com.apple.iPhoto PKFaceDetectionEnabled
1
jtimberman@localhost% sudo chef-apply nofaces.rb
Recipe: (chef-apply cookbook)::(chef-apply recipe)
* execute[defaults write com.apple.iPhoto PKFaceDetectionEnabled 0] action run
- execute defaults write com.apple.iPhoto PKFaceDetectionEnabled 0
jtimberman@localhost% defaults read com.apple.iPhoto PKFaceDetectionEnabled
0
</code></p>

<p>Those who have read the workstation management posts on this blog in the past may be aware that I have a <a href="https://supermarket.chef.io/cookbooks/mac_os_x">cookbook</a> that can manage OS X &ldquo;<code>defaults(1)</code>&rdquo; settings. I <a href="https://github.com/chef-osx/mac_os_x/issues/21">plan to make updates</a> to the resource in that cookbook that will leverage this method.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick Tip: Deleting Attributes]]></title>
    <link href="http://jtimberman.housepub.org/blog/2014/12/24/quicktip-delete-attributes/"/>
    <updated>2014-12-24T10:00:40-07:00</updated>
    <id>http://jtimberman.housepub.org/blog/2014/12/24/quicktip-delete-attributes</id>
    <content type="html"><![CDATA[<p>I have a new goal for 2015, and that is to write at least one &ldquo;Quick Tip&rdquo; per week about Chef. I&rsquo;ve added the category &ldquo;<a href="/blog/categories/quicktips">quicktips</a>&rdquo; to make these easier to find.</p>

<p>In this quick tip, I want to talk about a new feature of Chef 12. The new feature is the ability to remove an attribute from all levels (default, normal, override) on a node so it doesn&rsquo;t get saved back to the Chef Server. This was brought up in <a href="https://github.com/opscode/chef-rfc/blob/master/rfc023-chef-12-attributes-changes.md#global-level-removals">Chef RFC 23</a>. The reason I don&rsquo;t want to save the attribute in question back to the server is that it is a secret that I have in a <a href="https://github.com/Nordstrom/chef-vault">Chef Vault item</a>.</p>

<p>I&rsquo;m using <a href="https://www.datadoghq.com">Datadog</a> for my home systems, and the wonderful folks at Datadog have a <a href="https://supermarket.chef.io/cookbooks/datadog">cookbook</a> to set it up. The documentation requires that you set two attributes to authenticate, the API key, and the application key:</p>

<p><code>ruby
node.default['datadog']['api_key'] = 'Secrets In Plain Text Attributes??'
node.default['datadog']['application_key'] = 'It is probably fine.'
</code></p>

<p>I prefer to use chef-vault because <a href="http://jtimberman.housepub.org/blog/2013/09/10/managing-secrets-with-chef-vault/">I think it&rsquo;s the best way</a> to manage shared secrets in Chef recipes. I still need to set the attributes for Datadog&rsquo;s recipe to work, however. In order to accomplish the goal here, I will use a custom cookbook, <code>housepub-datadog</code>. It has one recipe that looks like this:</p>

<p>```ruby
include_recipe &lsquo;chef-vault&rsquo;</p>

<p>node.default[&lsquo;datadog&rsquo;][&lsquo;api_key&rsquo;] = chef_vault_item(:secrets, &lsquo;datadog&rsquo;)[&lsquo;data&rsquo;][&lsquo;api_key&rsquo;]
node.default[&lsquo;datadog&rsquo;][&lsquo;application_key&rsquo;] = chef_vault_item(:secrets, &lsquo;datadog&rsquo;)[&lsquo;data&rsquo;][&lsquo;chef&rsquo;]</p>

<p>include_recipe &lsquo;datadog::dd-agent&rsquo;</p>

<p>ruby_block &lsquo;smash-datadog-auth-attributes&rsquo; do
  block do</p>

<pre><code>node.rm('datadog', 'api_key')
node.rm('datadog', 'application_key')
</code></pre>

<p>  end
  subscribes :create, &lsquo;template[/etc/dd-agent/datadog.conf]&rsquo;, :immediately
end
```</p>

<p>Let&rsquo;s take a closer look at the recipe.</p>

<p><code>ruby
include_recipe 'chef-vault'
</code></p>

<p>Here, the <code>chef-vault</code> recipe is included to ensure everything works, and I have a dependency on <code>chef-vault</code> in my cookbook&rsquo;s metadata. Next, we see the attributes set:</p>

<p><code>ruby
node.default['datadog']['api_key'] = chef_vault_item(:secrets, 'datadog')['data']['api_key']
node.default['datadog']['application_key'] = chef_vault_item(:secrets, 'datadog')['data']['chef']
</code></p>

<p>The <code>secrets/datadog</code> item looks like this in plaintext:</p>

<p>```json
{
  &ldquo;id&rdquo;: &ldquo;datadog&rdquo;,
  &ldquo;data&rdquo;: {</p>

<pre><code>"api_key": "My datadog API key",
"chef": "Application key for the 'chef' application"
</code></pre>

<p>  }
}
```</p>

<p>When Chef runs, it will load the vault-encrypted data bag item, and populate the attributes that will be used in the template. This template comes from the <code>datadog::dd-agent</code> recipe, which is included next. The template from that recipe looks like this:</p>

<p>```ruby
template &lsquo;/etc/dd-agent/datadog.conf&rsquo; do
  owner &lsquo;root&rsquo;
  group &lsquo;root&rsquo;
  mode 0644
  variables(</p>

<pre><code>:api_key =&gt; node['datadog']['api_key'],
:dd_url =&gt; node['datadog']['url']
</code></pre>

<p>  )
end
```</p>

<p>Now, for the grand finale of this post, I delete the attributes that were set using a <code>ruby_block</code> resource. The timing here is important, because these attributes must be deleted after Chef has converged the template. This does get updated every run, because the ruby block is not convergent, and this is okay because the attributes are updated every run, too. I could write additional logic to make this convergent, but I&rsquo;m okay with the behavior. The <code>subscribes</code> ensures that as soon as the template is written, the node object is updated to remove the attributes. Otherwise, this happens next after the <code>dd-agent</code> recipe.</p>

<p>```ruby
ruby_block &lsquo;smash-datadog-auth-attributes&rsquo; do
  block do</p>

<pre><code>node.rm('datadog', 'api_key')
node.rm('datadog', 'application_key')
</code></pre>

<p>  end
  subscribes :create, &lsquo;template[/etc/dd-agent/datadog.conf]&rsquo;, :immediately
end
```</p>

<p>Let&rsquo;s see this in action:</p>

<p>```
managed-node$ chef-client
&hellip;
Recipe: housepub-datadog::default
  * ruby_block[smash-datadog-auth-attributes] action run</p>

<pre><code>- execute the ruby block smash-datadog-auth-attributes
</code></pre>

<p>&hellip;
workstation% knife node show managed-node -a datadog.api_key -a datadog.application_key
managed-node:
  datadog.api_key:
  datadog.application_key:
```</p>

<p><strong>Bonus quick tip!</strong> <code>knife node show</code> can take the <code>-a</code> option multiple times to display more attributes. I just discovered this in writing this post, and I don&rsquo;t know when it was added. For sure in Chef 12.0.3, so you should just upgrade anyway ;).</p>

<p><em>Update</em> This <a href="https://github.com/opscode/chef/commit/4133160972a9972a9a062579504faa40eaa4c8db">feature was added</a> by <a href="https://twitter.com/RanjibDey">Awesome Chef Ranjib Dey</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chef 12: Fix Untrusted Self Sign Certs]]></title>
    <link href="http://jtimberman.housepub.org/blog/2014/12/11/chef-12-fix-untrusted-self-sign-certs/"/>
    <updated>2014-12-11T13:42:41-07:00</updated>
    <id>http://jtimberman.housepub.org/blog/2014/12/11/chef-12-fix-untrusted-self-sign-certs</id>
    <content type="html"><![CDATA[<p>Scenario: You&rsquo;ve started up a brand new Chef Server using version 12, and you have installed Chef 12 on your local system. You log into the Management Console to create a user and organization (or do this with the command-line <code>chef-server-ctl</code> commands), and you&rsquo;re ready to rock with this knife.rb:</p>

<p><code>ruby
node_name                'jtimberman'
client_key               'jtimberman.pem'
validation_client_name   'tester-validator'
validation_key           'tester-validator.pem'
chef_server_url          'https://chef-server.example.com/organizations/tester'
</code></p>

<p>However, when you try to check things out with knife:</p>

<p><code>
% knife client list
ERROR: SSL Validation failure connecting to host: chef-server.example.com - SSL_connect returned=1 errno=0 state=SSLv3 read server certificate B: certificate verify failed
ERROR: OpenSSL::SSL::SSLError: SSL_connect returned=1 errno=0 state=SSLv3 read server certificate B: certificate verify failed
</code></p>

<p>This is because Chef client 12 has SSL verification enabled by default for all requests. Since the certificate generated by the Chef Server 12 installation is self-signed, there isn&rsquo;t a signing CA that can be verified, and this fails. Never fear intrepid user, for you can get the SSL certificate from the server and store it as a &ldquo;trusted&rdquo; certificate. To find out how, use <code>knife ssl check</code>.</p>

<p>```
Connecting to host chef-server.example.com:443
ERROR: The SSL certificate of chef-server.example.com could not be verified
Certificate issuer data: /C=US/ST=WA/L=Seattle/O=YouCorp/OU=Operations/CN=chef-server.example.com/emailAddress=<a href="&#x6d;&#97;&#x69;&#x6c;&#x74;&#x6f;&#58;&#x79;&#111;&#x75;&#64;&#x65;&#x78;&#x61;&#109;&#x70;&#108;&#101;&#x2e;&#99;&#111;&#109;">&#121;&#111;&#x75;&#64;&#101;&#120;&#97;&#x6d;&#x70;&#x6c;&#x65;&#x2e;&#99;&#111;&#109;</a></p>

<p>Configuration Info:</p>

<p>OpenSSL Configuration:
* Version: OpenSSL 1.0.1j 15 Oct 2014
* Certificate file: /opt/chefdk/embedded/ssl/cert.pem
* Certificate directory: /opt/chefdk/embedded/ssl/certs
Chef SSL Configuration:
* ssl_ca_path: nil
* ssl_ca_file: nil
* trusted_certs_dir: &ldquo;/Users/jtimberman/Downloads/chef-repo/.chef/trusted_certs&rdquo;</p>

<p>TO FIX THIS ERROR:</p>

<p>If the server you are connecting to uses a self-signed certificate, you must
configure chef to trust that server&rsquo;s certificate.</p>

<p>By default, the certificate is stored in the following location on the host
where your chef-server runs:</p>

<p>  /var/opt/chef-server/nginx/ca/SERVER_HOSTNAME.crt</p>

<p>Copy that file to your trusted_certs_dir (currently: /Users/jtimberman/Downloads/chef-repo/.chef/trusted_certs)
using SSH/SCP or some other secure method, then re-run this command to confirm
that the server&rsquo;s certificate is now trusted.
```</p>

<p>(note, <a href="https://github.com/opscode/chef/issues/2604">this chef-server location is incorrect</a>, it&rsquo;s <code>/var/opt/opscode</code>)</p>

<p>There is a <code>fetch</code> plugin for <code>knife</code> too. Let&rsquo;s download the certificate to the automatically preconfigured trusted certificate location mentioned in the output above.</p>

<p>```
% knife ssl fetch
WARNING: Certificates from chef-server.example.com will be fetched and placed in your trusted_cert
directory (/Users/jtimberman/Downloads/chef-repo/.chef/trusted_certs).</p>

<p>Knife has no means to verify these are the correct certificates. You should
verify the authenticity of these certificates after downloading.</p>

<p>Adding certificate for chef-server.example.com in /Users/jtimberman/Downloads/chef-repo/.chef/trusted_certs/chef-server.example.com.crt
```</p>

<p>The certificate should be verified that what was downloaded is in fact the same as the certificate on the Chef Server. For example, I compared SHA256 checksums:</p>

<p><code>
% ssh ubuntu@chef-server.example.com sudo sha256sum /var/opt/opscode/nginx/ca/chef-server.example.com.crt
043728b55144861ed43a426c67addca357a5889158886aee50685cf1422b5ebf  /var/opt/opscode/nginx/ca/chef-server.example.com.crt
% gsha256sum .chef/trusted_certs/chef-server.example.com.crt
043728b55144861ed43a426c67addca357a5889158886aee50685cf1422b5ebf  .chef/trusted_certs/chef-server.example.com.crt
</code></p>

<p>Now check knife client list again.</p>

<p><code>
% knife client list
tester-validator
</code></p>

<p>Victory!</p>

<p>Now, we need to get the ceritficate out to every node in the infrastructure in its <code>trusted_certs_dir</code> &ndash; by default this is <code>/etc/chef/trusted_certs</code>. The most simple way to do this is to use <code>knife ssh</code> to run knife on the target nodes.</p>

<p><code>
% knife ssh 'name:*' 'sudo knife ssl fetch -c /etc/chef/client.rb'
node-output.example.com WARNING: Certificates from chef-server-example.com will be fetched and placed in your trusted_cert
node-output.example.com directory (/etc/chef/trusted_certs).
node-output.example.com
node-output.example.com Knife has no means to verify these are the correct certificates. You should
node-output.example.com verify the authenticity of these certificates after downloading.
node-output.example.com
node-output.example.com Adding certificate for chef-server.example.com in /etc/chef/trusted_certs/chef-server.example.com.crt
</code></p>

<p>The output will be interleaved for all the nodes returned by <code>knife ssh</code>. Of course, we should verify the SHA256 checksums like before, which can be done again with <code>knife ssh</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflecting on Six Years with Chef]]></title>
    <link href="http://jtimberman.housepub.org/blog/2014/10/07/reflecting-on-six-years-with-chef/"/>
    <updated>2014-10-07T11:36:43-06:00</updated>
    <id>http://jtimberman.housepub.org/blog/2014/10/07/reflecting-on-six-years-with-chef</id>
    <content type="html"><![CDATA[<p>It actually started a bit over seven years ago. I saw the writing on the wall at IBM; my job was soon to be outsourced. I found an open position with the SANS institute, accepted an offer there, and was due to start work in a couple of weeks. Around the same time, my friends Adam Jacob and Nathan Haneysmith had started HJK Solutions. They invited me to join them then, but it wasn&rsquo;t the right time for me. Adam told me that at SANS I should at least use the <a href="https://puppetlabs.com">automation</a> <a href="http://capistranorb.com/">tools</a> and general <a href="http://infrastructures.org">infrastructure management model</a> they planned to use. It turned out this was sage advice, for a number of reasons.</p>

<p>Around April, 2008, Adam told me he was working on &ldquo;Chef,&rdquo; a Ruby based configuration management and system integration framework. I was excited about its potential, and a few months later on July 2, 2008, I started with HJK Solutions as a Linux system administration consultant. I got familiar with HJK&rsquo;s puppet-based stack, and ancillary Ruby tools like <a href="https://github.com/adamhjk/iclassify/wiki">iClassify</a> while working on their customer infrastructures over the coming months. After Opscode was founded and we released Chef 0.5, my primary focus was porting HJK&rsquo;s puppet modules to <a href="https://github.com/opscode/cookbooks">chef cookbooks</a>.</p>

<h2>opscode/cookbooks</h2>

<p>Adam had started the repository to give new users a place to begin using Chef with full working examples. I continued their development, and had the opportunity to solve hard problems of integration web application stacks with them. There were three important reasons for the repository to exist:</p>

<ol>
<li>We have a body of knowledge as a tribe, and that can be codified.</li>
<li>Infrastructure as code is real, and it <em>can</em> be reusable.</li>
<li>The best way to learn Chef is to use Chef, and I had a goal to know Chef well enough to teach it to new users and companies.</li>
</ol>


<p>The development of general purpose cookbooks ends up being harder than any of us really imagined, I think. Every platform is different, so not only did I have to learn Chef, I had to learn how different platforms behave for common (and uncommon) pieces of software in web operations stacks. Over the years of managing these cookbooks, I learned a lot about how the community was developing workflows for using Chef, and how they differed from our opinions. I learned also learned how to manage and contribute to open source projects at a rather large scale, and how to have compassion and empathy for new or frustrated users.</p>

<h2>Training and Services</h2>

<p>In my time at CHEF, nee Opscode, I&rsquo;ve had several job role changes. After several months of working on cookbooks, I added package and release management (<a href="http://lists.opscode.com/sympa/arc/chef/2014-11/msg00015.html">RIP, apt.opscode.com</a>) to my repertoire. I then switched to technical evangelism and training. With mentorship from <a href="http://twitter.com/botchagalupe">John Willis</a>, I drafted the initial version of <a href="https://www.getchef.com/blog/2010/07/13/open-source-chef-training-open-training/">Chef Fundamentals</a>, and delivered our inaugural training class in Seattle.</p>

<p>I worked with the team John built to deliver training, speak at conferences, and work directly with customers to help make them successful with Chef. Eventually, John left the company to <a href="http://www.enstratius.com/news-events/press-releases/john-willis-announcement">build an awesome team</a> at <a href="http://www.enstratius.com/home">Enstratius</a>. I took on the role of Director of the team, but eventually I discovered that the <a href="http://fractio.nl/2014/09/19/not-a-promotion-a-career-change/">management track</a> was not the future of my career.</p>

<h2>Open Source and Community</h2>

<p>I came back to working on the cookbooks, which I had previously <a href="https://github.com/opscode-cookbooks">split into separate repositories</a>. I was also working more directly in the community, doing public training classes only (our consulting team did private/onsite classes), participating in our <a href="https://botbot.me/freenode/chef">IRC channels</a> and mailing <a href="http://lists.opscode.com">lists</a>. We had some organization churn, and I was moved around between four different managers, eventually reporting to <a href="https://twitter.com/nathenharvey">the inimitable Nathen Harvey</a>.</p>

<p>During one of our 1-1 discussions, he said, &ldquo;You know, Joshua. You write a lot of cookbooks to automate infrastructure. But you haven&rsquo;t actually worked on any infrastructure in years. You should do something about that.&rdquo;</p>

<p>Around that time, there was a &ldquo;senior system administrator&rdquo; job posting on our very own careers site. I talked to our VP of Operations, and after a brief transition period, moved completely over to the ops team. I was able to bring with me the great practices from the community for developing cookbooks: testing with <a href="http://sethvargo.github.io/chefspec/">chefspec</a> and <a href="http://serverspec.org/">serverspec</a>, code consistency with <a href="">rubocop</a> and <a href="http://foodcritic.io">foodcritic</a>, and wrapping it all up with <a href="http://kitchen.ci">test kitchen</a>.</p>

<h2>The Future</h2>

<p>I&rsquo;ve had the privilege to do work that I love, which is automating hard problems using Chef. I&rsquo;ve also had the privilege of being part of the web operations, infrastructure as code, devops, and Chef communities over the past six years. I&rsquo;ve been to all four Chef summits, and all three ChefConfs. A thing I&rsquo;ve noticed over the years is that many conversations keep coming up at the summits and ChefConf. Fresh on my mind because the last summit was so recent is the topic of cookbook reusability. See, during the time that I managed opscode/cookbooks, I eventually saw the point people in the community were making about these being real software repositories that need to be managed like other complex software projects. We split up the repository into individual repositories per cookbook. We started adding test coverage, and conforming to consistency via syntax and style lint checking. That didn&rsquo;t make cookboks more reusable, but it lowered the barrier of contribution, which in turn made them more reusable as more use cases could be covered. I got to be a part of that evolution, and it&rsquo;s been awesome.</p>

<p>While using Chef is one of my favorite technical things to do, I have come to the conclusion that based on my experience the best thing I can do is be a facilitator of stronger technical discipline with regard to using Chef. Primarily, this means improving how CHEF uses Chef to build Chef for our community and customers. We&rsquo;re already really good at using Chef to build Chef (the product), and run Hosted Chef (the service). However, awesome tools from the community such as Test Kitchen, Berkshelf, ChefSpec, and Foodcritic did not exist when we started out. Between new, awesome tools, and growing our organization with new awesome people, we need to improve on getting our team members up to speed on the process and workflow that helps us deliver higher quality products.</p>

<p>That is why I&rsquo;m moving into a new role at CHEF. The sixth year marks as good a time as any to make a change, and I&rsquo;m no stranger to that. I&rsquo;m joining a team of quality advocacy led by Joseph Smith, as part of Jez Humble&rsquo;s &ldquo;Office of Continuous Improvement and Velocity.&rdquo; In this new role, I will focus on improving our overall technical excellence so we can deliver better products to our community and customers, and so we can have awesome use cases and examples for managing Chef Server and its add-ons at scale.</p>

<p>My first short term goal in this new role is a workstation automation cookbook that can be used and extended by our internal teams for ensuring everyone has a consistent set of tools to work on the product. This will be made an open source project that the community can use and extend as well. We&rsquo;ll have more information about this as it becomes &ldquo;a thing.&rdquo;</p>

<p>Next, I want to improve how we work on incidents. We&rsquo;ve had sporadic blog posts about issues in Hosted Chef and Supermarket, and I&rsquo;d like to see this get better.</p>

<p>I&rsquo;m also interested in managing Chef Server 12 clusters, including all the add-ons. Recently I worked on the <a href="https://github.com/opscode-cookbooks/chef-server-cluster">chef-server-cluster</a> cookbook, which will become the way CHEF deploys and manages Hosted Chef using the version 12 packages. Part of the earliest days of opscode/cookbooks, I maintained cookbooks to setup the open source Chef Server. Long time users may remember the &ldquo;chef solo bootstrap&rdquo; stack. Since then, CHEF has continued to iterate on that idea, and the &ldquo;ctl&rdquo; management commands largely use chef-solo under the hood. The new cookbook combines and wraps up manual processes and the &ldquo;ctl&rdquo; commands to enable us, our community, and our customers to build scalable Chef Server clusters using the omnibus packages. The cookbook uses chef-provisioning to do much of the heavy lifting.</p>

<p>It should be easy for organizations to be successful with Chef. That includes CHEF! My goal in my new position is to fuel the love of Chef internally and externally, whip up awesome, and stir up more delight. I also look forward to seeing what our community and customers do with Chef in their organizations.</p>

<h2>Thank you</h2>

<p>I&rsquo;d like to thank the friends and mentors I&rsquo;ve had along this journey. You&rsquo;re all important, and we&rsquo;ve shared some good times and code, and sometimes hugs. It&rsquo;s been amazing to see so many people become successful with Chef.</p>

<p>Above all, I&rsquo;d like to thank Adam Jacob: for the opportunity to join in this ride, for inspiration to be a better system administrator and operations professional, for mentorship along the way, and for writing Chef in the first place. Cheers, my friend.</p>

<p>Here&rsquo;s to many more years of whipping up awesome!</p>
]]></content>
  </entry>
  
</feed>
