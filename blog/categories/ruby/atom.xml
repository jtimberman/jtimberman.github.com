<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | jtimberman's Code Blog]]></title>
  <link href="http://jtimberman.housepub.org/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://jtimberman.housepub.org/"/>
  <updated>2014-12-25T14:18:11-07:00</updated>
  <id>http://jtimberman.housepub.org/</id>
  <author>
    <name><![CDATA[Joshua Timberman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ChefDK and Ruby]]></title>
    <link href="http://jtimberman.housepub.org/blog/2014/04/30/chefdk-and-ruby/"/>
    <updated>2014-04-30T22:32:18-06:00</updated>
    <id>http://jtimberman.housepub.org/blog/2014/04/30/chefdk-and-ruby</id>
    <content type="html"><![CDATA[<p>Recently, Chef <a href="http://www.getchef.com/blog/2014/04/15/chef-development-kit/">released ChefDK</a>, the &ldquo;Chef Development Kit.&rdquo; This is a self-contained package of everything required to run Chef, work with Chef cookbooks, and includes the best of breed community tools, test frameworks, and other utility programs that are commonly used when working with Chef in infrastructure as code. <a href="http://www.getchef.com/blog/2014/04/29/chefdk-0-1-0-released/">ChefDK version 0.1.0 was released last week</a>. A new feature mentioned in the <a href="https://github.com/opscode/chef-dk/blob/master/README.md#using-chefdk-as-your-primary-development-environment">README.md</a> is very important, in my opinion.</p>

<p><strong>Using ChefDK as your primary development environment</strong></p>

<p>What does that mean?</p>

<p>It means that if the only reason you have Ruby installed on your local system is to do Chef development or otherwise work with Chef, <em>you no longer have to maintain a separate Ruby installation</em>. That means you won&rsquo;t need any of these:</p>

<ul>
<li><a href="https://github.com/sstephenson/rbenv">rbenv</a></li>
<li><a href="http://rvm.io">rvm</a></li>
<li><a href="https://github.com/postmodern/chruby">chruby</a> (*note)</li>
<li>&ldquo;system ruby&rdquo; (e.g., OS X&rsquo;s included /usr/bin/ruby, or the <code>ruby</code> package from your Linux distro)</li>
<li><a href="https://github.com/poise/poise-ruby">poise ruby</a>)</li>
</ul>


<p>(*note: You can optionally use chruby with ChefDK if it&rsquo;s part of your workflow and you have other Rubies installed.)</p>

<p>Do not misunderstand me: These are all extremely good solutions for getting and using Ruby on your system. They definitely have their place if you do other Ruby development, such as <a href="http://www.sinatrarb.com/">web applications</a>. This is especially true if you have to work with multiple versions of Ruby. However, if you&rsquo;re like me and mainly use Ruby for Chef, then ChefDK has you covered.</p>

<p>In this post, I will describe how I have set up my system with ChefDK, and use its embedded Ruby by default.</p>

<h2>Getting Started</h2>

<p>Download ChefDK from the <a href="http://www.getchef.com/downloads/chef-dk/">downloads page</a>. At the time of this blog post, the available builds are limited to OS X and Linux (Debian/Ubuntu or RHEL), but Chef is <a href="http://www.getchef.com/blog/2014/05/06/chefdk-for-windows-progress-update/">working on Windows packages</a>.</p>

<p>For example, here&rsquo;s what I did on my Ubuntu 14.04 system:</p>

<p><code>
wget https://opscode-omnibus-packages.s3.amazonaws.com/ubuntu/13.10/x86_64/chefdk_0.1.0-1_amd64.deb
sudo dpkg -i /tmp/chefdk_0.1.0-1_amd64.deb
</code></p>

<p>OS X users will be happy to know that the download is a .DMG, which includes a standard OS X .pkg (complete with developer signing). Simply install it like many other products on OS X.</p>

<p>For either Linux or OS X, in <a href="https://github.com/opscode/omnibus-ruby/">omnibus</a> fashion, the post-installation creates several symbolic links in <code>/usr/bin</code> for tools that are included in ChefDK:</p>

<p><code>
% ls -l /usr/bin | grep chefdk
lrwxrwxrwx 1 root root 21 Apr 30 22:13 berks -&gt; /opt/chefdk/bin/berks
lrwxrwxrwx 1 root root 20 Apr 30 22:13 chef -&gt; /opt/chefdk/bin/chef
lrwxrwxrwx 1 root root 26 Apr 30 22:13 chef-apply -&gt; /opt/chefdk/bin/chef-apply
lrwxrwxrwx 1 root root 27 Apr 30 22:13 chef-client -&gt; /opt/chefdk/bin/chef-client
lrwxrwxrwx 1 root root 26 Apr 30 22:13 chef-shell -&gt; /opt/chefdk/bin/chef-shell
lrwxrwxrwx 1 root root 25 Apr 30 22:13 chef-solo -&gt; /opt/chefdk/bin/chef-solo
lrwxrwxrwx 1 root root 25 Apr 30 22:13 chef-zero -&gt; /opt/chefdk/bin/chef-zero
lrwxrwxrwx 1 root root 23 Apr 30 22:13 fauxhai -&gt; /opt/chefdk/bin/fauxhai
lrwxrwxrwx 1 root root 26 Apr 30 22:13 foodcritic -&gt; /opt/chefdk/bin/foodcritic
lrwxrwxrwx 1 root root 23 Apr 30 22:13 kitchen -&gt; /opt/chefdk/bin/kitchen
lrwxrwxrwx 1 root root 21 Apr 30 22:13 knife -&gt; /opt/chefdk/bin/knife
lrwxrwxrwx 1 root root 20 Apr 30 22:13 ohai -&gt; /opt/chefdk/bin/ohai
lrwxrwxrwx 1 root root 23 Apr 30 22:13 rubocop -&gt; /opt/chefdk/bin/rubocop
lrwxrwxrwx 1 root root 20 Apr 30 22:13 shef -&gt; /opt/chefdk/bin/shef
lrwxrwxrwx 1 root root 22 Apr 30 22:13 strain -&gt; /opt/chefdk/bin/strain
lrwxrwxrwx 1 root root 24 Apr 30 22:13 strainer -&gt; /opt/chefdk/bin/strainer
</code></p>

<p>These should cover the 80% use case of ChefDK: using the various Chef and Chef Community tools so users can follow their favorite workflow, without shaving the yak of managing a Ruby environment.</p>

<p>But, as I noted, and the thesis of this post, is that one could use this Ruby environment included in ChefDK as their own! So where is that?</p>

<h2>ChefDK&rsquo;s Ruby</h2>

<p>Tucked away in every &ldquo;omnibus&rdquo; package is a directory of &ldquo;embedded&rdquo; software &ndash; the things that were required to meet the end goal. In the case of Chef or ChefDK, this is Ruby, openssl, zlib, libpng, and so on. This is a fully contained directory tree, complete with lib, share, and yes indeed, bin.</p>

<p><code>
% ls /opt/chefdk/embedded/bin
(there's a bunch of commands here, trust me)
</code></p>

<p>Of particular note are <code>/opt/chefdk/embedded/bin/ruby</code> and <code>/opt/chefdk/embedded/bin/gem</code>.</p>

<p>To use ChefDK&rsquo;s Ruby as default, simply edit the <code>$PATH</code>.</p>

<p><code>
export PATH="/opt/chefdk/embedded/bin:${HOME}/.chefdk/gem/ruby/2.1.0/bin:$PATH"
</code></p>

<p>Add that, or its equivalent, to a login shell profile/dotrc file, and rejoice. Here&rsquo;s what I have now:</p>

<p>```
$ which ruby
/opt/chefdk/embedded/bin/ruby
$ which gem
/opt/chefdk/embedded/bin/gem
$ ruby &mdash;version
ruby 2.1.1p76 (2014-02-24 revision 45161) [x86_64-linux]
$ gem &mdash;version
2.2.1
$ gem env
RubyGems Environment:
  &ndash; RUBYGEMS VERSION: 2.2.1
  &ndash; RUBY VERSION: 2.1.1 (2014-02-24 patchlevel 76) [x86_64-linux]
  &ndash; INSTALLATION DIRECTORY: /opt/chefdk/embedded/lib/ruby/gems/2.1.0
  &ndash; RUBY EXECUTABLE: /opt/chefdk/embedded/bin/ruby
  &ndash; EXECUTABLE DIRECTORY: /opt/chefdk/embedded/bin
  &ndash; SPEC CACHE DIRECTORY: /home/ubuntu/.gem/specs
  &ndash; RUBYGEMS PLATFORMS:</p>

<pre><code>- ruby
- x86_64-linux
</code></pre>

<ul>
<li>GEM PATHS:

<ul>
<li>/opt/chefdk/embedded/lib/ruby/gems/2.1.0</li>
<li>/home/ubuntu/.chefdk/gem/ruby/2.1.0</li>
</ul>
</li>
<li>GEM CONFIGURATION:

<ul>
<li>:update_sources => true</li>
<li>:verbose => true</li>
<li>:backtrace => false</li>
<li>:bulk_threshold => 1000</li>
<li>&ldquo;install&rdquo; => &ldquo;&mdash;user&rdquo;</li>
<li>&ldquo;update&rdquo; => &ldquo;&mdash;user&rdquo;</li>
</ul>
</li>
<li>REMOTE SOURCES:

<ul>
<li><a href="https://rubygems.org/">https://rubygems.org/</a></li>
</ul>
</li>
<li>SHELL PATH:

<ul>
<li>/opt/chefdk/embedded/bin</li>
<li>/home/ubuntu/.chefdk/gem/ruby/2.1.0/bin</li>
<li>/usr/local/sbin</li>
<li>/usr/local/bin</li>
<li>/usr/sbin</li>
<li>/usr/bin</li>
<li>/sbin</li>
<li>/bin</li>
<li>/usr/games</li>
<li>/usr/local/games
```</li>
</ul>
</li>
</ul>


<p>Note that this is the current stable release of Ruby, version 2.1.1 patchlevel 76, and the {almost} latest version of RubyGems, version 2.2.1. Also note the Gem paths &ndash; the first is the embedded gems path, which is where gems installed by <code>root</code> with the <code>chef gem</code> command will go. The other is in my home directory &ndash; ChefDK is set up so that gems can be installed as a non-root user within the <code>~/.chefdk/gems</code> directory.</p>

<h2>Installing Gems</h2>

<p>Let&rsquo;s see this in action. Install a gem using the <code>gem</code> command.</p>

<p><code>
$ gem install knife-solve
Fetching: knife-solve-1.0.1.gem (100%)
Successfully installed knife-solve-1.0.1
Parsing documentation for knife-solve-1.0.1
Installing ri documentation for knife-solve-1.0.1
Done installing documentation for knife-solve after 0 seconds
1 gem installed
</code></p>

<p>And as I said, this will be installed in the home directory:</p>

<p><code>
$ gem content knife-solve
/home/ubuntu/.chefdk/gem/ruby/2.1.0/gems/knife-solve-1.0.1/LICENSE
/home/ubuntu/.chefdk/gem/ruby/2.1.0/gems/knife-solve-1.0.1/README.md
/home/ubuntu/.chefdk/gem/ruby/2.1.0/gems/knife-solve-1.0.1/Rakefile
/home/ubuntu/.chefdk/gem/ruby/2.1.0/gems/knife-solve-1.0.1/lib/chef/knife/solve.rb
/home/ubuntu/.chefdk/gem/ruby/2.1.0/gems/knife-solve-1.0.1/lib/knife-solve.rb
/home/ubuntu/.chefdk/gem/ruby/2.1.0/gems/knife-solve-1.0.1/lib/knife-solve/version.rb
</code></p>

<h2>Using Bundler</h2>

<p>ChefDK also includes <a href="http://bundler.io/">bundler</a>. As a &ldquo;non-Chef, Ruby use case&rdquo;, I installed octopress for this blog.</p>

<p><code>
% bundle install --path vendor --binstubs
Fetching gem metadata from https://rubygems.org/.......
Fetching additional metadata from https://rubygems.org/..
Installing rake (0.9.6)
Installing RedCloth (4.2.9)
Installing chunky_png (1.2.9)
Installing fast-stemmer (1.0.2)
Installing classifier (1.3.3)
Installing fssm (0.2.10)
Installing sass (3.2.12)
Installing compass (0.12.2)
Installing directory_watcher (1.4.1)
Installing haml (3.1.8)
Installing kramdown (0.14.2)
Installing liquid (2.3.0)
Installing maruku (0.7.0)
Installing posix-spawn (0.3.6)
Installing yajl-ruby (1.1.0)
Installing pygments.rb (0.3.7)
Installing jekyll (0.12.1)
Installing rack (1.5.2)
Installing rack-protection (1.5.0)
Installing rb-fsevent (0.9.3)
Installing rdiscount (2.0.7.3)
Installing rubypants (0.2.0)
Installing sass-globbing (1.0.0)
Installing tilt (1.4.1)
Installing sinatra (1.4.3)
Installing stringex (1.4.0)
Using bundler (1.5.2)
Updating files in vendor/cache
  * classifier-1.3.3.gem
  * fssm-0.2.10.gem
  * sass-3.2.12.gem
  * compass-0.12.2.gem
  * directory_watcher-1.4.1.gem
  * haml-3.1.8.gem
  * kramdown-0.14.2.gem
  * liquid-2.3.0.gem
  * maruku-0.7.0.gem
  * posix-spawn-0.3.6.gem
  * yajl-ruby-1.1.0.gem
  * pygments.rb-0.3.7.gem
  * jekyll-0.12.1.gem
  * rack-1.5.2.gem
  * rack-protection-1.5.0.gem
  * rb-fsevent-0.9.3.gem
  * rdiscount-2.0.7.3.gem
  * rubypants-0.2.0.gem
  * sass-globbing-1.0.0.gem
  * tilt-1.4.1.gem
  * sinatra-1.4.3.gem
  * stringex-1.4.0.gem
Your bundle is complete!
It was installed into ./vendor
</code></p>

<p>Then I can use for example the rake task to preview things while writing this post.</p>

<p><code>
$ ./bin/rake preview
Starting to watch source with Jekyll and Compass. Starting Rack on port 4000
directory source/stylesheets/
   create source/stylesheets/screen.css
[2014-05-07 21:46:35] INFO  WEBrick 1.3.1
[2014-05-07 21:46:35] INFO  ruby 2.1.1 (2014-02-24) [x86_64-linux]
[2014-05-07 21:46:35] INFO  WEBrick::HTTPServer#start: pid=10815 port=4000
</code></p>

<h2>Conclusion</h2>

<p>I&rsquo;ve used Chef before it was even released. As the project has evolved, and as the Ruby community around it has established new best practices installing and maintaining Ruby development environments, I&rsquo;ve followed along. I&rsquo;ve used all the version managers listed above. I&rsquo;ve spent untold hours getting the right set of gems installed just to have to upgrade everything again and debug my workstation. I&rsquo;ve written blog posts, <a href="http://wiki.opscode.com">wiki</a> pages, and helped countless users do this on their own systems.</p>

<p>Now, we have an all-in-one environment that provides a great solution. Give ChefDK a whirl on your workstation &ndash; I think you&rsquo;ll like it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chef and Net::SSH Dependency Broken]]></title>
    <link href="http://jtimberman.housepub.org/blog/2013/02/06/chef-and-net-ssh-dependency-broken/"/>
    <updated>2013-02-06T10:34:00-07:00</updated>
    <id>http://jtimberman.housepub.org/blog/2013/02/06/chef-and-net-ssh-dependency-broken</id>
    <content type="html"><![CDATA[<p><strong>2nd UPDATE</strong>
<a href="http://tickets.opscode.com/browse/CHEF-3835">CHEF-3835</a> was opened by
a member of the community; Chef versions 11.2.0 and 10.20.0 have been
released by Opscode to resolve the issue.</p>

<p><strong>UPDATE</strong> Opscode is working on getting a new release of the Chef gem
  with updated version constraints.</p>

<h1>What Happened?</h1>

<p>Earlier today (February 6, 2013), a new version of the various net-ssh
RubyGems were published. This includes:</p>

<ul>
<li>net-ssh 2.6.4</li>
<li>net-ssh-multi 1.1.1</li>
<li>net-ssh-gateway 1.1.1</li>
</ul>


<p>Chef&rsquo;s dependencies have a pessimistic version constraint (<code>~&gt;</code>) on
net-ssh 2.2.2.</p>

<h1>What&rsquo;s the Problem?</h1>

<p>So what is the problem?</p>

<p>It appears to lie with net-ssh-gateway. The version of net-ssh-gateway
went from 1.1.0 (released in April 2011), to 1.1.1. It depends on
net-ssh. In net-ssh-gateway 1.1.0, the net-ssh version constraint was
<code>&gt;= 1.99.1</code>, which is fine with Chef&rsquo;s constraint against <code>~&gt; 2.2.2</code>.
However, in net-ssh-gateway 1.1.1, the net-ssh version constraint was
changed to <code>&gt;= 2.6.4</code>, which is obviously a conflict with Chef&rsquo;s
constraint.</p>

<h1>What&rsquo;s the Solution?</h1>

<p>So, how can we fix it?</p>

<p>One solution is to use the Opscode Omnibus Package for Chef. This
isn&rsquo;t a solution for everyone, of course, but it does include and
contain all the dependencies. This also doesn&rsquo;t help if one wishes to
install another gem that depends on Chef under the &ldquo;Omnibus&rdquo; Ruby
environment along with Chef, because the conflict will be found. For
example, to use the minitest-chef-handler gem for running
minitest-chef tests.</p>

<p><code>vagrant@ubuntu-12-04:~$ /opt/chef/embedded/bin/gem install
minitest-chef-handler ERROR: While executing gem ...
(Gem::DependencyError) Unable to resolve dependencies: net-ssh-gateway
requires net-ssh (&gt;= 2.6.4)</code></p>

<p>Another solution is to relax / modify the constraint in Chef. This may
be okay, but as of <em>right now</em> we don&rsquo;t know if this will affect
anything in the way that Chef uses net-ssh. We have tickets related to
net-ssh version constraints in Chef:</p>

<ul>
<li><a href="http://tickets.opscode.com/browse/CHEF-2977">http://tickets.opscode.com/browse/CHEF-2977</a></li>
<li><a href="http://tickets.opscode.com/browse/CHEF-3156">http://tickets.opscode.com/browse/CHEF-3156</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Knife Plugins]]></title>
    <link href="http://jtimberman.housepub.org/blog/2012/11/29/some-knife-plugins/"/>
    <updated>2012-11-29T19:11:00-07:00</updated>
    <id>http://jtimberman.housepub.org/blog/2012/11/29/some-knife-plugins</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve shared my <code>~/.chef/plugins/knife</code> directory as a Git repository
on <a href="https://github.com/jtimberman/chef-plugins-knife">GitHub</a>. There&rsquo;s
only a few, but I hope you find them useful. They are licensed under
the Apache 2.0 software license, but please only use them for awesome.</p>

<h2>gem</h2>

<p>This plugin will install a gem into the Ruby environment that knife is
executing in. This is handy if you want to install knife plugins that
are gems.</p>

<p>If you have Ruby and Chef/Knife installed in an area where your user
can write:</p>

<p><code>
knife gem install knife-config
</code></p>

<p>If you&rsquo;re using an Omnibus package install of Chef, or otherwise
require root access to install:</p>

<p><code>
knife gem install knife-config
</code></p>

<p><strong>Note</strong> If you&rsquo;re trying to install a gem for <em>Chef</em> to use, you
  should put it in a <code>chef_gem</code> resource in a recipe.</p>

<h2>metadata</h2>

<p>This plugin prints out information from a cookbook&rsquo;s metadata. It
currently only works with <code>metadata.rb</code> files, and not <code>metadata.json</code>
files.</p>

<p>In a cookbook&rsquo;s directory, display the cookbook&rsquo;s dependencies:</p>

<p><code>
knife metadata dependencies
</code></p>

<p>Show the dependencies and supported platforms:</p>

<p><code>
knife metadata dependencies platforms
</code></p>

<p>Use the <code>-P</code> option to pass a path to a cookbook.</p>

<p><code>
knife metadata name dependencies -P ~/.berkshelf/cookbooks/rabbitmq-1.6.4
</code></p>

<h2>nukular</h2>

<p><a href="http://jtimberman.housepub.org/blog/2012/02/15/testing-with-fission/">I wrote on this blog about this plugin awhile ago</a>.</p>

<p>This plugin cleans up after running <code>chef-client</code> on a VMware Fusion machine.</p>

<p><code>
knife nukular guineapig base guineapig.int.example.com
</code></p>

<h2>plugin_create</h2>

<p>This creates a plugin scaffolding in <code>~/.chef/plugins/knife</code>. It will
join underscored words as CamelCaseClasses.</p>

<p>For example,</p>

<p><code>
knife plugin create awesometown
</code></p>

<p>Creates a plugin that is class <code>Awesometown</code> that can be executed with:</p>

<p><code>
knife awesometown
</code></p>

<p>Whereas this,</p>

<p><code>
knife plugin create awesome_town
</code></p>

<p>Creates a plugin that is class <code>AwesomeTown</code> that can be executed
with:</p>

<p><code>
knife plugin awesome town
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Chef 10 Server on Ubuntu With Ruby 1.9]]></title>
    <link href="http://jtimberman.housepub.org/blog/2012/11/17/install-chef-10-server-on-ubuntu-with-ruby-1-dot-9/"/>
    <updated>2012-11-17T11:27:00-07:00</updated>
    <id>http://jtimberman.housepub.org/blog/2012/11/17/install-chef-10-server-on-ubuntu-with-ruby-1-dot-9</id>
    <content type="html"><![CDATA[<p>I wanted to capture the minimal steps required to install a Chef
version 10 Server using RubyGems under Ruby 1.9 (1.9.3-p0) on
Ubuntu 12.04.</p>

<p>Similar steps are also
<a href="http://wiki.opscode.com/display/chef/Installing+Chef+Server+using+Chef+Solo">available on the Chef wiki</a>,
too.</p>

<p>This does not include any customization to the
installation and takes everything as default. This will all change
when
<a href="http://wiki.opscode.com/display/chef/Chef+11+Server+Preview">Chef 11 is released</a>.</p>

<p>These steps were performed on a default server install of Ubuntu
12.04.</p>

<p>Update apt sources.</p>

<p><code>
sudo apt-get update
</code></p>

<p>Install required packages.</p>

<p><code>
sudo apt-get install ruby1.9.1-full build-essential wget ssl-cert curl
</code></p>

<p>Update RubyGems.</p>

<p><code>
REALLY_GEM_UPDATE_SYSTEM=yes sudo -E gem update --system
</code></p>

<p>Install Chef.</p>

<p><code>
sudo gem install chef --no-ri --no-rdoc
</code></p>

<p>Configure chef-solo.</p>

<p><code>
sudo mkdir -p /etc/chef
sudo vi /etc/chef/solo.rb
</code></p>

<p>The config file should look like this:</p>

<p><code>ruby
file_cache_path "/tmp/chef-solo"
cookbook_path "/tmp/chef-solo/cookbooks"
recipe_url "http://s3.amazonaws.com/chef-solo/bootstrap-latest.tar.gz"
</code></p>

<p>Run chef-solo with the <code>chef-server::rubygems-install</code> recipe.</p>

<p><code>
sudo chef-solo -o chef-server::rubygems-install
</code></p>

<p>The WebUI is not enabled by default. This can be done by setting an
attribute, see the <code>chef-server</code> cookbook for more information.</p>

<p>Next, create a new API client that will be used to upload cookbooks.</p>

<p><code>sh
sudo knife configure -i
</code></p>

<p>Change the <code>chef_server_url</code> to use the FQDN or IP address of the Chef
Server. Change the path for the validation key. The <code>.chef/knife.rb</code>
file should look something like this:</p>

<p><code>ruby
log_level                :info
log_location             STDOUT
node_name                'jtimberman'
client_key               '/home/jtimberman/.chef/jtimberman.pem'
validation_client_name   'chef-validator'
validation_key           '/home/jtimberman/.chef/validation.pem'
chef_server_url          'http://10.1.1.100:4000'
cache_type               'BasicFile'
cache_options( :path =&gt; '/home/jtimberman/.chef/checksums' )
</code></p>

<p>Copy the validation key (<code>/etc/chef/validation.pem</code>) to the <code>.chef</code> directory.</p>

<p><code>
sudo cp /etc/chef/validation.pem ~/.chef
</code></p>

<p>Verify that the API client and configuration file work.</p>

<p><code>
knife client list
  chef-validator
  chef-webui
  jtimberman
</code></p>

<p>The newly created API client should be listed. Mine is <code>jtimberman</code>.
Now the Chef Server is ready to use.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Changing Class Names]]></title>
    <link href="http://jtimberman.housepub.org/blog/2012/02/25/changing-class-names/"/>
    <updated>2012-02-25T09:39:00-07:00</updated>
    <id>http://jtimberman.housepub.org/blog/2012/02/25/changing-class-names</id>
    <content type="html"><![CDATA[<p>If you change a class name in your library, <em>do a major version
change</em>! You don&rsquo;t know who is using your library, even the
undocumented parts.</p>

<h2>Background</h2>

<p>Recently, we had a post on the
<a href="http://lists.opscode.com">Chef mailing list</a> that using bluepill for
the Chef Server daemon process(es) was broken. Upon further
investigation of the output from
<a href="https://gist.github.com/1847128">Chef debug output</a>, it appeared to
be an issue with
<a href="https://github.com/arya/bluepill/issues/132">Bluepill itself</a>, but
after looking into that ticket, the <a href="http://rubygems.org/gems/daemons">daemons gem</a> had made a change.</p>

<p>Out of curiosity, I was compelled to find out what the source of the
change in the daemons gem was. This lead to a yak shave, as first, I
had to look up the <a href="http://rubygems.org/gems/daemons">daemons gem</a> on
RubyGems.org to try and find the source. The author of the gem still
uses RubyForge rather than GitHub. That&rsquo;s fine, but it means I have to
do some link-spelunking to find where the <a href="http://rubyforge.org/projects/daemons">source code lives</a>.</p>

<p>Now I take a look at the change log:</p>

<pre><code>Release 1.1.8: February 7, 2012
rename to daemonization.rb to daemonize.rb (and Daemonization to Daemonize) to ensure compatibility.

Release 1.1.7: February 6, 2012
start_proc: Write out the PID file in the newly created proc to avoid race conditions.
daemonize.rb: remove to simplify licensing (replaced by daemonization.rb).

Release 1.1.6: January 18, 2012
Add the :app_name option for the "call" daemonization mode.

Release 1.1.5: December 19, 2011
Catch the case where the pidfile is empty but not deleted and restart
the app (thanks to Rich Healey)
</code></pre>

<p>I then went to the ticket tracker to find out what the source of the
changes might be. Fortunately, there was an open issue that I could
<a href="http://rubyforge.org/tracker/index.php?func=detail&amp;aid=29516&amp;group_id=524&amp;atid=2084">reference</a>.</p>

<p>My question (which I posted to the ticket) is why wouldn&rsquo;t renaming a
class cause the author to do a new major version? This way other Gems
that rely on this as a dependency could use the paranoia operator,
<code>~&gt;</code> so the broken class name wouldn&rsquo;t break usage elsewhere.</p>

<p>I&rsquo;m glad that the daemons gem author did the right thing and yanked
the broken version. Open source worked well here. The process of
finding this was a bit slower than it should have been, and I think
that the bluepill maintainers moved too quickly to &ldquo;resolve&rdquo; the
issue, rather than post their concern about the class naming. Kudos to
thuehlinger for fixing his gem, though.</p>
]]></content>
  </entry>
  
</feed>
