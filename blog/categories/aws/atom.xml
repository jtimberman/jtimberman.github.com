<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: aws | jtimberman's Code Blog]]></title>
  <link href="http://jtimberman.housepub.org/blog/categories/aws/atom.xml" rel="self"/>
  <link href="http://jtimberman.housepub.org/"/>
  <updated>2015-04-03T22:08:10-06:00</updated>
  <id>http://jtimberman.housepub.org/</id>
  <author>
    <name><![CDATA[Joshua Timberman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Managing Multiple AWS Account Credentials]]></title>
    <link href="http://jtimberman.housepub.org/blog/2013/10/19/managing-multiple-aws-account-credentials/"/>
    <updated>2013-10-19T17:55:00-06:00</updated>
    <id>http://jtimberman.housepub.org/blog/2013/10/19/managing-multiple-aws-account-credentials</id>
    <content type="html"><![CDATA[<p><strong>UPDATE</strong>: All non-default profiles must have their profile name
  start with &ldquo;profile.&rdquo; Below, this is &ldquo;profile nondefault.&rdquo; The ruby
  code is updated to reflect this.</p>

<p>In this post, I will describe my local setup for using the
<a href="http://aws.amazon.com/cli/">AWS CLI</a>, the
<a href="http://aws.amazon.com/sdkforruby/">AWS Ruby SDK</a>, and of course the
<a href="http://rubygems.org/gems/knife-ec2">Knife EC2 plugin</a>.</p>

<p>The general practice I&rsquo;ve used is to set the appropriate shell
environment variables that are used by default by these tools (and the
&ldquo;legacy&rdquo; ec2-api-tools, the java-based CLI). Over time and between
tools, there have been several environment variables set:</p>

<p><code>sh
AWS_ACCESS_KEY_ID
AWS_SECRET_ACCESS_KEY
AWS_DEFAULT_REGION
AWS_SSH_KEY
AMAZON_ACCESS_KEY_ID
AMAZON_SECRET_ACCESS_KEY
AWS_ACCESS_KEY
AWS_SECRET_KEY
</code></p>

<p>There is now a config file (ini-flavored) that can be used to set
credentials, <code>~/.aws/config</code>. Each ini section in this file is a
different account&rsquo;s credentials. For example:</p>

<p><code>
[default]
aws_access_key_id=MY_DEFAULT_KEY
aws_secret_access_key=MY_DEFAULT_SECRET
region=us-east-1
[profile nondefault]
aws_access_key_id=NOT_MY_DEFAULT_KEY
aws_secret_access_key=NOT_MY_DEFAULT_SECRET
region=us-east-1
</code></p>

<p>I have two accounts listed here. Obviously, the actual keys are not
listed :). I source a shell script that sets the environment variables
with these values. Before, I maintained a separate script for each
account. Now, I install the <code>inifile</code>
<a href="http://rubygems.org/gems/inifile">RubyGem</a> and use a one-liner for
each of the keys.</p>

<p><code>sh
export AWS_ACCESS_KEY_ID=`ruby -rinifile -e "puts IniFile.load(File.join(File.expand_path('~'), '.aws', 'config'))['default']['aws_access_key_id']"`
export AWS_SECRET_ACCESS_KEY=`ruby -rinifile -e "puts IniFile.load(File.join(File.expand_path('~'), '.aws', 'config'))['default']['aws_secret_access_key']"`
export AWS_DEFAULT_REGION="us-east-1"
export AWS_SSH_KEY='jtimberman'
</code></p>

<p>This will load the specified file, <code>~/.aws/config</code> with the
<code>IniFile.load</code> method, retrieving the <code>default</code> section&rsquo;s
<code>aws_access_key_id</code> value. Then repeat the same for the
<code>aws_secret_access_key</code>.</p>

<p>To use the nondefault profile:</p>

<p><code>
export AWS_ACCESS_KEY_ID=`ruby -rinifile -e "puts IniFile.load(File.join(File.expand_path('~'), '.aws', 'config'))['profile nondefault']['aws_access_key_id']"`
export AWS_SECRET_ACCESS_KEY=`ruby -rinifile -e "puts IniFile.load(File.join(File.expand_path('~'), '.aws', 'config'))['profile nondefault']['aws_secret_access_key']"`
</code></p>

<p>Note that this uses <code>['profile nondefault']</code>.</p>

<p>Since different tools historically have used slightly different
environment variables, I export those too:</p>

<p><code>sh
export AMAZON_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
export AMAZON_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
export AWS_ACCESS_KEY=$AWS_ACCESS_KEY_ID
export AWS_SECRET_KEY=$AWS_SECRET_ACCESS_KEY
</code></p>

<p>I create a separate config script for each account.</p>

<p>The AWS CLI tool will automatically use the <code>~/.aws/config</code>, and can
load different profiles with the <code>--profile</code> option. The <code>aws-sdk</code>
Ruby library will use the environment variables, however. So
authentication in a Ruby script is automatically set up.</p>

<p><code>ruby
require 'aws-sdk'
iam = AWS::IAM.new
</code></p>

<p>Without this, it would be:</p>

<p>```ruby
require &lsquo;aws-sdk&rsquo;
iam = AWS::IAM.new(:access_key_id => &lsquo;YOUR_ACCESS_KEY_ID&rsquo;,</p>

<pre><code>               :secret_access_key =&gt; 'YOUR_SECRET_ACCESS_KEY')
</code></pre>

<p>```</p>

<p>Which is a little ornerous.</p>

<p>To use this with <code>knife-ec2</code>, I have the following in my
<code>.chef/knife.rb</code>:</p>

<p><code>ruby
knife[:aws_access_key_id]      = ENV['AWS_ACCESS_KEY_ID']
knife[:aws_secret_access_key]  = ENV['AWS_SECRET_ACCESS_KEY']
</code></p>

<p>Naturally, since <code>knife.rb</code> is Ruby, I could use <code>Inifile.load</code> there,
but I only started using that library recently, and I have my knife
configuration setup already.</p>
]]></content>
  </entry>
  
</feed>
